array(10) {
  ["Basics"]=>
  array(35) {
    [0]=>
    array(13) {
      ["name"]=>
      string(7) "boolval"
      ["summary"]=>
      string(35) "Get the boolean value of a variable"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.5.0, PHP 7)"
      ["signature"]=>
      string(30) "boolean boolval ( mixed $var )"
      ["anonsig"]=>
      string(29) "boolean ?????? ( mixed $var )"
      ["description"]=>
      string(33) "Returns the boolean value of var."
      ["return"]=>
      string(25) "The boolean value of var."
      ["parameters"]=>
      array(1) {
        ["var"]=>
        string(46) "The scalar value being converted to a boolean."
      }
      ["flatparameters"]=>
      string(3) "var"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [1]=>
    array(13) {
      ["name"]=>
      string(15) "debug_zval_dump"
      ["summary"]=>
      string(65) "Dumps a string representation of an internal zend value to output"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.2.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(56) "void debug_zval_dump ( mixed $variable [, mixed $... ] )"
      ["anonsig"]=>
      string(47) "void ?????? ( mixed $variable [, mixed $... ] )"
      ["description"]=>
      string(66) "Dumps a string representation of an internal zend value to output."
      ["return"]=>
      string(21) "No value is returned."
      ["parameters"]=>
      array(1) {
        ["variable"]=>
        string(29) "The variable being evaluated."
      }
      ["flatparameters"]=>
      string(8) "variable"
      ["notes"]=>
      string(2040) "Note: 
   Beware the refcount
    The refcount value returned by this function is
    non-obvious in certain circumstances. For example, a developer might
    expect the above example to indicate a refcount of
    2. The third reference is created when actually
    calling debug_zval_dump().
   
   
    This behavior is further compounded when a variable is not passed to
    debug_zval_dump() by reference. To illustrate, consider
    a slightly modified version of the above example:
   
   
    
     
     

<?php$var1 = 'Hello World';$var2 = '';$var2 =& $var1;debug_zval_dump($var1); // not passed by reference, this time?>


     

     The above example will output:
     

string(11) "Hello World" refcount(1)

     
    
   
   
    Why refcount(1)? Because a copy of $var1 is
    being made, when the function is called.
   
   
    This function becomes even more confusing when a
    variable with a refcount of 1 is
    passed (by copy/value):
   
   
    
     
     

<?php$var1 = 'Hello World';debug_zval_dump($var1);?>


     

     The above example will output:
     

string(11) "Hello World" refcount(2)

     
    
   
   
    A refcount of 2, here, is extremely
    non-obvious. Especially considering the above examples. So what's
    happening?
   
   
    When a variable has a single reference (as did $var1
    before it was used as an argument to debug_zval_dump()),
    PHP's engine optimizes the manner in which it is passed to a function.
    Internally, PHP treats $var1 like a reference (in that
    the refcount is increased for the scope of this
    function), with the caveat that if the passed reference
    happens to be written to, a copy is made, but only at the moment of
    writing. This is known as "copy on write."
   
   
    So, if debug_zval_dump() happened to write to its sole
    parameter (and it doesn't), then a copy would be made. Until then, the
    parameter remains a reference, causing the refcount to
    be incremented to 2 for the scope of the function call."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [2]=>
    array(12) {
      ["name"]=>
      string(9) "doubleval"
      ["summary"]=>
      string(19) "Alias of floatval()"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(41) "This function is an alias of: floatval()."
      ["anonsig"]=>
      string(41) "This function is an alias of: floatval()."
      ["description"]=>
      string(45) "This function is an alias of: 
   floatval()."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [3]=>
    array(13) {
      ["name"]=>
      string(5) "empty"
      ["summary"]=>
      string(37) "Determine whether a variable is empty"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(25) "bool empty ( mixed $var )"
      ["anonsig"]=>
      string(26) "bool ?????? ( mixed $var )"
      ["description"]=>
      string(205) "Determine whether a variable is considered to be empty. A variable is considered empty if it does not exist or if its value equals FALSE. empty() does not generate a warning if the variable does not exist."
      ["return"]=>
      string(140) "Returns FALSE if var exists and has a non-empty, non-zero value.
   Otherwise returns TRUE.
The following things are considered to be empty:"
      ["parameters"]=>
      array(1) {
        ["var"]=>
        string(467) "Variable to be checked
      
      Note: 
       
        Prior to PHP 5.5, empty() only supports variables;
        anything else will result in a parse error. In other words, the
        following will not work: empty(trim($name)).
        Instead, use trim($name) == false.
       
      
      
       No warning is generated if the variable does not exist.
       That means empty() is essentially the
       concise equivalent to !isset($var) || $var == false."
      }
      ["flatparameters"]=>
      string(3) "var"
      ["notes"]=>
      string(489) "Note: 
       
        Prior to PHP 5.5, empty() only supports variables;
        anything else will result in a parse error. In other words, the
        following will not work: empty(trim($name)).
        Instead, use trim($name) == false.
Note: Because this is a
language construct and not a function, it cannot be called using
variable functions.
Note: 
   
    When using empty() on inaccessible object properties,
    the __isset()
    overloading method will be called, if declared."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(2) {
        ["5.5.0"]=>
        string(70) "empty() now supports expressions, rather than only
         variables."
        ["5.4.0"]=>
        string(53) "Checking non-numeric offsets of strings returns TRUE."
      }
    }
    [4]=>
    array(13) {
      ["name"]=>
      string(8) "floatval"
      ["summary"]=>
      string(29) "Get float value of a variable"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.2.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(29) "float floatval ( mixed $var )"
      ["anonsig"]=>
      string(27) "float ?????? ( mixed $var )"
      ["description"]=>
      string(28) "Gets the float value of var."
      ["return"]=>
      string(242) "The float value of the given variable. Empty arrays return 0, non-empty
   arrays return 1.
Strings will most likely return 0 although this depends on the 
   leftmost characters of the string. The common rules of 
   float casting 
   apply."
      ["parameters"]=>
      array(1) {
        ["var"]=>
        string(139) "May be any scalar type. floatval() should not be used
       on objects, as doing so will emit an E_NOTICE level
       error and return 1."
      }
      ["flatparameters"]=>
      string(3) "var"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [5]=>
    array(13) {
      ["name"]=>
      string(16) "get_defined_vars"
      ["summary"]=>
      string(41) "Returns an array of all defined variables"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.4, PHP 5, PHP 7)"
      ["signature"]=>
      string(31) "array get_defined_vars ( void )"
      ["anonsig"]=>
      string(21) "array ?????? ( void )"
      ["description"]=>
      string(206) "This function returns a multidimensional array containing a list of
   all defined variables, be them environment, server or user-defined
   variables, within the scope that get_defined_vars() is
   called."
      ["return"]=>
      string(48) "A multidimensional array with all the variables."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [6]=>
    array(13) {
      ["name"]=>
      string(17) "get_resource_type"
      ["summary"]=>
      string(25) "Returns the resource type"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.2, PHP 5, PHP 7)"
      ["signature"]=>
      string(45) "string get_resource_type ( resource $handle )"
      ["anonsig"]=>
      string(34) "string ?????? ( resource $handle )"
      ["description"]=>
      string(50) "This function gets the type of the given resource."
      ["return"]=>
      string(281) "If the given handle is a resource, this function
   will return a string representing its type. If the type is not identified
   by this function, the return value will be the string 
   Unknown.
This function will return NULL and generate an error if 
   handle is not a resource."
      ["parameters"]=>
      array(1) {
        ["handle"]=>
        string(30) "The evaluated resource handle."
      }
      ["flatparameters"]=>
      string(6) "handle"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["PHP 5.3.0"]=>
        string(98) "If handle is not a resource this
       functions returns NULL. Formerly, FALSE has been returned."
      }
    }
    [7]=>
    array(13) {
      ["name"]=>
      string(7) "gettype"
      ["summary"]=>
      string(26) "Get the type of a variable"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(29) "string gettype ( mixed $var )"
      ["anonsig"]=>
      string(28) "string ?????? ( mixed $var )"
      ["description"]=>
      string(83) "Returns the type of the PHP variable var. For
   type checking, use is_* functions."
      ["return"]=>
      string(44) "Possible values for the returned string are:"
      ["parameters"]=>
      array(1) {
        ["var"]=>
        string(32) "The variable being type checked."
      }
      ["flatparameters"]=>
      string(3) "var"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [8]=>
    array(13) {
      ["name"]=>
      string(24) "import_request_variables"
      ["summary"]=>
      string(54) "Import GET/POST/Cookie variables into the global scope"
      ["versions"]=>
      string(31) "(PHP 4 >= 4.1.0, PHP 5 < 5.4.0)"
      ["signature"]=>
      string(67) "bool import_request_variables ( string $types [, string $prefix ] )"
      ["anonsig"]=>
      string(49) "bool ?????? ( string $types [, string $prefix ] )"
      ["description"]=>
      string(366) "Imports GET/POST/Cookie variables into the global scope. It is useful if
   you disabled register_globals,
   but would like to see some variables in the global scope.
If you're interested in importing other variables into the global scope,
   such as $_SERVER, consider using extract().
This function has been
DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(2) {
        ["types"]=>
        string(567) "Using the types parameter, you can specify
       which request variables to import. You can use 'G', 'P' and 'C' 
       characters respectively for GET, POST and Cookie. These characters are
       not case sensitive, so you can also use any combination of 'g', 'p'
       and 'c'. POST includes the POST uploaded file information.
      
      Note: 
       
        Note that the order of the letters matters, as when using
        "GP", the
        POST variables will overwrite GET variables with the same name. Any
        other letters than GPC are discarded."
        ["prefix"]=>
        string(574) "Variable name prefix, prepended before all variable's name imported
       into the global scope. So if you have a GET value named
       "userid", and provide a prefix
       "pref_", then you'll get a global variable named
       $pref_userid.
      
      Note: 
       
        Although the prefix parameter is optional, you
        will get an E_NOTICE level
        error if you specify no prefix, or specify an empty string as a
        prefix. This is a possible security hazard. Notice level errors are
        not displayed using the default error reporting level."
      }
      ["flatparameters"]=>
      string(13) "types, prefix"
      ["notes"]=>
      string(536) "Note: 
       
        Note that the order of the letters matters, as when using
        "GP", the
        POST variables will overwrite GET variables with the same name. Any
        other letters than GPC are discarded.
Note: 
       
        Although the prefix parameter is optional, you
        will get an E_NOTICE level
        error if you specify no prefix, or specify an empty string as a
        prefix. This is a possible security hazard. Notice level errors are
        not displayed using the default error reporting level."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(85) "WarningThis function has been
DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0."
      ["changelog"]=>
      array(0) {
      }
    }
    [9]=>
    array(13) {
      ["name"]=>
      string(6) "intval"
      ["summary"]=>
      string(35) "Get the integer value of a variable"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(45) "int intval ( mixed $var [, int $base = 10 ] )"
      ["anonsig"]=>
      string(45) "int ?????? ( mixed $var [, int $base = 10 ] )"
      ["description"]=>
      string(216) "Returns the integer value of var,
   using the specified base for the conversion 
   (the default is base 10). intval() should not be used
   on objects, as doing so will emit an E_NOTICE level
   error and return 1."
      ["return"]=>
      string(554) "The integer value of var on success, or 0 on
   failure. Empty arrays return 0, non-empty arrays return 1.
The maximum value depends on the system. 32 bit systems have a 
   maximum signed integer range of -2147483648 to 2147483647. So for example 
   on such a system, intval('1000000000000') will return 
   2147483647. The maximum signed integer value for 64 bit systems is 
   9223372036854775807.
Strings will most likely return 0 although this depends on the 
   leftmost characters of the string. The common rules of 
   integer casting 
   apply."
      ["parameters"]=>
      array(2) {
        ["var"]=>
        string(46) "The scalar value being converted to an integer"
        ["base"]=>
        string(485) "The base for the conversion
      
      Note: 
       
        If base is 0, the base used is determined
        by the format of var:
        
          
           if string includes a "0x" (or "0X") prefix, the base is taken
           as 16 (hex); otherwise,
          
         
         
          
           if string starts with "0", the base is taken as 8 (octal);
           otherwise,
          
         
         
          
           the base is taken as 10 (decimal)."
      }
      ["flatparameters"]=>
      string(9) "var, base"
      ["notes"]=>
      string(534) "Note: 
       
        If base is 0, the base used is determined
        by the format of var:
        
          
           if string includes a "0x" (or "0X") prefix, the base is taken
           as 16 (hex); otherwise,
          
         
         
          
           if string starts with "0", the base is taken as 8 (octal);
           otherwise,
          
         
         
          
           the base is taken as 10 (decimal).
Note: 
   
    The base parameter has no effect unless the
    var parameter is a string."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.1.0"]=>
        string(80) "Throws E_NOTICE and
        returns 1, when an object is passed to 
        var."
      }
    }
    [10]=>
    array(13) {
      ["name"]=>
      string(8) "is_array"
      ["summary"]=>
      string(36) "Finds whether a variable is an array"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(28) "bool is_array ( mixed $var )"
      ["anonsig"]=>
      string(26) "bool ?????? ( mixed $var )"
      ["description"]=>
      string(45) "Finds whether the given variable is an array."
      ["return"]=>
      string(52) "Returns TRUE if var is an array,
   FALSE otherwise."
      ["parameters"]=>
      array(1) {
        ["var"]=>
        string(29) "The variable being evaluated."
      }
      ["flatparameters"]=>
      string(3) "var"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [11]=>
    array(13) {
      ["name"]=>
      string(7) "is_bool"
      ["summary"]=>
      string(41) "Finds out whether a variable is a boolean"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(27) "bool is_bool ( mixed $var )"
      ["anonsig"]=>
      string(26) "bool ?????? ( mixed $var )"
      ["description"]=>
      string(46) "Finds whether the given variable is a boolean."
      ["return"]=>
      string(53) "Returns TRUE if var is a boolean,
   FALSE otherwise."
      ["parameters"]=>
      array(1) {
        ["var"]=>
        string(29) "The variable being evaluated."
      }
      ["flatparameters"]=>
      string(3) "var"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [12]=>
    array(13) {
      ["name"]=>
      string(11) "is_callable"
      ["summary"]=>
      string(66) "Verify that the contents of a variable can be called as a function"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(89) "bool is_callable ( mixed $var [, bool $syntax_only = false [, string &$callable_name ]] )"
      ["anonsig"]=>
      string(84) "bool ?????? ( mixed $var [, bool $syntax_only = false [, string &$callable_name ]] )"
      ["description"]=>
      string(224) "Verify that the contents of a variable can be called as a function.
   This can check that a simple variable contains the name of a valid
   function, or that an array contains a properly encoded object and
   function name."
      ["return"]=>
      string(53) "Returns TRUE if var is callable, FALSE 
   otherwise."
      ["parameters"]=>
      array(3) {
        ["var"]=>
        string(18) "The value to check"
        ["syntax_only"]=>
        string(373) "If set to TRUE the function only verifies that
       name might be a function or method. It will only
       reject simple variables that are not strings, or an array that does
       not have a valid structure to be used as a callback. The valid ones
       are supposed to have only 2 entries, the first of which is an object
       or a string, and the second a string."
        ["callable_name"]=>
        string(228) "Receives the "callable name".  In the example below it is
       "someClass::someMethod".  Note, however, that despite the implication
       that someClass::SomeMethod() is a callable static method, this is not
       the case."
      }
      ["flatparameters"]=>
      string(31) "var, syntax_only, callable_name"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [13]=>
    array(12) {
      ["name"]=>
      string(9) "is_double"
      ["summary"]=>
      string(19) "Alias of is_float()"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(41) "This function is an alias of: is_float()."
      ["anonsig"]=>
      string(41) "This function is an alias of: is_float()."
      ["description"]=>
      string(45) "This function is an alias of: 
   is_float()."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [14]=>
    array(13) {
      ["name"]=>
      string(8) "is_float"
      ["summary"]=>
      string(45) "Finds whether the type of a variable is float"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(28) "bool is_float ( mixed $var )"
      ["anonsig"]=>
      string(26) "bool ?????? ( mixed $var )"
      ["description"]=>
      string(197) "Finds whether the type of the given variable is float.
Note:
To test if a variable is a number or a numeric string (such as form
    input, which is always a string), you must use
    is_numeric()."
      ["return"]=>
      string(51) "Returns TRUE if var is a float,
   FALSE otherwise."
      ["parameters"]=>
      array(1) {
        ["var"]=>
        string(29) "The variable being evaluated."
      }
      ["flatparameters"]=>
      string(3) "var"
      ["notes"]=>
      string(151) "Note: 
   
    To test if a variable is a number or a numeric string (such as form
    input, which is always a string), you must use
    is_numeric()."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [15]=>
    array(13) {
      ["name"]=>
      string(6) "is_int"
      ["summary"]=>
      string(46) "Find whether the type of a variable is integer"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(26) "bool is_int ( mixed $var )"
      ["anonsig"]=>
      string(26) "bool ?????? ( mixed $var )"
      ["description"]=>
      string(199) "Finds whether the type of the given variable is integer.
Note:
To test if a variable is a number or a numeric string (such as form
    input, which is always a string), you must use
    is_numeric()."
      ["return"]=>
      string(54) "Returns TRUE if var is an integer,
   FALSE otherwise."
      ["parameters"]=>
      array(1) {
        ["var"]=>
        string(29) "The variable being evaluated."
      }
      ["flatparameters"]=>
      string(3) "var"
      ["notes"]=>
      string(151) "Note: 
   
    To test if a variable is a number or a numeric string (such as form
    input, which is always a string), you must use
    is_numeric()."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [16]=>
    array(12) {
      ["name"]=>
      string(10) "is_integer"
      ["summary"]=>
      string(17) "Alias of is_int()"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(39) "This function is an alias of: is_int()."
      ["anonsig"]=>
      string(39) "This function is an alias of: is_int()."
      ["description"]=>
      string(43) "This function is an alias of: 
   is_int()."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [17]=>
    array(13) {
      ["name"]=>
      string(11) "is_iterable"
      ["summary"]=>
      string(59) "Verify that the contents of a variable is an iterable value"
      ["versions"]=>
      string(16) "(PHP 7 >= 7.1.0)"
      ["signature"]=>
      string(31) "bool is_iterable ( mixed $var )"
      ["anonsig"]=>
      string(26) "bool ?????? ( mixed $var )"
      ["description"]=>
      string(148) "Verify that the contents of a variable is accepted by the
   iterable pseudo-type, i.e. that it is an array or
   an object implementing Traversable"
      ["return"]=>
      string(53) "Returns TRUE if var is iterable, FALSE 
   otherwise."
      ["parameters"]=>
      array(1) {
        ["var"]=>
        string(18) "The value to check"
      }
      ["flatparameters"]=>
      string(3) "var"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [18]=>
    array(12) {
      ["name"]=>
      string(7) "is_long"
      ["summary"]=>
      string(17) "Alias of is_int()"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(39) "This function is an alias of: is_int()."
      ["anonsig"]=>
      string(39) "This function is an alias of: is_int()."
      ["description"]=>
      string(43) "This function is an alias of: 
   is_int()."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [19]=>
    array(13) {
      ["name"]=>
      string(7) "is_null"
      ["summary"]=>
      string(32) "Finds whether a variable is NULL"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.4, PHP 5, PHP 7)"
      ["signature"]=>
      string(27) "bool is_null ( mixed $var )"
      ["anonsig"]=>
      string(26) "bool ?????? ( mixed $var )"
      ["description"]=>
      string(41) "Finds whether the given variable is NULL."
      ["return"]=>
      string(48) "Returns TRUE if var is null, FALSE
   otherwise."
      ["parameters"]=>
      array(1) {
        ["var"]=>
        string(29) "The variable being evaluated."
      }
      ["flatparameters"]=>
      string(3) "var"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [20]=>
    array(13) {
      ["name"]=>
      string(10) "is_numeric"
      ["summary"]=>
      string(56) "Finds whether a variable is a number or a numeric string"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(30) "bool is_numeric ( mixed $var )"
      ["anonsig"]=>
      string(26) "bool ?????? ( mixed $var )"
      ["description"]=>
      string(302) "Finds whether the given variable is numeric. Numeric strings consist of optional
   sign, any number of digits, optional decimal part and optional exponential part.
   Thus +0123.45e6 is a valid numeric value. Hexadecimal (e.g.
   0xf4c3b00c) and binary (e.g. 0b10100111001)
   notation is not allowed."
      ["return"]=>
      string(72) "Returns TRUE if var is a number or a numeric
   string, FALSE otherwise."
      ["parameters"]=>
      array(1) {
        ["var"]=>
        string(29) "The variable being evaluated."
      }
      ["flatparameters"]=>
      string(3) "var"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["7.0.0"]=>
        string(145) "Strings in hexadecimal (e.g. 0xf4c3b00c) notation are
        no longer regarded as numeric strings, i.e.
        is_numeric() returns FALSE now."
      }
    }
    [21]=>
    array(13) {
      ["name"]=>
      string(9) "is_object"
      ["summary"]=>
      string(37) "Finds whether a variable is an object"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(29) "bool is_object ( mixed $var )"
      ["anonsig"]=>
      string(26) "bool ?????? ( mixed $var )"
      ["description"]=>
      string(46) "Finds whether the given variable is an object."
      ["return"]=>
      string(53) "Returns TRUE if var is an object,
   FALSE otherwise."
      ["parameters"]=>
      array(1) {
        ["var"]=>
        string(29) "The variable being evaluated."
      }
      ["flatparameters"]=>
      string(3) "var"
      ["notes"]=>
      string(170) "Note: 
   
    This function will return FALSE if used on an unserialized object
    where the class definition is not present (even though
    gettype() returns object)."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [22]=>
    array(12) {
      ["name"]=>
      string(7) "is_real"
      ["summary"]=>
      string(19) "Alias of is_float()"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(41) "This function is an alias of: is_float()."
      ["anonsig"]=>
      string(41) "This function is an alias of: is_float()."
      ["description"]=>
      string(45) "This function is an alias of: 
   is_float()."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [23]=>
    array(13) {
      ["name"]=>
      string(11) "is_resource"
      ["summary"]=>
      string(38) "Finds whether a variable is a resource"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(31) "bool is_resource ( mixed $var )"
      ["anonsig"]=>
      string(26) "bool ?????? ( mixed $var )"
      ["description"]=>
      string(47) "Finds whether the given variable is a resource."
      ["return"]=>
      string(54) "Returns TRUE if var is a resource,
   FALSE otherwise."
      ["parameters"]=>
      array(1) {
        ["var"]=>
        string(29) "The variable being evaluated."
      }
      ["flatparameters"]=>
      string(3) "var"
      ["notes"]=>
      string(139) "Note: 
   
    is_resource() is not a strict type-checking method: it will return FALSE if var is a resource variable that has been closed."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [24]=>
    array(13) {
      ["name"]=>
      string(9) "is_scalar"
      ["summary"]=>
      string(36) "Finds whether a variable is a scalar"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.5, PHP 5, PHP 7)"
      ["signature"]=>
      string(29) "bool is_scalar ( mixed $var )"
      ["anonsig"]=>
      string(26) "bool ?????? ( mixed $var )"
      ["description"]=>
      string(469) "Finds whether the given variable is a scalar.
Scalar variables are those containing an integer, 
   float, string or boolean.  
   Types array, object and resource 
   are not scalar.
Note:
is_scalar() does not consider resource
    type values to be scalar as resources are abstract datatypes 
    which are currently based on integers. This implementation detail should 
    not be relied upon, as it may change.
Note:
is_scalar() does not consider NULL to be scalar."
      ["return"]=>
      string(52) "Returns TRUE if var is a scalar, FALSE
   otherwise."
      ["parameters"]=>
      array(1) {
        ["var"]=>
        string(29) "The variable being evaluated."
      }
      ["flatparameters"]=>
      string(3) "var"
      ["notes"]=>
      string(303) "Note: 
   
    is_scalar() does not consider resource
    type values to be scalar as resources are abstract datatypes 
    which are currently based on integers. This implementation detail should 
    not be relied upon, as it may change.
Note: 
   
    is_scalar() does not consider NULL to be scalar."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [25]=>
    array(13) {
      ["name"]=>
      string(9) "is_string"
      ["summary"]=>
      string(45) "Find whether the type of a variable is string"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(29) "bool is_string ( mixed $var )"
      ["anonsig"]=>
      string(26) "bool ?????? ( mixed $var )"
      ["description"]=>
      string(48) "Finds whether the type given variable is string."
      ["return"]=>
      string(58) "Returns TRUE if var is of type string,
   FALSE otherwise."
      ["parameters"]=>
      array(1) {
        ["var"]=>
        string(29) "The variable being evaluated."
      }
      ["flatparameters"]=>
      string(3) "var"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [26]=>
    array(13) {
      ["name"]=>
      string(5) "isset"
      ["summary"]=>
      string(46) "Determine if a variable is set and is not NULL"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(41) "bool isset ( mixed $var [, mixed $... ] )"
      ["anonsig"]=>
      string(42) "bool ?????? ( mixed $var [, mixed $... ] )"
      ["description"]=>
      string(484) "Determine if a variable is set and is not NULL.
If a variable has been unset with unset(), it will no
   longer be set. isset() will return FALSE if testing a
   variable that has been set to NULL. Also note that a null character
   ("\0") is not equivalent to the PHP NULL constant.
If multiple parameters are supplied then isset() will
   return TRUE only if all of the parameters are set. Evaluation goes from
   left to right and stops as soon as an unset variable is encountered."
      ["return"]=>
      string(77) "Returns TRUE if var exists and has value other
   than NULL. FALSE otherwise."
      ["parameters"]=>
      array(2) {
        ["var"]=>
        string(27) "The variable to be checked."
        ["..."]=>
        string(20) "Another variable ..."
      }
      ["flatparameters"]=>
      string(8) "var, ..."
      ["notes"]=>
      string(247) "Note: Because this is a
language construct and not a function, it cannot be called using
variable functions.
Note: 
   
    When using isset() on inaccessible object properties,
    the __isset()
    overloading method will be called, if declared."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(181) "Warning
   
    isset() only works with variables as passing anything
    else will result in a parse error.  For checking if 
    constants are set use the 
    defined() function."
      ["changelog"]=>
      array(1) {
        ["5.4.0"]=>
        string(58) "Checking non-numeric offsets of strings now returns FALSE."
      }
    }
    [27]=>
    array(13) {
      ["name"]=>
      string(7) "print_r"
      ["summary"]=>
      string(50) "Prints human-readable information about a variable"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(61) "mixed print_r ( mixed $expression [, bool $return = false ] )"
      ["anonsig"]=>
      string(60) "mixed ?????? ( mixed $expression [, bool $return = false ] )"
      ["description"]=>
      string(234) "print_r() displays information about a variable
   in a way that's readable by humans.
print_r(), var_dump() and
   var_export() will
   also show protected and private properties of objects.
   Static class members will not be shown."
      ["return"]=>
      string(316) "If given a string, integer or float,
   the value itself will be printed.  If given an array, values
   will be presented in a format that shows keys and elements.  Similar
   notation is used for objects.
When the return parameter is TRUE, this function
   will return a string. Otherwise, the return value is TRUE."
      ["parameters"]=>
      array(2) {
        ["expression"]=>
        string(29) "The expression to be printed."
        ["return"]=>
        string(191) "If you would like to capture the output of print_r(), 
       use the return parameter.  When this parameter is set
       to TRUE, print_r() will return the information rather than print it."
      }
      ["flatparameters"]=>
      string(18) "expression, return"
      ["notes"]=>
      string(146) "Note: When the return parameter
is used, this function uses internal output buffering so it cannot be used inside an
ob_start() callback function."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [28]=>
    array(13) {
      ["name"]=>
      string(9) "serialize"
      ["summary"]=>
      string(46) "Generates a storable representation of a value"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(33) "string serialize ( mixed $value )"
      ["anonsig"]=>
      string(30) "string ?????? ( mixed $value )"
      ["description"]=>
      string(223) "Generates a storable representation of a value.
This is useful for storing or passing PHP values around without
   losing their type and structure.
To make the serialized string into a PHP value again, use
   unserialize()."
      ["return"]=>
      string(339) "Returns a string containing a byte-stream representation of 
   value that can be stored anywhere.
Note that this is a binary string which may include null bytes, and needs
   to be stored and handled as such. For example,
   serialize() output should generally be stored in a BLOB
   field in a database, rather than a CHAR or TEXT field."
      ["parameters"]=>
      array(1) {
        ["value"]=>
        string(894) "The value to be serialized. serialize()
       handles all types, except the resource-type.
       You can even serialize() arrays that contain
       references to itself. Circular references inside the array/object you 
       are serializing will also be stored. Any other 
       reference will be lost.
      
      
       When serializing objects, PHP will attempt to call the member function
       __sleep() prior to serialization. 
       This is to allow the object to do any last minute clean-up, etc. prior 
       to being serialized. Likewise, when the object is restored using 
       unserialize() the __wakeup() member function is called.
      
      Note: 
       
       Object's private members have the class name prepended to the member
       name; protected members have a '*' prepended to the member name.
       These prepended values have null bytes on either side."
      }
      ["flatparameters"]=>
      string(5) "value"
      ["notes"]=>
      string(775) "Note: 
       
       Object's private members have the class name prepended to the member
       name; protected members have a '*' prepended to the member name.
       These prepended values have null bytes on either side.
Note: 
   
    Note that many built-in PHP objects cannot be serialized. However, those with 
    this ability either implement the Serializable interface or the 
    magic __sleep() and
    __wakeup() methods. If an 
    internal class does not fulfill any of those requirements, it cannot reliably be 
    serialized.
   
   
    There are some historical exceptions to the above rule, where some internal objects 
    could be serialized without implementing the interface or exposing the methods. Notably, 
    the ArrayObject prior to PHP 5.2.0."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(157) "Warning
   
    When serialize() serializes objects, the leading backslash is not included in the class name of namespaced classes for maximum compatibility."
      ["changelog"]=>
      array(0) {
      }
    }
    [29]=>
    array(13) {
      ["name"]=>
      string(7) "settype"
      ["summary"]=>
      string(26) "Set the type of a variable"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(43) "bool settype ( mixed &$var , string $type )"
      ["anonsig"]=>
      string(42) "bool ?????? ( mixed &$var , string $type )"
      ["description"]=>
      string(40) "Set the type of variable var to
   type."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(2) {
        ["var"]=>
        string(29) "The variable being converted."
        ["type"]=>
        string(437) "Possibles values of type are:
       
         
          "boolean" or "bool"
         
        
        
         
          "integer" or "int"
         
        
        
         
          "float" or "double"
         
        
        
         
          "string"
         
        
        
         
          "array"
         
        
        
         
          "object"
         
        
        
         
          "null""
      }
      ["flatparameters"]=>
      string(9) "var, type"
      ["notes"]=>
      string(54) "Note: 
   
    Maximum value for "int" is PHP_INT_MAX."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [30]=>
    array(13) {
      ["name"]=>
      string(6) "strval"
      ["summary"]=>
      string(30) "Get string value of a variable"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(28) "string strval ( mixed $var )"
      ["anonsig"]=>
      string(28) "string ?????? ( mixed $var )"
      ["description"]=>
      string(294) "Get the string value of a variable.
   See the documentation on string for more information
   on converting to string.
This function performs no formatting on the returned value. If you
   are looking for a way to format a numeric value as a string, please
   see sprintf() or number_format()."
      ["return"]=>
      string(24) "The string value of var."
      ["parameters"]=>
      array(1) {
        ["var"]=>
        string(274) "The variable that is being converted to a string.
      
      
       var may be any scalar type or an object that
       implements the __toString()
       method. You cannot use strval() on arrays or on
       objects that do not implement the
       __toString() method."
      }
      ["flatparameters"]=>
      string(3) "var"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [31]=>
    array(13) {
      ["name"]=>
      string(11) "unserialize"
      ["summary"]=>
      string(48) "Creates a PHP value from a stored representation"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(53) "mixed unserialize ( string $str [, array $options ] )"
      ["anonsig"]=>
      string(48) "mixed ?????? ( string $str [, array $options ] )"
      ["description"]=>
      string(687) "unserialize() takes a single serialized variable and
   converts it back into a PHP value.
Do not pass untrusted user input to unserialize() regardless
    of the options value of allowed_classes.
    Unserialization can result in code being loaded and executed due to object
    instantiation and autoloading, and a malicious user may be able to exploit
    this. Use a safe, standard data interchange format such as JSON (via
    json_decode() and json_encode()) if
    you need to pass serialized data to the user.
If you need to unserialize externally stored serialized data, consider to
    use hash_hmac() for data validation. Make sure data is
    not modified by anyone, but you."
      ["return"]=>
      string(196) "The converted value is returned, and can be a boolean,
   integer, float, string,
   array or object.
In case the passed string is not unserializeable, FALSE is returned and
   E_NOTICE is issued."
      ["parameters"]=>
      array(2) {
        ["str"]=>
        string(780) "The serialized string.
      
      
       If the variable being unserialized is an object, after successfully 
       reconstructing the object PHP will automatically attempt to call the
       __wakeup() member
       function (if it exists).
      
      
       Note: 
        unserialize_callback_func directive
         It's possible to set a callback-function which will be called,
         if an undefined class should be instantiated during unserializing.
         (to prevent getting an incomplete object "__PHP_Incomplete_Class".)
         Use your php.ini, ini_set() or .htaccess 
         to define 'unserialize_callback_func'.  Everytime an undefined class
         should be instantiated, it'll be called.  To disable this feature just
         empty this setting."
        ["options"]=>
        string(747) "Any options to be provided to unserialize(), as an
       associative array.
      
      Valid options
       
        Name
          Type
          Description
         allowed_classes
          mixed
          
           
            Either an array of class names which should be
            accepted, FALSE to accept no classes, or TRUE to accept all
            classes. If this option is defined and
            unserialize() encounters an object of a class
            that isn't to be accepted, then the object will be instantiated as
            __PHP_Incomplete_Class instead.
           
           
            Omitting this option is the same as defining it as TRUE: PHP
            will attempt to instantiate objects of any class."
      }
      ["flatparameters"]=>
      string(12) "str, options"
      ["notes"]=>
      string(513) "Note: 
        unserialize_callback_func directive
         It's possible to set a callback-function which will be called,
         if an undefined class should be instantiated during unserializing.
         (to prevent getting an incomplete object "__PHP_Incomplete_Class".)
         Use your php.ini, ini_set() or .htaccess 
         to define 'unserialize_callback_func'.  Everytime an undefined class
         should be instantiated, it'll be called.  To disable this feature just
         empty this setting."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(869) "Warning
   
    Do not pass untrusted user input to unserialize() regardless
    of the options value of allowed_classes.
    Unserialization can result in code being loaded and executed due to object
    instantiation and autoloading, and a malicious user may be able to exploit
    this. Use a safe, standard data interchange format such as JSON (via
    json_decode() and json_encode()) if
    you need to pass serialized data to the user.
   
   
    If you need to unserialize externally stored serialized data, consider to
    use hash_hmac() for data validation. Make sure data is
    not modified by anyone, but you.
Warning
   
    FALSE is returned both in the case of an error and if unserializing
    the serialized FALSE value. It is possible to catch this special case by
    comparing str with
    serialize(false) or by catching the issued
    E_NOTICE."
      ["changelog"]=>
      array(3) {
        ["7.1.0"]=>
        string(207) "The allowed_classes element of
        options) is now strictly typed, i.e. if anything
        other than an array or a boolean is given,
        unserialize() returns FALSE and issues an
        E_WARNING."
        ["7.0.0"]=>
        string(37) "The options parameter has been added."
        ["5.6.0"]=>
        string(149) "Manipulating the serialised data by replacing C:
        with O: to force object instantiation without
        calling the constructor will now fail."
      }
    }
    [32]=>
    array(13) {
      ["name"]=>
      string(5) "unset"
      ["summary"]=>
      string(22) "Unset a given variable"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(41) "void unset ( mixed $var [, mixed $... ] )"
      ["anonsig"]=>
      string(42) "void ?????? ( mixed $var [, mixed $... ] )"
      ["description"]=>
      string(986) "unset() destroys the specified variables.
The behavior of unset() inside of a function
   can vary depending on what type of variable you are attempting to
   destroy.
If a globalized variable is unset() inside of
   a function, only the local variable is destroyed.  The variable
   in the calling environment will retain the same value as before
   unset() was called.
The above example will output:

To unset() a global variable
   inside of a function, then use
   the $GLOBALS array to do so:
If a variable that is PASSED BY REFERENCE is
   unset() inside of a function, only the local
   variable is destroyed.  The variable in the calling environment
   will retain the same value as before unset()
   was called.
The above example will output:

If a static variable is unset() inside of a
   function, unset() destroys the variable only in the
   context of the rest of a function. Following calls will restore the
   previous value of a variable.
The above example will output:"
      ["return"]=>
      string(21) "No value is returned."
      ["parameters"]=>
      array(2) {
        ["var"]=>
        string(25) "The variable to be unset."
        ["..."]=>
        string(20) "Another variable ..."
      }
      ["flatparameters"]=>
      string(8) "var, ..."
      ["notes"]=>
      string(427) "Note: Because this is a
language construct and not a function, it cannot be called using
variable functions.
Note: 
   
    It is possible to unset even object properties visible in current context.
Note: 
   
    It is not possible to unset $this inside an object
    method since PHP 5.
Note: 
   
    When using unset() on inaccessible object properties,
    the __unset()
    overloading method will be called, if declared."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [33]=>
    array(13) {
      ["name"]=>
      string(8) "var_dump"
      ["summary"]=>
      string(34) "Dumps information about a variable"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(51) "void var_dump ( mixed $expression [, mixed $... ] )"
      ["anonsig"]=>
      string(49) "void ?????? ( mixed $expression [, mixed $... ] )"
      ["description"]=>
      string(561) "This function displays structured information about one or more
   expressions that includes its type and value. Arrays and objects are
   explored recursively with values indented to show structure.
All public, private and protected properties of objects will be returned in
   the output unless the object implements a
   __debugInfo() method
   (implemented in PHP 5.6.0).
As with anything that outputs
its result directly to the browser, the output-control functions can be used to capture
the output of this function, and save it in a
string (for example)."
      ["return"]=>
      string(21) "No value is returned."
      ["parameters"]=>
      array(1) {
        ["expression"]=>
        string(30) "The variable you want to dump."
      }
      ["flatparameters"]=>
      string(10) "expression"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [34]=>
    array(13) {
      ["name"]=>
      string(10) "var_export"
      ["summary"]=>
      string(65) "Outputs or returns a parsable string representation of a variable"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.2.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(64) "mixed var_export ( mixed $expression [, bool $return = false ] )"
      ["anonsig"]=>
      string(60) "mixed ?????? ( mixed $expression [, bool $return = false ] )"
      ["description"]=>
      string(168) "var_export() gets structured information about the 
   given variable. It is similar to var_dump()
   with one exception: the returned representation is valid PHP code."
      ["return"]=>
      string(142) "Returns the variable representation when the return 
   parameter is used and evaluates to TRUE. Otherwise, this function will
   return NULL."
      ["parameters"]=>
      array(2) {
        ["expression"]=>
        string(32) "The variable you want to export."
        ["return"]=>
        string(110) "If used and set to TRUE, var_export() will return
       the variable representation instead of outputting it."
      }
      ["flatparameters"]=>
      string(18) "expression, return"
      ["notes"]=>
      string(680) "Note: When the return parameter
is used, this function uses internal output buffering so it cannot be used inside an
ob_start() callback function.
Note: 
   
    Variables of type resource couldn't be exported by this
    function.
Note: 
   
    var_export() does not handle circular references as
    it would be close to impossible to generate parsable PHP code for that.
    If you want to do something with the full representation of an array
    or object, use serialize().
Note: 
   
    To be able to evaluate the PHP generated by var_export(),
    all processed objects must implement the magic __set_state method. Note that StdClass
    does not implement __set_state()."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(155) "Warning
   
    When var_export() exports objects, the leading backslash is not included in the class name of namespaced classes for maximum compatibility."
      ["changelog"]=>
      array(1) {
        ["5.1.0"]=>
        string(113) "Possibility to export classes and arrays containing classes using the
        __set_state() magic
        method."
      }
    }
  }
  ["Data formats and types"]=>
  array(1) {
    [0]=>
    array(13) {
      ["name"]=>
      string(20) "dom_import_simplexml"
      ["summary"]=>
      string(58) "Gets a DOMElement object from a
   SimpleXMLElement object"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(58) "DOMElement dom_import_simplexml ( SimpleXMLElement $node )"
      ["anonsig"]=>
      string(44) "DOMElement ?????? ( SimpleXMLElement $node )"
      ["description"]=>
      string(160) "This function takes the node node of class
   SimpleXML and makes it into a
   DOMElement node. This new object can then be used
   as a native DOMElement node."
      ["return"]=>
      string(55) "The DOMElement node added or FALSE if any errors occur."
      ["parameters"]=>
      array(1) {
        ["node"]=>
        string(26) "The SimpleXMLElement node."
      }
      ["flatparameters"]=>
      string(4) "node"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
  }
  ["Strings"]=>
  array(55) {
    [0]=>
    array(13) {
      ["name"]=>
      string(17) "mb_check_encoding"
      ["summary"]=>
      string(55) "Check if the string is valid for the specified encoding"
      ["versions"]=>
      string(39) "(PHP 4 >= 4.4.3, PHP 5 >= 5.1.3, PHP 7)"
      ["signature"]=>
      string(94) "bool mb_check_encoding ([ string $var = NULL [, string $encoding = mb_internal_encoding() ]] )"
      ["anonsig"]=>
      string(83) "bool ?????? ([ string $var = NULL [, string $encoding = mb_internal_encoding() ]] )"
      ["description"]=>
      string(136) "Checks if the specified byte stream is valid for the specified encoding.
   It is useful to prevent so-called "Invalid Encoding Attack"."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(2) {
        ["var"]=>
        string(121) "The byte stream to check. If it is omitted, this function checks
        all the input from the beginning of the request."
        ["encoding"]=>
        string(22) "The expected encoding."
      }
      ["flatparameters"]=>
      string(13) "var, encoding"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [1]=>
    array(13) {
      ["name"]=>
      string(15) "mb_convert_case"
      ["summary"]=>
      string(32) "Perform case folding on a string"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.3.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(97) "string mb_convert_case ( string $str , int $mode [, string $encoding = mb_internal_encoding() ] )"
      ["anonsig"]=>
      string(88) "string ?????? ( string $str , int $mode [, string $encoding = mb_internal_encoding() ] )"
      ["description"]=>
      string(77) "Performs case folding on a string, converted in the way specified by
   mode."
      ["return"]=>
      string(74) "A case folded version of string converted in the
   way specified by mode."
      ["parameters"]=>
      array(3) {
        ["str"]=>
        string(27) "The string being converted."
        ["mode"]=>
        string(116) "The mode of the conversion. It can be one of 
       MB_CASE_UPPER, 
       MB_CASE_LOWER, or 
       MB_CASE_TITLE."
        ["encoding"]=>
        string(119) "The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used."
      }
      ["flatparameters"]=>
      string(19) "str, mode, encoding"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [2]=>
    array(13) {
      ["name"]=>
      string(19) "mb_convert_encoding"
      ["summary"]=>
      string(26) "Convert character encoding"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(115) "string mb_convert_encoding ( string $str , string $to_encoding [, mixed $from_encoding = mb_internal_encoding() ] )"
      ["anonsig"]=>
      string(102) "string ?????? ( string $str , string $to_encoding [, mixed $from_encoding = mb_internal_encoding() ] )"
      ["description"]=>
      string(97) "Converts the character encoding of string str
   to to_encoding
   from optionally from_encoding."
      ["return"]=>
      string(19) "The encoded string."
      ["parameters"]=>
      array(3) {
        ["str"]=>
        string(25) "The string being encoded."
        ["to_encoding"]=>
        string(52) "The type of encoding that str is being converted to."
        ["from_encoding"]=>
        string(268) "Is specified by character code names before conversion. It is either
       an array, or a comma separated enumerated list.
       If from_encoding is not specified, the internal 
       encoding will be used.
       
      
      
      See supported
      encodings."
      }
      ["flatparameters"]=>
      string(31) "str, to_encoding, from_encoding"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [3]=>
    array(13) {
      ["name"]=>
      string(15) "mb_convert_kana"
      ["summary"]=>
      string(65) "Convert "kana" one from another ("zen-kaku", "han-kaku" and more)"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(111) "string mb_convert_kana ( string $str [, string $option = "KV" [, string $encoding = mb_internal_encoding() ]] )"
      ["anonsig"]=>
      string(102) "string ?????? ( string $str [, string $option = "KV" [, string $encoding = mb_internal_encoding() ]] )"
      ["description"]=>
      string(108) "Performs a "han-kaku" - "zen-kaku" conversion for string str. 
   This function is only useful for Japanese."
      ["return"]=>
      string(21) "The converted string."
      ["parameters"]=>
      array(3) {
        ["str"]=>
        string(27) "The string being converted."
        ["option"]=>
        string(1802) "The conversion option.
      
      
       Specify with a combination of following options.
       Applicable Conversion Options
        
         Option
           Meaning
          r
           
            Convert "zen-kaku" alphabets to "han-kaku"
           
          R
           
            Convert "han-kaku" alphabets to "zen-kaku"
           
          n
           
            Convert "zen-kaku" numbers to "han-kaku"
           
          N
           
            Convert "han-kaku" numbers to "zen-kaku"
           
          a
           
            Convert "zen-kaku" alphabets and numbers to "han-kaku"
           
          A
           
            Convert "han-kaku" alphabets and numbers to "zen-kaku"
            (Characters included in "a", "A" options are
            U+0021 - U+007E excluding U+0022, U+0027, U+005C, U+007E)
           
          s
           
            Convert "zen-kaku" space to "han-kaku" (U+3000 -> U+0020)
           
          S
           
            Convert "han-kaku" space to "zen-kaku" (U+0020 -> U+3000)
           
          k
           
            Convert "zen-kaku kata-kana" to "han-kaku kata-kana"
           
          K
           
            Convert "han-kaku kata-kana" to "zen-kaku kata-kana"
           
          h
           
            Convert "zen-kaku hira-gana" to "han-kaku kata-kana"
           
          H
           
            Convert "han-kaku kata-kana" to "zen-kaku hira-gana"
           
          c
           
           Convert "zen-kaku kata-kana" to "zen-kaku hira-gana"
           
          C
           
            Convert "zen-kaku hira-gana" to "zen-kaku kata-kana"
           
          V
           
            Collapse voiced sound notation and convert them into a character. Use with "K","H""
        ["encoding"]=>
        string(119) "The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used."
      }
      ["flatparameters"]=>
      string(21) "str, option, encoding"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [4]=>
    array(13) {
      ["name"]=>
      string(20) "mb_convert_variables"
      ["summary"]=>
      string(37) "Convert character code in variable(s)"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(106) "string mb_convert_variables ( string $to_encoding , mixed $from_encoding , mixed &$vars [, mixed &$... ] )"
      ["anonsig"]=>
      string(92) "string ?????? ( string $to_encoding , mixed $from_encoding , mixed &$vars [, mixed &$... ] )"
      ["description"]=>
      string(320) "Converts 
   character encoding of variables vars in
   encoding from_encoding to encoding 
   to_encoding.
mb_convert_variables() join strings in Array
   or Object to detect encoding, since encoding detection tends to
   fail for short strings. Therefore, it is impossible to mix
   encoding in single array or object."
      ["return"]=>
      string(79) "The character encoding before conversion for success, 
   or FALSE for failure."
      ["parameters"]=>
      array(4) {
        ["to_encoding"]=>
        string(51) "The encoding that the string is being converted to."
        ["from_encoding"]=>
        string(187) "from_encoding is specified as an array 
       or comma separated string, it tries to detect encoding from
       from-coding. When from_encoding 
       is omitted, detect_order is used."
        ["vars"]=>
        string(184) "vars is the reference to the
       variable being converted. String, Array and Object are accepted.
       mb_convert_variables() assumes all parameters
       have the same encoding."
        ["..."]=>
        string(16) "Additional vars."
      }
      ["flatparameters"]=>
      string(37) "to_encoding, from_encoding, vars, ..."
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [5]=>
    array(13) {
      ["name"]=>
      string(20) "mb_decode_mimeheader"
      ["summary"]=>
      string(34) "Decode string in MIME header field"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(43) "string mb_decode_mimeheader ( string $str )"
      ["anonsig"]=>
      string(29) "string ?????? ( string $str )"
      ["description"]=>
      string(47) "Decodes encoded-word string str in MIME header."
      ["return"]=>
      string(50) "The decoded string in internal character encoding."
      ["parameters"]=>
      array(1) {
        ["str"]=>
        string(25) "The string being decoded."
      }
      ["flatparameters"]=>
      string(3) "str"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [6]=>
    array(13) {
      ["name"]=>
      string(23) "mb_decode_numericentity"
      ["summary"]=>
      string(49) "Decode HTML numeric string reference to character"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(110) "string mb_decode_numericentity ( string $str , array $convmap [, string $encoding = mb_internal_encoding() ] )"
      ["anonsig"]=>
      string(93) "string ?????? ( string $str , array $convmap [, string $encoding = mb_internal_encoding() ] )"
      ["description"]=>
      string(84) "Convert numeric string reference of string
   str in a specified block to character."
      ["return"]=>
      string(21) "The converted string."
      ["parameters"]=>
      array(3) {
        ["str"]=>
        string(25) "The string being decoded."
        ["convmap"]=>
        string(68) "convmap is an array that specifies 
       the code area to convert."
        ["encoding"]=>
        string(119) "The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used."
      }
      ["flatparameters"]=>
      string(22) "str, convmap, encoding"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [7]=>
    array(13) {
      ["name"]=>
      string(18) "mb_detect_encoding"
      ["summary"]=>
      string(25) "Detect character encoding"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(112) "string mb_detect_encoding ( string $str [, mixed $encoding_list = mb_detect_order() [, bool $strict = false ]] )"
      ["anonsig"]=>
      string(100) "string ?????? ( string $str [, mixed $encoding_list = mb_detect_order() [, bool $strict = false ]] )"
      ["description"]=>
      string(41) "Detects character encoding in string str."
      ["return"]=>
      string(101) "The detected character encoding or FALSE if the encoding cannot be
   detected from the given string."
      ["parameters"]=>
      array(3) {
        ["str"]=>
        string(26) "The string being detected."
        ["encoding_list"]=>
        string(210) "encoding_list is list of character
       encoding. Encoding order may be specified by array or comma
       separated list string.
      
      
       If encoding_list is omitted,
       detect_order is used."
        ["strict"]=>
        string(101) "strict specifies whether to use
       the strict encoding detection or not.
       Default is FALSE."
      }
      ["flatparameters"]=>
      string(26) "str, encoding_list, strict"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [8]=>
    array(13) {
      ["name"]=>
      string(15) "mb_detect_order"
      ["summary"]=>
      string(42) "Set/Get character encoding detection order"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(69) "mixed mb_detect_order ([ mixed $encoding_list = mb_detect_order() ] )"
      ["anonsig"]=>
      string(60) "mixed ?????? ([ mixed $encoding_list = mb_detect_order() ] )"
      ["description"]=>
      string(74) "Sets the automatic character
   encoding detection order to encoding_list."
      ["return"]=>
      string(181) "When setting the encoding detection order, TRUE is returned on success or FALSE on failure.
When getting the encoding detection order, an ordered array of the encodings is returned."
      ["parameters"]=>
      array(1) {
        ["encoding_list"]=>
        string(835) "encoding_list is an array or 
       comma separated list of character encoding. See supported encodings.
      
      
       If encoding_list is omitted, it returns
       the current character encoding detection order as array.
      
      
       This setting affects mb_detect_encoding() and
       mb_send_mail().
      
      
       mbstring currently implements the following
       encoding detection filters. If there is an invalid byte sequence
       for the following encodings, encoding detection will fail.
      
      
       UTF-8, UTF-7,
       ASCII,
       EUC-JP,SJIS,
       eucJP-win, SJIS-win,
       JIS, ISO-2022-JP 
      
      
       For ISO-8859-*, mbstring
       always detects as ISO-8859-*.
      
      
       For UTF-16, UTF-32,
       UCS2 and UCS4, encoding
       detection will fail always."
      }
      ["flatparameters"]=>
      string(13) "encoding_list"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [9]=>
    array(13) {
      ["name"]=>
      string(20) "mb_encode_mimeheader"
      ["summary"]=>
      string(29) "Encode string for MIME header"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(180) "string mb_encode_mimeheader ( string $str [, string $charset = determined by mb_language() [, string $transfer_encoding = "B" [, string $linefeed = "\r\n" [, int $indent = 0 ]]]] )"
      ["anonsig"]=>
      string(166) "string ?????? ( string $str [, string $charset = determined by mb_language() [, string $transfer_encoding = "B" [, string $linefeed = "\r\n" [, int $indent = 0 ]]]] )"
      ["description"]=>
      string(65) "Encodes a given string
   str by the MIME header encoding scheme."
      ["return"]=>
      string(55) "A converted version of the string represented in ASCII."
      ["parameters"]=>
      array(5) {
        ["str"]=>
        string(87) "The string being encoded.
       Its encoding should be same as mb_internal_encoding()."
        ["charset"]=>
        string(173) "charset specifies the name of the character set
       in which str is represented in. The default value
       is determined by the current NLS setting (mbstring.language)."
        ["transfer_encoding"]=>
        string(169) "transfer_encoding specifies the scheme of MIME
       encoding. It should be either "B" (Base64) or
       "Q" (Quoted-Printable). Falls back to
       "B" if not given."
        ["linefeed"]=>
        string(328) "linefeed specifies the EOL (end-of-line) marker
       with which mb_encode_mimeheader() performs
       line-folding (a » RFC term,
       the act of breaking a line longer than a certain length into multiple
       lines. The length is currently hard-coded to 74 characters).
       Falls back to "\r\n" (CRLF) if not given."
        ["indent"]=>
        string(85) "Indentation of the first line (number of characters in the header
       before str)."
      }
      ["flatparameters"]=>
      string(49) "str, charset, transfer_encoding, linefeed, indent"
      ["notes"]=>
      string(205) "Note: 
   
    This function isn't designed to break lines at higher-level
    contextual break points (word boundaries, etc.).
    This behaviour may clutter up the original string with unexpected spaces."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [10]=>
    array(13) {
      ["name"]=>
      string(23) "mb_encode_numericentity"
      ["summary"]=>
      string(49) "Encode character to HTML numeric string reference"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(135) "string mb_encode_numericentity ( string $str , array $convmap [, string $encoding = mb_internal_encoding() [, bool $is_hex = FALSE ]] )"
      ["anonsig"]=>
      string(118) "string ?????? ( string $str , array $convmap [, string $encoding = mb_internal_encoding() [, bool $is_hex = FALSE ]] )"
      ["description"]=>
      string(111) "Converts
   specified character codes in string str
   from character code to HTML numeric character reference."
      ["return"]=>
      string(21) "The converted string."
      ["parameters"]=>
      array(4) {
        ["str"]=>
        string(25) "The string being encoded."
        ["convmap"]=>
        string(55) "convmap is array specifies code area to
       convert."
        ["encoding"]=>
        string(119) "The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used."
        ["is_hex"]=>
        string(0) ""
      }
      ["flatparameters"]=>
      string(30) "str, convmap, encoding, is_hex"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.4.0"]=>
        string(23) "Added is_hex parameter."
      }
    }
    [11]=>
    array(13) {
      ["name"]=>
      string(19) "mb_encoding_aliases"
      ["summary"]=>
      string(36) "Get aliases of a known encoding type"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.3.0, PHP 7)"
      ["signature"]=>
      string(46) "array mb_encoding_aliases ( string $encoding )"
      ["anonsig"]=>
      string(33) "array ?????? ( string $encoding )"
      ["description"]=>
      string(54) "Returns an array of aliases for a known encoding type."
      ["return"]=>
      string(91) "Returns a numerically indexed array of encoding aliases on success,
    or FALSE on failure"
      ["parameters"]=>
      array(1) {
        ["encoding"]=>
        string(45) "The encoding type being checked, for aliases."
      }
      ["flatparameters"]=>
      string(8) "encoding"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [12]=>
    array(13) {
      ["name"]=>
      string(13) "mb_ereg_match"
      ["summary"]=>
      string(45) "Regular expression match for multibyte string"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.2.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(83) "bool mb_ereg_match ( string $pattern , string $string [, string $option = "msr" ] )"
      ["anonsig"]=>
      string(76) "bool ?????? ( string $pattern , string $string [, string $option = "msr" ] )"
      ["description"]=>
      string(49) "A regular expression match for a multibyte string"
      ["return"]=>
      string(82) "Returns TRUE if
   string matches the regular expression
   pattern, FALSE if not."
      ["parameters"]=>
      array(3) {
        ["pattern"]=>
        string(31) "The regular expression pattern."
        ["string"]=>
        string(27) "The string being evaluated."
        ["option"]=>
        string(0) ""
      }
      ["flatparameters"]=>
      string(23) "pattern, string, option"
      ["notes"]=>
      string(144) "Note: The internal encoding or the
character encoding specified by mb_regex_encoding()
will be used as the character encoding for this function."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [13]=>
    array(13) {
      ["name"]=>
      string(24) "mb_ereg_replace_callback"
      ["summary"]=>
      string(87) "Perform a regular expresssion seach and replace with multibyte support using a callback"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.4.1, PHP 7)"
      ["signature"]=>
      string(117) "string mb_ereg_replace_callback ( string $pattern , callable $callback , string $string [, string $option = "msr" ] )"
      ["anonsig"]=>
      string(99) "string ?????? ( string $pattern , callable $callback , string $string [, string $option = "msr" ] )"
      ["description"]=>
      string(286) "Scans string for matches to
   pattern, then replaces the matched text
   with the output of callback function.
The behavior of this function is almost identical to mb_ereg_replace(), 
    except for the fact that instead of
    replacement parameter, one should specify a
    callback."
      ["return"]=>
      string(51) "The resultant string on success, or FALSE on error."
      ["parameters"]=>
      array(4) {
        ["pattern"]=>
        string(97) "The regular expression pattern.
      
      
       Multibyte characters may be used in pattern."
        ["callback"]=>
        string(626) "A callback that will be called and passed an array of matched elements
        in the  subject string. The callback should
       return the replacement string.
      
      
        You'll often need the callback function
        for a mb_ereg_replace_callback() in just one place.
        In this case you can use an
        anonymous function to
        declare the callback within the call to
        mb_ereg_replace_callback(). By doing it this way
        you have all information for the call in one place and do not
        clutter the function namespace with a callback function's name
        not used anywhere else."
        ["string"]=>
        string(25) "The string being checked."
        ["option"]=>
        string(486) "Matching condition can be set by option
       parameter. If i is specified for this
       parameter, the case will be ignored. If x is
       specified, white space will be ignored. If m
       is specified, match will be executed in multiline mode and line
       break will be included in '.'. If p is
       specified, match will be executed in POSIX mode, line break 
       will be considered as normal character. Note that e
       cannot be used for mb_ereg_replace_callback()."
      }
      ["flatparameters"]=>
      string(33) "pattern, callback, string, option"
      ["notes"]=>
      string(144) "Note: The internal encoding or the
character encoding specified by mb_regex_encoding()
will be used as the character encoding for this function."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [14]=>
    array(13) {
      ["name"]=>
      string(15) "mb_ereg_replace"
      ["summary"]=>
      string(49) "Replace regular expression with multibyte support"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.2.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(109) "string mb_ereg_replace ( string $pattern , string $replacement , string $string [, string $option = "msr" ] )"
      ["anonsig"]=>
      string(100) "string ?????? ( string $pattern , string $replacement , string $string [, string $option = "msr" ] )"
      ["description"]=>
      string(90) "Scans string for matches to
   pattern, then replaces the matched text
   with replacement"
      ["return"]=>
      string(51) "The resultant string on success, or FALSE on error."
      ["parameters"]=>
      array(4) {
        ["pattern"]=>
        string(97) "The regular expression pattern.
      
      
       Multibyte characters may be used in pattern."
        ["replacement"]=>
        string(21) "The replacement text."
        ["string"]=>
        string(25) "The string being checked."
        ["option"]=>
        string(509) "Matching condition can be set by option
       parameter. If i is specified for this
       parameter, the case will be ignored. If x is
       specified, white space will be ignored. If m
       is specified, match will be executed in multiline mode and line
       break will be included in '.'. If p is
       specified, match will be executed in POSIX mode, line break 
       will be considered as normal character. If e
       is specified, replacement string will be
       evaluated as PHP expression."
      }
      ["flatparameters"]=>
      string(36) "pattern, replacement, string, option"
      ["notes"]=>
      string(144) "Note: The internal encoding or the
character encoding specified by mb_regex_encoding()
will be used as the character encoding for this function."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(237) "WarningNever use the e modifier when working on untrusted input. No automatic escaping will happen (as known from preg_replace()). Not taking care of this will most likely create remote code execution vulnerabilities in your application."
      ["changelog"]=>
      array(1) {
        ["7.1.0"]=>
        string(35) "The e modifier has been deprecated."
      }
    }
    [15]=>
    array(13) {
      ["name"]=>
      string(21) "mb_ereg_search_getpos"
      ["summary"]=>
      string(53) "Returns start point for next regular expression match"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.2.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(34) "int mb_ereg_search_getpos ( void )"
      ["anonsig"]=>
      string(19) "int ?????? ( void )"
      ["description"]=>
      string(62) "Returns the start point for the next regular expression match."
      ["return"]=>
      string(219) "mb_ereg_search_getpos() returns
   the point to start regular expression match for
   mb_ereg_search(),
   mb_ereg_search_pos(),
   mb_ereg_search_regs(). The position is
   represented by bytes from the head of string."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(144) "Note: The internal encoding or the
character encoding specified by mb_regex_encoding()
will be used as the character encoding for this function."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [16]=>
    array(13) {
      ["name"]=>
      string(22) "mb_ereg_search_getregs"
      ["summary"]=>
      string(68) "Retrieve the result from the last multibyte regular expression match"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.2.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(37) "array mb_ereg_search_getregs ( void )"
      ["anonsig"]=>
      string(21) "array ?????? ( void )"
      ["description"]=>
      string(68) "Retrieve the result from the last multibyte regular expression match"
      ["return"]=>
      string(396) "An array
   including the sub-string of matched part by last
   mb_ereg_search(),
   mb_ereg_search_pos(),
   mb_ereg_search_regs(). If there are some
   matches, the first element will have the matched sub-string, the
   second element will have the first part grouped with brackets, 
   the third element will have the second part grouped with
   brackets, and so on. It returns FALSE on error;"
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(144) "Note: The internal encoding or the
character encoding specified by mb_regex_encoding()
will be used as the character encoding for this function."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [17]=>
    array(13) {
      ["name"]=>
      string(19) "mb_ereg_search_init"
      ["summary"]=>
      string(76) "Setup string and regular expression for a multibyte regular expression match"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.2.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(91) "bool mb_ereg_search_init ( string $string [, string $pattern [, string $option = "msr" ]] )"
      ["anonsig"]=>
      string(78) "bool ?????? ( string $string [, string $pattern [, string $option = "msr" ]] )"
      ["description"]=>
      string(189) "mb_ereg_search_init() sets
   string and pattern
   for a multibyte regular expression. These values are used for
   mb_ereg_search(),
   mb_ereg_search_pos(), and
   mb_ereg_search_regs()."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(3) {
        ["string"]=>
        string(18) "The search string."
        ["pattern"]=>
        string(19) "The search pattern."
        ["option"]=>
        string(18) "The search option."
      }
      ["flatparameters"]=>
      string(23) "string, pattern, option"
      ["notes"]=>
      string(144) "Note: The internal encoding or the
character encoding specified by mb_regex_encoding()
will be used as the character encoding for this function."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [18]=>
    array(13) {
      ["name"]=>
      string(18) "mb_ereg_search_pos"
      ["summary"]=>
      string(115) "Returns position and length of a matched part of the multibyte regular expression for a predefined multibyte string"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.2.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(73) "array mb_ereg_search_pos ([ string $pattern [, string $option = "ms" ]] )"
      ["anonsig"]=>
      string(61) "array ?????? ([ string $pattern [, string $option = "ms" ]] )"
      ["description"]=>
      string(240) "Returns position and length of a matched part of the multibyte regular expression 
   for a predefined multibyte string
The string for match is specified by
   mb_ereg_search_init(). If it is not specified,
   the previous one will be used."
      ["return"]=>
      string(248) "An array containing two elements. The first element is the
   offset, in bytes, where the match begins relative to the start of the
   search string, and the second element is the length in bytes of the match.
If an error occurs, FALSE is returned."
      ["parameters"]=>
      array(2) {
        ["pattern"]=>
        string(19) "The search pattern."
        ["option"]=>
        string(18) "The search option."
      }
      ["flatparameters"]=>
      string(15) "pattern, option"
      ["notes"]=>
      string(144) "Note: The internal encoding or the
character encoding specified by mb_regex_encoding()
will be used as the character encoding for this function."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [19]=>
    array(13) {
      ["name"]=>
      string(19) "mb_ereg_search_regs"
      ["summary"]=>
      string(58) "Returns the matched part of a multibyte regular expression"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.2.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(74) "array mb_ereg_search_regs ([ string $pattern [, string $option = "ms" ]] )"
      ["anonsig"]=>
      string(61) "array ?????? ([ string $pattern [, string $option = "ms" ]] )"
      ["description"]=>
      string(59) "Returns the matched part of a multibyte regular expression."
      ["return"]=>
      string(332) "mb_ereg_search_regs() executes the multibyte
   regular expression match, and if there are some matched part, it
   returns an array including substring of matched part as first
   element, the first grouped part with brackets as second element,
   the second grouped part as third element, and so on. 
   It returns FALSE on error."
      ["parameters"]=>
      array(2) {
        ["pattern"]=>
        string(19) "The search pattern."
        ["option"]=>
        string(18) "The search option."
      }
      ["flatparameters"]=>
      string(15) "pattern, option"
      ["notes"]=>
      string(144) "Note: The internal encoding or the
character encoding specified by mb_regex_encoding()
will be used as the character encoding for this function."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [20]=>
    array(13) {
      ["name"]=>
      string(21) "mb_ereg_search_setpos"
      ["summary"]=>
      string(48) "Set start point of next regular expression match"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.2.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(44) "bool mb_ereg_search_setpos ( int $position )"
      ["anonsig"]=>
      string(29) "bool ?????? ( int $position )"
      ["description"]=>
      string(83) "mb_ereg_search_setpos() sets the starting
   point of a match for mb_ereg_search()."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(1) {
        ["position"]=>
        string(77) "The position to set. If it is negative, it counts from the end of the string."
      }
      ["flatparameters"]=>
      string(8) "position"
      ["notes"]=>
      string(144) "Note: The internal encoding or the
character encoding specified by mb_regex_encoding()
will be used as the character encoding for this function."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["7.1.0"]=>
        string(46) "Support for negative positions has been added."
      }
    }
    [21]=>
    array(13) {
      ["name"]=>
      string(14) "mb_ereg_search"
      ["summary"]=>
      string(66) "Multibyte regular expression match for predefined multibyte string"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.2.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(68) "bool mb_ereg_search ([ string $pattern [, string $option = "ms" ]] )"
      ["anonsig"]=>
      string(60) "bool ?????? ([ string $pattern [, string $option = "ms" ]] )"
      ["description"]=>
      string(80) "Performs a multibyte regular expression match for a predefined multibyte string."
      ["return"]=>
      string(238) "mb_ereg_search() returns TRUE if the
   multibyte string matches with the regular expression, or FALSE
   otherwise. The string for matching is set by 
   mb_ereg_search_init(). If
   pattern is not specified, the previous one
   is used."
      ["parameters"]=>
      array(2) {
        ["pattern"]=>
        string(19) "The search pattern."
        ["option"]=>
        string(18) "The search option."
      }
      ["flatparameters"]=>
      string(15) "pattern, option"
      ["notes"]=>
      string(144) "Note: The internal encoding or the
character encoding specified by mb_regex_encoding()
will be used as the character encoding for this function."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [22]=>
    array(13) {
      ["name"]=>
      string(7) "mb_ereg"
      ["summary"]=>
      string(47) "Regular expression match with multibyte support"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.2.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(66) "int mb_ereg ( string $pattern , string $string [, array &$regs ] )"
      ["anonsig"]=>
      string(65) "int ?????? ( string $pattern , string $string [, array &$regs ] )"
      ["description"]=>
      string(61) "Executes the regular expression match with multibyte support."
      ["return"]=>
      string(267) "Returns the byte length of the matched string if a match for
   pattern was found in string,
   or FALSE if no matches were found or an error occurred.
If the optional parameter regs was not passed or
   the length of the matched string is 0, this function returns 1."
      ["parameters"]=>
      array(3) {
        ["pattern"]=>
        string(19) "The search pattern."
        ["string"]=>
        string(18) "The search string."
        ["regs"]=>
        string(531) "If matches are found for parenthesized substrings of
       pattern and the function is called with the
       third argument regs, the matches will be stored
       in the elements of the array regs.
       If no matches are found, regs is set to an empty
       array.
      
      
       $regs[1] will contain the substring which starts at
       the first left parenthesis; $regs[2] will contain
       the substring starting at the second, and so on.
       $regs[0] will contain a copy of the complete string
       matched."
      }
      ["flatparameters"]=>
      string(21) "pattern, string, regs"
      ["notes"]=>
      string(144) "Note: The internal encoding or the
character encoding specified by mb_regex_encoding()
will be used as the character encoding for this function."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["7.1.0"]=>
        string(126) "mb_ereg() will now set regs to
       an empty array, if nothing matched. Formerly,
       regs was not modified in that case."
      }
    }
    [23]=>
    array(13) {
      ["name"]=>
      string(16) "mb_eregi_replace"
      ["summary"]=>
      string(63) "Replace regular expression with multibyte support ignoring case"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.2.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(107) "string mb_eregi_replace ( string $pattern , string $replace , string $string [, string $option = "msri" ] )"
      ["anonsig"]=>
      string(97) "string ?????? ( string $pattern , string $replace , string $string [, string $option = "msri" ] )"
      ["description"]=>
      string(91) "Scans string for matches to
   pattern, then replaces the matched text
   with replacement."
      ["return"]=>
      string(39) "The resultant string or FALSE on error."
      ["parameters"]=>
      array(4) {
        ["pattern"]=>
        string(92) "The regular expression pattern.  Multibyte characters may be used. The case will be ignored."
        ["replace"]=>
        string(21) "The replacement text."
        ["string"]=>
        string(20) "The searched string."
        ["option"]=>
        string(59) "option has the same meaning as in
       mb_ereg_replace()."
      }
      ["flatparameters"]=>
      string(32) "pattern, replace, string, option"
      ["notes"]=>
      string(144) "Note: The internal encoding or the
character encoding specified by mb_regex_encoding()
will be used as the character encoding for this function."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(237) "WarningNever use the e modifier when working on untrusted input. No automatic escaping will happen (as known from preg_replace()). Not taking care of this will most likely create remote code execution vulnerabilities in your application."
      ["changelog"]=>
      array(1) {
        ["7.1.0"]=>
        string(35) "The e modifier has been deprecated."
      }
    }
    [24]=>
    array(13) {
      ["name"]=>
      string(8) "mb_eregi"
      ["summary"]=>
      string(61) "Regular expression match ignoring case with multibyte support"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.2.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(67) "int mb_eregi ( string $pattern , string $string [, array &$regs ] )"
      ["anonsig"]=>
      string(65) "int ?????? ( string $pattern , string $string [, array &$regs ] )"
      ["description"]=>
      string(78) "Executes the case insensitive regular expression match with multibyte support."
      ["return"]=>
      string(267) "Returns the byte length of the matched string if a match for
   pattern was found in string,
   or FALSE if no matches were found or an error occurred.
If the optional parameter regs was not passed or
   the length of the matched string is 0, this function returns 1."
      ["parameters"]=>
      array(3) {
        ["pattern"]=>
        string(31) "The regular expression pattern."
        ["string"]=>
        string(26) "The string being searched."
        ["regs"]=>
        string(531) "If matches are found for parenthesized substrings of
       pattern and the function is called with the
       third argument regs, the matches will be stored
       in the elements of the array regs.
       If no matches are found, regs is set to an empty
       array.
      
      
       $regs[1] will contain the substring which starts at
       the first left parenthesis; $regs[2] will contain
       the substring starting at the second, and so on.
       $regs[0] will contain a copy of the complete string
       matched."
      }
      ["flatparameters"]=>
      string(21) "pattern, string, regs"
      ["notes"]=>
      string(144) "Note: The internal encoding or the
character encoding specified by mb_regex_encoding()
will be used as the character encoding for this function."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["7.1.0"]=>
        string(127) "mb_eregi() will now set regs to
       an empty array, if nothing matched. Formerly,
       regs was not modified in that case."
      }
    }
    [25]=>
    array(13) {
      ["name"]=>
      string(11) "mb_get_info"
      ["summary"]=>
      string(33) "Get internal settings of mbstring"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.2.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(45) "mixed mb_get_info ([ string $type = "all" ] )"
      ["anonsig"]=>
      string(40) "mixed ?????? ([ string $type = "all" ] )"
      ["description"]=>
      string(66) "mb_get_info() returns the internal setting parameters of mbstring."
      ["return"]=>
      string(85) "An array of type information if type 
   is not specified, otherwise a specific type."
      ["parameters"]=>
      array(1) {
        ["type"]=>
        string(422) "If type isn't specified or is specified to
       "all", an array having the elements "internal_encoding",
       "http_output", "http_input", "func_overload", "mail_charset",
       "mail_header_encoding", "mail_body_encoding" will be returned. 
      
      
       If type is specified as "http_output",
       "http_input", "internal_encoding", "func_overload",
       the specified setting parameter will be returned."
      }
      ["flatparameters"]=>
      string(4) "type"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(2) {
        ["5.1.3"]=>
        string(106) "The entries "mail_charset", "mail_header_encoding", and 
        "mail_body_encoding" were made available."
        ["5.3.0"]=>
        string(58) "The entry "http_output_conv_mimetypes" was made available."
      }
    }
    [26]=>
    array(13) {
      ["name"]=>
      string(13) "mb_http_input"
      ["summary"]=>
      string(36) "Detect HTTP input character encoding"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(44) "mixed mb_http_input ([ string $type = "" ] )"
      ["anonsig"]=>
      string(37) "mixed ?????? ([ string $type = "" ] )"
      ["description"]=>
      string(42) "Detects the HTTP input character encoding."
      ["return"]=>
      string(127) "The character encoding name, as per the type.
   If mb_http_input() does not process specified
   HTTP input, it returns FALSE."
      ["parameters"]=>
      array(1) {
        ["type"]=>
        string(244) "Input string specifies the input type. 
       "G" for GET, "P" for POST, "C" for COOKIE, "S" for string, "L" for list, and
       "I" for the whole list (will return array). 
       If type is omitted, it returns the last input type processed."
      }
      ["flatparameters"]=>
      string(4) "type"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [27]=>
    array(13) {
      ["name"]=>
      string(14) "mb_http_output"
      ["summary"]=>
      string(38) "Set/Get HTTP output character encoding"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(63) "mixed mb_http_output ([ string $encoding = mb_http_output() ] )"
      ["anonsig"]=>
      string(55) "mixed ?????? ([ string $encoding = mb_http_output() ] )"
      ["description"]=>
      string(145) "Set/Get the HTTP output character encoding.
   Output after this function is called will be converted from the set internal encoding to encoding."
      ["return"]=>
      string(158) "If encoding is omitted,
   mb_http_output() returns the current HTTP output
   character encoding. Otherwise, 
   Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(1) {
        ["encoding"]=>
        string(231) "If encoding is set,
       mb_http_output() sets the HTTP output character
       encoding to encoding.
      
      
       If encoding is omitted,
       mb_http_output() returns the current HTTP output
       character encoding."
      }
      ["flatparameters"]=>
      string(8) "encoding"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [28]=>
    array(13) {
      ["name"]=>
      string(20) "mb_internal_encoding"
      ["summary"]=>
      string(35) "Set/Get internal character encoding"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(75) "mixed mb_internal_encoding ([ string $encoding = mb_internal_encoding() ] )"
      ["anonsig"]=>
      string(61) "mixed ?????? ([ string $encoding = mb_internal_encoding() ] )"
      ["description"]=>
      string(39) "Set/Get the internal character encoding"
      ["return"]=>
      string(234) "If encoding is set, then 
   Returns TRUE on success or FALSE on failure.
   In this case, the character encoding for multibyte regex is NOT changed.
   If encoding is omitted, then 
   the current character encoding name is returned."
      ["parameters"]=>
      array(1) {
        ["encoding"]=>
        string(356) "encoding is the character encoding name 
       used for the HTTP input character encoding conversion, HTTP output 
       character encoding conversion, and the default character encoding 
       for string functions defined by the mbstring module.
       You should notice that the internal encoding is totally different from the one for multibyte regex."
      }
      ["flatparameters"]=>
      string(8) "encoding"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [29]=>
    array(13) {
      ["name"]=>
      string(11) "mb_language"
      ["summary"]=>
      string(24) "Set/Get current language"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(57) "mixed mb_language ([ string $language = mb_language() ] )"
      ["anonsig"]=>
      string(52) "mixed ?????? ([ string $language = mb_language() ] )"
      ["description"]=>
      string(29) "Set/Get the current language."
      ["return"]=>
      string(228) "If language is set and
   language is valid, it returns
   TRUE. Otherwise, it returns FALSE. 
   When language is omitted, it returns the language
   name as a string. If no language is set previously, it then returns
   FALSE."
      ["parameters"]=>
      array(1) {
        ["language"]=>
        string(344) "Used for encoding
       e-mail messages. Valid languages are "Japanese",
       "ja","English","en" and "uni"
       (UTF-8). mb_send_mail() uses this setting to
       encode e-mail.
      
       
       Language and its setting is ISO-2022-JP/Base64 for
       Japanese, UTF-8/Base64 for uni, ISO-8859-1/quoted printable for
       English."
      }
      ["flatparameters"]=>
      string(8) "language"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [30]=>
    array(13) {
      ["name"]=>
      string(17) "mb_list_encodings"
      ["summary"]=>
      string(43) "Returns an array of all supported encodings"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(32) "array mb_list_encodings ( void )"
      ["anonsig"]=>
      string(21) "array ?????? ( void )"
      ["description"]=>
      string(52) "Returns an array containing all supported encodings."
      ["return"]=>
      string(36) "Returns a numerically indexed array."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [31]=>
    array(13) {
      ["name"]=>
      string(17) "mb_output_handler"
      ["summary"]=>
      string(62) "Callback function converts character encoding in output buffer"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(59) "string mb_output_handler ( string $contents , int $status )"
      ["anonsig"]=>
      string(48) "string ?????? ( string $contents , int $status )"
      ["description"]=>
      string(193) "mb_output_handler() is
   ob_start() callback
   function. mb_output_handler() converts
   characters in the output buffer from internal character encoding to
   HTTP output character encoding."
      ["return"]=>
      string(21) "The converted string."
      ["parameters"]=>
      array(2) {
        ["contents"]=>
        string(34) "The contents of the output buffer."
        ["status"]=>
        string(32) "The status of the output buffer."
      }
      ["flatparameters"]=>
      string(16) "contents, status"
      ["notes"]=>
      string(433) "Note: 
   
    If you want to output binary data, such as an image,
    a Content-Type: header must be set using header() 
    before any binary data is sent to the client (e.g. header("Content-Type: image/png")).
    If Content-Type: header is sent, output character encoding conversion will not be performed.
   
   
    Note that if 'Content-Type: text/*' is sent, the content body is regarded as text; conversion will take place."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["4.1.0"]=>
        string(415) "This handler now adds the charset HTTP header when the following conditions are met:
        
        
         
           
            Content-Type has not been set, using header().
           
          
          
           
            The default MIME type begins with text/.
           
          
          
           
            The mbstring.http_input 
            setting is something other than pass."
      }
    }
    [32]=>
    array(13) {
      ["name"]=>
      string(12) "mb_parse_str"
      ["summary"]=>
      string(50) "Parse GET/POST/COOKIE data and set global variable"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(64) "bool mb_parse_str ( string $encoded_string [, array &$result ] )"
      ["anonsig"]=>
      string(58) "bool ?????? ( string $encoded_string [, array &$result ] )"
      ["description"]=>
      string(299) "Parses GET/POST/COOKIE data and
   sets global variables. Since PHP does not provide raw POST/COOKIE
   data, it can only be used for GET data for now. It parses URL
   encoded data, detects encoding, converts coding to internal
   encoding and set values to the result array or
   global variables."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(2) {
        ["encoded_string"]=>
        string(21) "The URL encoded data."
        ["result"]=>
        string(67) "An array containing decoded and character encoded converted values."
      }
      ["flatparameters"]=>
      string(22) "encoded_string, result"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [33]=>
    array(13) {
      ["name"]=>
      string(22) "mb_preferred_mime_name"
      ["summary"]=>
      string(23) "Get MIME charset string"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(50) "string mb_preferred_mime_name ( string $encoding )"
      ["anonsig"]=>
      string(34) "string ?????? ( string $encoding )"
      ["description"]=>
      string(50) "Get a MIME charset string for a specific encoding."
      ["return"]=>
      string(59) "The MIME charset string for character encoding
   encoding."
      ["parameters"]=>
      array(1) {
        ["encoding"]=>
        string(27) "The encoding being checked."
      }
      ["flatparameters"]=>
      string(8) "encoding"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [34]=>
    array(13) {
      ["name"]=>
      string(17) "mb_regex_encoding"
      ["summary"]=>
      string(46) "Set/Get character encoding for multibyte regex"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.2.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(69) "mixed mb_regex_encoding ([ string $encoding = mb_regex_encoding() ] )"
      ["anonsig"]=>
      string(58) "mixed ?????? ([ string $encoding = mb_regex_encoding() ] )"
      ["description"]=>
      string(49) "Set/Get character encoding for a multibyte regex."
      ["return"]=>
      string(246) "If encoding is set, then 
   Returns TRUE on success or FALSE on failure. 
   In this case, the internal character encoding is NOT changed.
   If encoding is omitted, then 
   the current character encoding name for a multibyte regex is returned."
      ["parameters"]=>
      array(1) {
        ["encoding"]=>
        string(119) "The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used."
      }
      ["flatparameters"]=>
      string(8) "encoding"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.6.0"]=>
        string(63) "Default encoding is changed to UTF-8. It was EUC-JP Previously."
      }
    }
    [35]=>
    array(13) {
      ["name"]=>
      string(20) "mb_regex_set_options"
      ["summary"]=>
      string(49) "Set/Get the default options for mbregex functions"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.3.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(75) "string mb_regex_set_options ([ string $options = mb_regex_set_options() ] )"
      ["anonsig"]=>
      string(61) "string ?????? ([ string $options = mb_regex_set_options() ] )"
      ["description"]=>
      string(80) "Sets the default options described by options 
   for multibyte regex functions."
      ["return"]=>
      string(106) "The previous options. If options is omitted, 
   it returns the string that describes the current options."
      ["parameters"]=>
      array(1) {
        ["options"]=>
        string(984) "The options to set. This is a string where each 
       character is an option. To set a mode, the mode 
       character must be the last one set, however there 
       can only be set one mode but multiple options.
      

      Regex options
       
        Option
          Meaning
         i
          Ambiguity match on
         x
          Enables extended pattern form
         m
          '.' matches with newlines
         s
          '^' -> '\A', '$' -> '\Z'
         p
          Same as both the m and s options
         l
          Finds longest matches
         n
          Ignores empty matches
         e
          eval() resulting code
         Regex syntax modes
       
        Mode
          Meaning
         j
          Java (Sun java.util.regex)
         u
          GNU regex
         g
          grep
         c
          Emacs
         r
          Ruby
         z
          Perl
         b
          POSIX Basic regex
         d
          POSIX Extended regex"
      }
      ["flatparameters"]=>
      string(7) "options"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [36]=>
    array(13) {
      ["name"]=>
      string(12) "mb_send_mail"
      ["summary"]=>
      string(17) "Send encoded mail"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(147) "bool mb_send_mail ( string $to , string $subject , string $message [, string $additional_headers = NULL [, string $additional_parameter = NULL ]] )"
      ["anonsig"]=>
      string(141) "bool ?????? ( string $to , string $subject , string $message [, string $additional_headers = NULL [, string $additional_parameter = NULL ]] )"
      ["description"]=>
      string(173) "Sends email. Headers and messages are converted and encoded according
   to the mb_language() setting. It's a wrapper function
   for mail(), so see also mail() for details."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(5) {
        ["to"]=>
        string(184) "The mail addresses being sent to. Multiple
       recipients may be specified by putting a comma between each
       address in to. 
       This parameter is not automatically encoded."
        ["subject"]=>
        string(24) "The subject of the mail."
        ["message"]=>
        string(24) "The message of the mail."
        ["additional_headers (optional)"]=>
        string(1096) "String to be inserted at the end of the email header.
      
      
       This is typically used to add extra headers (From, Cc, and Bcc).
       Multiple extra headers should be separated with a CRLF (\r\n).
       Validate parameter not to be injected unwanted headers by attackers.
      
      Note: 
       
        When sending mail, the mail must contain
        a From header. This can be set with the 
        additional_headers parameter, or a default
        can be set in php.ini.
       
       
        Failing to do this will result in an error
        message similar to Warning: mail(): "sendmail_from" not
        set in php.ini or custom "From:" header missing.
        The From header sets also
        Return-Path under Windows.
       
      
      Note: 
       
        If messages are not received, try using a LF (\n) only.
        Some Unix mail transfer agents (most notably
        » qmail) replace LF by CRLF
        automatically (which leads to doubling CR if CRLF is used).
        This should be a last resort, as it does not comply with
        » RFC 2822."
        ["additional_parameter"]=>
        string(979) "additional_parameter is a MTA command line
       parameter. It is useful when setting the correct Return-Path
       header when using sendmail.
      
      
       This parameter is escaped by escapeshellcmd() internally
       to prevent command execution. escapeshellcmd() prevents
       command execution, but allows to add addtional parameters. For security reason,
       this parameter should be validated.
      
      
       Since escapeshellcmd() is applied automatically, some characters
       that are allowed as email addresses by internet RFCs cannot be used. Programs
       that are required to use these characters mail() cannot be used.
      
      
       The user that the webserver runs as should be added as a trusted user to the
       sendmail configuration to prevent a 'X-Warning' header from being added
       to the message when the envelope sender (-f) is set using this method.
       For sendmail users, this file is /etc/mail/trusted-users."
      }
      ["flatparameters"]=>
      string(73) "to, subject, message, additional_headers (optional), additional_parameter"
      ["notes"]=>
      string(776) "Note: 
       
        When sending mail, the mail must contain
        a From header. This can be set with the 
        additional_headers parameter, or a default
        can be set in php.ini.
       
       
        Failing to do this will result in an error
        message similar to Warning: mail(): "sendmail_from" not
        set in php.ini or custom "From:" header missing.
        The From header sets also
        Return-Path under Windows.
Note: 
       
        If messages are not received, try using a LF (\n) only.
        Some Unix mail transfer agents (most notably
        » qmail) replace LF by CRLF
        automatically (which leads to doubling CR if CRLF is used).
        This should be a last resort, as it does not comply with
        » RFC 2822."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [37]=>
    array(13) {
      ["name"]=>
      string(8) "mb_split"
      ["summary"]=>
      string(47) "Split multibyte string using regular expression"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.2.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(72) "array mb_split ( string $pattern , string $string [, int $limit = -1 ] )"
      ["anonsig"]=>
      string(70) "array ?????? ( string $pattern , string $string [, int $limit = -1 ] )"
      ["description"]=>
      string(102) "Split a multibyte
   string using regular expression
   pattern and returns the result as an
   array."
      ["return"]=>
      string(23) "The result as an array."
      ["parameters"]=>
      array(3) {
        ["pattern"]=>
        string(31) "The regular expression pattern."
        ["string"]=>
        string(23) "The string being split."
        ["limit"]=>
        string(103) "If optional parameter limit is specified, 
       it will be split in limit elements as
       maximum."
      }
      ["flatparameters"]=>
      string(22) "pattern, string, limit"
      ["notes"]=>
      string(130) "Note: The
character encoding specified by mb_regex_encoding()
will be used as the character encoding for this function by default."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [38]=>
    array(13) {
      ["name"]=>
      string(9) "mb_strcut"
      ["summary"]=>
      string(18) "Get part of string"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(115) "string mb_strcut ( string $str , int $start [, int $length = NULL [, string $encoding = mb_internal_encoding() ]] )"
      ["anonsig"]=>
      string(112) "string ?????? ( string $str , int $start [, int $length = NULL [, string $encoding = mb_internal_encoding() ]] )"
      ["description"]=>
      string(432) "mb_strcut() extracts a substring from a string similarly to
   mb_substr(), but operates on bytes instead of characters. If the
   cut position happens to be between two bytes of a multi-byte character, the cut is
   performed starting from the first byte of that character. This is also the difference
   to the substr() function, which would simply cut the string between
   the bytes and thus result in a malformed byte sequence."
      ["return"]=>
      string(93) "mb_strcut() returns the portion of
   str specified by the
   start and
   length parameters."
      ["parameters"]=>
      array(4) {
        ["str"]=>
        string(21) "The string being cut."
        ["start"]=>
        string(400) "If start is non-negative, the returned string
       will start at the start'th byte position in
       str, counting from zero. For instance,
       in the string 'abcdef', the byte at
       position 0 is 'a', the
       byte at position 2 is
       'c', and so forth.
      
      
       If start is negative, the returned string
       will start at the start'th byte
       from the end of str."
        ["length"]=>
        string(97) "Length in bytes. If omitted or NULL
       is passed, extract all bytes to the end of the string."
        ["encoding"]=>
        string(119) "The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used."
      }
      ["flatparameters"]=>
      string(28) "str, start, length, encoding"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.4.8"]=>
        string(137) "Passing NULL as length
        extracts all bytes to the end of the string. Prior to this version
        NULL was treated the same as 0."
      }
    }
    [39]=>
    array(13) {
      ["name"]=>
      string(13) "mb_strimwidth"
      ["summary"]=>
      string(41) "Get truncated string with specified width"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(137) "string mb_strimwidth ( string $str , int $start , int $width [, string $trimmarker = "" [, string $encoding = mb_internal_encoding() ]] )"
      ["anonsig"]=>
      string(130) "string ?????? ( string $str , int $start , int $width [, string $trimmarker = "" [, string $encoding = mb_internal_encoding() ]] )"
      ["description"]=>
      string(40) "Truncates string str to specified width."
      ["return"]=>
      string(101) "The truncated string. If trimmarker is set,
   trimmarker replaces the last chars to match the width."
      ["parameters"]=>
      array(5) {
        ["str"]=>
        string(25) "The string being decoded."
        ["start"]=>
        string(188) "The start position offset. Number of
       characters from the beginning of string (first character is 0),
       or if start is negative, number of characters from the end of the string."
        ["width"]=>
        string(80) "The width of the desired trim. Negative widths count from the end of the string."
        ["trimmarker"]=>
        string(77) "A string that is added to the end of string 
       when string is truncated."
        ["encoding"]=>
        string(119) "The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used."
      }
      ["flatparameters"]=>
      string(39) "str, start, width, trimmarker, encoding"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["7.1.0"]=>
        string(54) "Support for negative starts and widths has been added."
      }
    }
    [40]=>
    array(13) {
      ["name"]=>
      string(10) "mb_stripos"
      ["summary"]=>
      string(79) "Finds position of first occurrence of a string within another, case insensitive"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.2.0, PHP 7)"
      ["signature"]=>
      string(119) "int mb_stripos ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )"
      ["anonsig"]=>
      string(115) "int ?????? ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )"
      ["description"]=>
      string(211) "mb_stripos() returns the numeric position of
   the first occurrence of needle in the
   haystack string.
   Unlike mb_strpos(), 
   mb_stripos() is case-insensitive.
   If needle is not found, it returns FALSE."
      ["return"]=>
      string(124) "Return the numeric position of the first occurrence of
   needle in the haystack
   string, or FALSE if needle is not found."
      ["parameters"]=>
      array(4) {
        ["haystack"]=>
        string(82) "The string from which to get the position of the first occurrence
       of needle"
        ["needle"]=>
        string(30) "The string to find in haystack"
        ["offset"]=>
        string(111) "The position in haystack
       to start searching.
       A negative offset counts from the end of the string."
        ["encoding"]=>
        string(93) "Character encoding name to use.
       If it is omitted, internal character encoding is used."
      }
      ["flatparameters"]=>
      string(34) "haystack, needle, offset, encoding"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["7.1.0"]=>
        string(44) "Support for negative offsets has been added."
      }
    }
    [41]=>
    array(13) {
      ["name"]=>
      string(10) "mb_stristr"
      ["summary"]=>
      string(67) "Finds first occurrence of a string within another, case insensitive"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.2.0, PHP 7)"
      ["signature"]=>
      string(134) "string mb_stristr ( string $haystack , string $needle [, bool $before_needle = false [, string $encoding = mb_internal_encoding() ]] )"
      ["anonsig"]=>
      string(130) "string ?????? ( string $haystack , string $needle [, bool $before_needle = false [, string $encoding = mb_internal_encoding() ]] )"
      ["description"]=>
      string(210) "mb_stristr() finds the first occurrence of
   needle in haystack
   and returns the portion of haystack.
   Unlike mb_strstr(), 
   mb_stristr() is case-insensitive.
   If needle is not found, it returns FALSE."
      ["return"]=>
      string(68) "Returns the portion of haystack,
   or FALSE if needle is not found."
      ["parameters"]=>
      array(4) {
        ["haystack"]=>
        string(66) "The string from which to get the first occurrence
       of needle"
        ["needle"]=>
        string(30) "The string to find in haystack"
        ["before_needle"]=>
        string(323) "Determines which portion of haystack
       this function returns. 
       If set to TRUE, it returns all of  haystack
       from the beginning to the first occurrence of needle (excluding needle).
       If set to FALSE, it returns all of haystack
       from the first occurrence of needle to the end (including needle)."
        ["encoding"]=>
        string(93) "Character encoding name to use.
       If it is omitted, internal character encoding is used."
      }
      ["flatparameters"]=>
      string(41) "haystack, needle, before_needle, encoding"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [42]=>
    array(13) {
      ["name"]=>
      string(9) "mb_strlen"
      ["summary"]=>
      string(17) "Get string length"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(78) "mixed mb_strlen ( string $str [, string $encoding = mb_internal_encoding() ] )"
      ["anonsig"]=>
      string(75) "mixed ?????? ( string $str [, string $encoding = mb_internal_encoding() ] )"
      ["description"]=>
      string(28) "Gets the length of a string."
      ["return"]=>
      string(411) "Returns the number of characters in
   string str having character encoding
   encoding. A multi-byte character is
   counted as 1.
Returns FALSE if the given encoding is invalid.
This function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function."
      ["parameters"]=>
      array(2) {
        ["str"]=>
        string(36) "The string being checked for length."
        ["encoding"]=>
        string(119) "The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used."
      }
      ["flatparameters"]=>
      string(13) "str, encoding"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(238) "WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function."
      ["changelog"]=>
      array(0) {
      }
    }
    [43]=>
    array(13) {
      ["name"]=>
      string(9) "mb_strpos"
      ["summary"]=>
      string(55) "Find position of first occurrence of string in a string"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(118) "int mb_strpos ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )"
      ["anonsig"]=>
      string(115) "int ?????? ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )"
      ["description"]=>
      string(233) "Finds position of the first occurrence of a string in a string.
Performs a multi-byte safe
   strpos() operation based on number of
   characters. The first character's position is 0, the second character
   position is 1, and so on."
      ["return"]=>
      string(137) "Returns the numeric position of
   the first occurrence of needle in the
   haystack string. If
   needle is not found, it returns FALSE."
      ["parameters"]=>
      array(4) {
        ["haystack"]=>
        string(25) "The string being checked."
        ["needle"]=>
        string(140) "The string to find in haystack. In contrast
       with strpos(), numeric values are not applied
       as the ordinal value of a character."
        ["offset"]=>
        string(113) "The search offset. If it is not specified, 0 is used.
       A negative offset counts from the end of the string."
        ["encoding"]=>
        string(119) "The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used."
      }
      ["flatparameters"]=>
      string(34) "haystack, needle, offset, encoding"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["7.1.0"]=>
        string(44) "Support for negative offsets has been added."
      }
    }
    [44]=>
    array(13) {
      ["name"]=>
      string(10) "mb_strrchr"
      ["summary"]=>
      string(67) "Finds the last occurrence of a character in a string within another"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.2.0, PHP 7)"
      ["signature"]=>
      string(125) "string mb_strrchr ( string $haystack , string $needle [, bool $part = false [, string $encoding = mb_internal_encoding() ]] )"
      ["anonsig"]=>
      string(121) "string ?????? ( string $haystack , string $needle [, bool $part = false [, string $encoding = mb_internal_encoding() ]] )"
      ["description"]=>
      string(148) "mb_strrchr() finds the last occurrence of
   needle in haystack
   and returns the portion of haystack.
   If needle is not found, it returns FALSE."
      ["return"]=>
      string(68) "Returns the portion of haystack.
   or FALSE if needle is not found."
      ["parameters"]=>
      array(4) {
        ["haystack"]=>
        string(65) "The string from which to get the last occurrence
       of needle"
        ["needle"]=>
        string(30) "The string to find in haystack"
        ["part"]=>
        string(282) "Determines which portion of haystack
       this function returns. 
       If set to TRUE, it returns all of haystack
       from the beginning to the last occurrence of needle.
       If set to FALSE, it returns all of haystack
       from the last occurrence of needle to the end,"
        ["encoding"]=>
        string(93) "Character encoding name to use.
       If it is omitted, internal character encoding is used."
      }
      ["flatparameters"]=>
      string(32) "haystack, needle, part, encoding"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [45]=>
    array(13) {
      ["name"]=>
      string(11) "mb_strrichr"
      ["summary"]=>
      string(85) "Finds the last occurrence of a character in a string within another, case insensitive"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.2.0, PHP 7)"
      ["signature"]=>
      string(126) "string mb_strrichr ( string $haystack , string $needle [, bool $part = false [, string $encoding = mb_internal_encoding() ]] )"
      ["anonsig"]=>
      string(121) "string ?????? ( string $haystack , string $needle [, bool $part = false [, string $encoding = mb_internal_encoding() ]] )"
      ["description"]=>
      string(211) "mb_strrichr() finds the last occurrence of
   needle in haystack
   and returns the portion of haystack. Unlike
   mb_strrchr(), mb_strrichr() is
   case-insensitive.
   If needle is not found, it returns FALSE."
      ["return"]=>
      string(68) "Returns the portion of haystack.
   or FALSE if needle is not found."
      ["parameters"]=>
      array(4) {
        ["haystack"]=>
        string(65) "The string from which to get the last occurrence
       of needle"
        ["needle"]=>
        string(30) "The string to find in haystack"
        ["part"]=>
        string(282) "Determines which portion of haystack
       this function returns. 
       If set to TRUE, it returns all of haystack
       from the beginning to the last occurrence of needle.
       If set to FALSE, it returns all of haystack
       from the last occurrence of needle to the end,"
        ["encoding"]=>
        string(93) "Character encoding name to use.
       If it is omitted, internal character encoding is used."
      }
      ["flatparameters"]=>
      string(32) "haystack, needle, part, encoding"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [46]=>
    array(13) {
      ["name"]=>
      string(11) "mb_strripos"
      ["summary"]=>
      string(78) "Finds position of last occurrence of a string within another, case insensitive"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.2.0, PHP 7)"
      ["signature"]=>
      string(120) "int mb_strripos ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )"
      ["anonsig"]=>
      string(115) "int ?????? ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )"
      ["description"]=>
      string(292) "mb_strripos() performs multi-byte safe
   strripos() operation based on
   number of characters. needle position is
   counted from the beginning of
   haystack. First character's position is
   0. Second character position is 1. 
   Unlike mb_strrpos(),
   mb_strripos() is case-insensitive."
      ["return"]=>
      string(126) "Return the numeric position of
   the last occurrence of needle in the
   haystack string, or FALSE
   if needle is not found."
      ["parameters"]=>
      array(4) {
        ["haystack"]=>
        string(81) "The string from which to get the position of the last occurrence
       of needle"
        ["needle"]=>
        string(30) "The string to find in haystack"
        ["offset"]=>
        string(50) "The position in haystack
       to start searching"
        ["encoding"]=>
        string(93) "Character encoding name to use.
       If it is omitted, internal character encoding is used."
      }
      ["flatparameters"]=>
      string(34) "haystack, needle, offset, encoding"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [47]=>
    array(13) {
      ["name"]=>
      string(10) "mb_strrpos"
      ["summary"]=>
      string(56) "Find position of last occurrence of a string in a string"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(119) "int mb_strrpos ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )"
      ["anonsig"]=>
      string(115) "int ?????? ( string $haystack , string $needle [, int $offset = 0 [, string $encoding = mb_internal_encoding() ]] )"
      ["description"]=>
      string(220) "Performs a multibyte safe
   strrpos() operation based on the 
   number of characters. needle position is
   counted from the beginning of
   haystack. First character's position is
   0. Second character position is 1."
      ["return"]=>
      string(136) "Returns the numeric position of
   the last occurrence of needle in the
   haystack string. If
   needle is not found, it returns FALSE."
      ["parameters"]=>
      array(4) {
        ["haystack"]=>
        string(66) "The string being checked, for the last occurrence
       of needle"
        ["needle"]=>
        string(31) "The string to find in haystack."
        ["offset"]=>
        string(191) "May be specified to begin searching an arbitrary number of characters into
       the string.  Negative values will stop searching at an arbitrary point
       prior to the end of the string."
        ["encoding"]=>
        string(119) "The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used."
      }
      ["flatparameters"]=>
      string(34) "haystack, needle, offset, encoding"
      ["notes"]=>
      string(256) "Note: 
   
    The encoding parameter was moved from
    the third position to the fourth in PHP 5.2.0.  For backward
    compatibility, encoding can be specified
    as the third parameter, but doing so is deprecated and will be
    removed in the future."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.2.0"]=>
        string(36) "Added the optional parameter offset."
      }
    }
    [48]=>
    array(13) {
      ["name"]=>
      string(9) "mb_strstr"
      ["summary"]=>
      string(49) "Finds first occurrence of a string within another"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.2.0, PHP 7)"
      ["signature"]=>
      string(133) "string mb_strstr ( string $haystack , string $needle [, bool $before_needle = false [, string $encoding = mb_internal_encoding() ]] )"
      ["anonsig"]=>
      string(130) "string ?????? ( string $haystack , string $needle [, bool $before_needle = false [, string $encoding = mb_internal_encoding() ]] )"
      ["description"]=>
      string(148) "mb_strstr() finds the first occurrence of
   needle in haystack
   and returns the portion of haystack.
   If needle is not found, it returns FALSE."
      ["return"]=>
      string(68) "Returns the portion of haystack,
   or FALSE if needle is not found."
      ["parameters"]=>
      array(4) {
        ["haystack"]=>
        string(66) "The string from which to get the first occurrence
       of needle"
        ["needle"]=>
        string(30) "The string to find in haystack"
        ["before_needle"]=>
        string(323) "Determines which portion of haystack
       this function returns. 
       If set to TRUE, it returns all of  haystack
       from the beginning to the first occurrence of needle (excluding needle).
       If set to FALSE, it returns all of haystack
       from the first occurrence of needle to the end (including needle)."
        ["encoding"]=>
        string(93) "Character encoding name to use.
       If it is omitted, internal character encoding is used."
      }
      ["flatparameters"]=>
      string(41) "haystack, needle, before_needle, encoding"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [49]=>
    array(13) {
      ["name"]=>
      string(13) "mb_strtolower"
      ["summary"]=>
      string(23) "Make a string lowercase"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.3.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(83) "string mb_strtolower ( string $str [, string $encoding = mb_internal_encoding() ] )"
      ["anonsig"]=>
      string(76) "string ?????? ( string $str [, string $encoding = mb_internal_encoding() ] )"
      ["description"]=>
      string(69) "Returns str
   with all alphabetic characters converted to lowercase."
      ["return"]=>
      string(58) "str with all alphabetic characters converted to lowercase."
      ["parameters"]=>
      array(2) {
        ["str"]=>
        string(28) "The string being lowercased."
        ["encoding"]=>
        string(119) "The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used."
      }
      ["flatparameters"]=>
      string(13) "str, encoding"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [50]=>
    array(13) {
      ["name"]=>
      string(13) "mb_strtoupper"
      ["summary"]=>
      string(23) "Make a string uppercase"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.3.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(83) "string mb_strtoupper ( string $str [, string $encoding = mb_internal_encoding() ] )"
      ["anonsig"]=>
      string(76) "string ?????? ( string $str [, string $encoding = mb_internal_encoding() ] )"
      ["description"]=>
      string(69) "Returns str
   with all alphabetic characters converted to uppercase."
      ["return"]=>
      string(58) "str with all alphabetic characters converted to uppercase."
      ["parameters"]=>
      array(2) {
        ["str"]=>
        string(28) "The string being uppercased."
        ["encoding"]=>
        string(119) "The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used."
      }
      ["flatparameters"]=>
      string(13) "str, encoding"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [51]=>
    array(13) {
      ["name"]=>
      string(11) "mb_strwidth"
      ["summary"]=>
      string(22) "Return width of string"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(78) "int mb_strwidth ( string $str [, string $encoding = mb_internal_encoding() ] )"
      ["anonsig"]=>
      string(73) "int ?????? ( string $str [, string $encoding = mb_internal_encoding() ] )"
      ["description"]=>
      string(109) "Returns the width of string str.
Multi-byte characters are usually twice the width of single byte characters."
      ["return"]=>
      string(24) "The width of string str."
      ["parameters"]=>
      array(2) {
        ["str"]=>
        string(25) "The string being decoded."
        ["encoding"]=>
        string(119) "The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used."
      }
      ["flatparameters"]=>
      string(13) "str, encoding"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [52]=>
    array(13) {
      ["name"]=>
      string(23) "mb_substitute_character"
      ["summary"]=>
      string(30) "Set/Get substitution character"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(82) "mixed mb_substitute_character ([ mixed $substrchar = mb_substitute_character() ] )"
      ["anonsig"]=>
      string(65) "mixed ?????? ([ mixed $substrchar = mb_substitute_character() ] )"
      ["description"]=>
      string(377) "Specifies a substitution character when input character encoding is invalid
   or character code does not exist in output character
   encoding. Invalid characters may be substituted NULL (no output),
   string or integer value (Unicode character code value).
This setting affects mb_convert_encoding(),
   mb_convert_variables(),
   mb_output_handler(),
   and mb_send_mail()."
      ["return"]=>
      string(141) "If substchar is set, it returns TRUE for success,
   otherwise returns FALSE. 
   If substchar is not set, it returns the current
   setting."
      ["parameters"]=>
      array(1) {
        ["substrchar"]=>
        string(358) "Specify the Unicode value as an integer, 
       or as one of the following strings:
       
         
          "none": no output
         
        
        
         
          "long": Output character code value (Example:
          U+3000, JIS+7E7E)
         
        
        
         
          "entity": Output character entity (Example:
          Ȁ)"
      }
      ["flatparameters"]=>
      string(10) "substrchar"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [53]=>
    array(13) {
      ["name"]=>
      string(15) "mb_substr_count"
      ["summary"]=>
      string(41) "Count the number of substring occurrences"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.3.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(104) "int mb_substr_count ( string $haystack , string $needle [, string $encoding = mb_internal_encoding() ] )"
      ["anonsig"]=>
      string(95) "int ?????? ( string $haystack , string $needle [, string $encoding = mb_internal_encoding() ] )"
      ["description"]=>
      string(84) "Counts the number of times the
   needle substring occurs in the
   haystack string."
      ["return"]=>
      string(77) "The number of times the
   needle substring occurs in the
   haystack string."
      ["parameters"]=>
      array(3) {
        ["haystack"]=>
        string(25) "The string being checked."
        ["needle"]=>
        string(23) "The string being found."
        ["encoding"]=>
        string(119) "The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used."
      }
      ["flatparameters"]=>
      string(26) "haystack, needle, encoding"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [54]=>
    array(13) {
      ["name"]=>
      string(9) "mb_substr"
      ["summary"]=>
      string(18) "Get part of string"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(115) "string mb_substr ( string $str , int $start [, int $length = NULL [, string $encoding = mb_internal_encoding() ]] )"
      ["anonsig"]=>
      string(112) "string ?????? ( string $str , int $start [, int $length = NULL [, string $encoding = mb_internal_encoding() ]] )"
      ["description"]=>
      string(214) "Performs a multi-byte safe
   substr() operation based on
   number of characters. Position is
   counted from the beginning of
   str. First character's position is
   0. Second character position is 1, and so on."
      ["return"]=>
      string(93) "mb_substr() returns the portion of
   str specified by the
   start and
   length parameters."
      ["parameters"]=>
      array(4) {
        ["str"]=>
        string(41) "The string to extract the substring from."
        ["start"]=>
        string(410) "If start is non-negative, the returned string
       will start at the start'th position in
       str, counting from zero. For instance,
       in the string 'abcdef', the character at
       position 0 is 'a', the
       character at position 2 is
       'c', and so forth.
      
      
       If start is negative, the returned string
       will start at the start'th character
       from the end of str."
        ["length"]=>
        string(138) "Maximum number of characters to use from str. If
       omitted or NULL is passed, extract all characters to
       the end of the string."
        ["encoding"]=>
        string(119) "The encoding
parameter is the character encoding. If it is omitted, the internal character
encoding value will be used."
      }
      ["flatparameters"]=>
      string(28) "str, start, length, encoding"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.4.8"]=>
        string(142) "Passing NULL as length
        extracts all characters to the end of the string. Prior to this version
        NULL was treated the same as 0."
      }
    }
  }
  ["Arrays"]=>
  array(79) {
    [0]=>
    array(13) {
      ["name"]=>
      string(21) "array_change_key_case"
      ["summary"]=>
      string(40) "Changes the case of all keys in an array"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.2.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(72) "array array_change_key_case ( array $array [, int $case = CASE_LOWER ] )"
      ["anonsig"]=>
      string(57) "array ?????? ( array $array [, int $case = CASE_LOWER ] )"
      ["description"]=>
      string(103) "Returns an array with all keys from array lowercased
   or uppercased. Numbered indices are left as is."
      ["return"]=>
      string(89) "Returns an array with its keys lower or uppercased, or FALSE if
   array is not an array."
      ["parameters"]=>
      array(2) {
        ["array"]=>
        string(20) "The array to work on"
        ["case"]=>
        string(48) "Either CASE_UPPER or
       CASE_LOWER (default)"
      }
      ["flatparameters"]=>
      string(11) "array, case"
      ["notes"]=>
      string(190) "Note: 
   
    If an array has indices that will be the same once run through this
    function (e.g. "keY" and "kEY"), 
    the value that is later in the array will override other indices."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [1]=>
    array(13) {
      ["name"]=>
      string(11) "array_chunk"
      ["summary"]=>
      string(26) "Split an array into chunks"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.2.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(79) "array array_chunk ( array $array , int $size [, bool $preserve_keys = false ] )"
      ["anonsig"]=>
      string(74) "array ?????? ( array $array , int $size [, bool $preserve_keys = false ] )"
      ["description"]=>
      string(102) "Chunks an array into arrays with size elements.
   The last chunk may contain less than size elements."
      ["return"]=>
      string(122) "Returns a multidimensional numerically indexed array, starting with zero,
   with each dimension containing size elements."
      ["parameters"]=>
      array(3) {
        ["array"]=>
        string(20) "The array to work on"
        ["size"]=>
        string(22) "The size of each chunk"
        ["preserve_keys"]=>
        string(105) "When set to TRUE keys will be preserved.
       Default is FALSE which will reindex the chunk numerically"
      }
      ["flatparameters"]=>
      string(26) "array, size, preserve_keys"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [2]=>
    array(13) {
      ["name"]=>
      string(12) "array_column"
      ["summary"]=>
      string(57) "Return the values from a single column in the input array"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.5.0, PHP 7)"
      ["signature"]=>
      string(84) "array array_column ( array $input , mixed $column_key [, mixed $index_key = null ] )"
      ["anonsig"]=>
      string(78) "array ?????? ( array $input , mixed $column_key [, mixed $index_key = null ] )"
      ["description"]=>
      string(256) "array_column() returns the values from a single column of
   the input, identified by the
   column_key. Optionally, an
   index_key may be provided to index the values in the
   returned array by the values from the index_key
   column of the input array."
      ["return"]=>
      string(77) "Returns an array of values representing a single column from the input array."
      ["parameters"]=>
      array(3) {
        ["input"]=>
        string(340) "A multi-dimensional array or an array of objects from which to pull a
       column of values from. If an array of objects is provided, then public
       properties can be directly pulled. In order for protected or private
       properties to be pulled, the class must implement both the
       __get() and __isset() magic
       methods."
        ["column_key"]=>
        string(322) "The column of values to return. This value may be an integer key of the
       column you wish to retrieve, or it may be a string key name for an
       associative array or property name. It may also be NULL to return
       complete arrays or objects (this is useful together with
       index_key to reindex the array)."
        ["index_key"]=>
        string(149) "The column to use as the index/keys for the returned array. This value
       may be the integer key of the column, or it may be the string key name."
      }
      ["flatparameters"]=>
      string(28) "input, column_key, index_key"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["7.0.0"]=>
        string(76) "Added the ability for the input parameter to be
        an array of objects."
      }
    }
    [3]=>
    array(13) {
      ["name"]=>
      string(13) "array_combine"
      ["summary"]=>
      string(71) "Creates an array by using one array for keys and another for its values"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(51) "array array_combine ( array $keys , array $values )"
      ["anonsig"]=>
      string(44) "array ?????? ( array $keys , array $values )"
      ["description"]=>
      string(136) "Creates an array by using the values from the
   keys array as keys and the values from the
   values array as the corresponding values."
      ["return"]=>
      string(90) "Returns the combined array, FALSE if the number of elements
   for each array isn't equal."
      ["parameters"]=>
      array(2) {
        ["keys"]=>
        string(84) "Array of keys to be used. Illegal values for key will be
       converted to string."
        ["values"]=>
        string(26) "Array of values to be used"
      }
      ["flatparameters"]=>
      string(12) "keys, values"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.4.0"]=>
        string(79) "Previous versions issued E_WARNING and returned
        FALSE for empty arrays."
      }
    }
    [4]=>
    array(13) {
      ["name"]=>
      string(18) "array_count_values"
      ["summary"]=>
      string(33) "Counts all the values of an array"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(41) "array array_count_values ( array $array )"
      ["anonsig"]=>
      string(29) "array ?????? ( array $array )"
      ["description"]=>
      string(117) "array_count_values() returns an array using
   the values of array as keys and
   their frequency in array as values."
      ["return"]=>
      string(86) "Returns an associative array of values from array as
   keys and their count as value."
      ["parameters"]=>
      array(1) {
        ["array"]=>
        string(28) "The array of values to count"
      }
      ["flatparameters"]=>
      string(5) "array"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [5]=>
    array(13) {
      ["name"]=>
      string(16) "array_diff_assoc"
      ["summary"]=>
      string(61) "Computes the difference of arrays with additional index check"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.3.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(72) "array array_diff_assoc ( array $array1 , array $array2 [, array $... ] )"
      ["anonsig"]=>
      string(62) "array ?????? ( array $array1 , array $array2 [, array $... ] )"
      ["description"]=>
      string(132) "Compares array1 against array2 and
   returns the difference. Unlike array_diff() the array
   keys are also used in the comparison."
      ["return"]=>
      string(106) "Returns an array containing all the values from
   array1 that are not present in any of the other arrays."
      ["parameters"]=>
      array(3) {
        ["array1"]=>
        string(25) "The array to compare from"
        ["array2"]=>
        string(27) "An array to compare against"
        ["..."]=>
        string(30) "More arrays to compare against"
      }
      ["flatparameters"]=>
      string(19) "array1, array2, ..."
      ["notes"]=>
      string(356) "Note: 
   
    This function only checks one dimension of a n-dimensional
    array. Of course you can check deeper dimensions by using, for example,
    array_diff_assoc($array1[0], $array2[0]);.
Note: 
   
    Ensure you pass arguments in the correct order when comparing similar 
    arrays with more keys. The new array should be the first in the list."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [6]=>
    array(13) {
      ["name"]=>
      string(14) "array_diff_key"
      ["summary"]=>
      string(59) "Computes the difference of arrays using keys for comparison"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.1.0, PHP 7)"
      ["signature"]=>
      string(70) "array array_diff_key ( array $array1 , array $array2 [, array $... ] )"
      ["anonsig"]=>
      string(62) "array ?????? ( array $array1 , array $array2 [, array $... ] )"
      ["description"]=>
      string(195) "Compares the keys from array1 against the keys
   from array2 and returns the difference.
   This function is like array_diff() except the
   comparison is done on the keys instead of the values."
      ["return"]=>
      string(116) "Returns an array containing all the entries from
   array1 whose keys are not present in any of the
   other arrays."
      ["parameters"]=>
      array(3) {
        ["array1"]=>
        string(25) "The array to compare from"
        ["array2"]=>
        string(27) "An array to compare against"
        ["..."]=>
        string(30) "More arrays to compare against"
      }
      ["flatparameters"]=>
      string(19) "array1, array2, ..."
      ["notes"]=>
      string(180) "Note: 
   
    This function only checks one dimension of a n-dimensional
    array. Of course you can check deeper dimensions by using
    array_diff_key($array1[0], $array2[0]);."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [7]=>
    array(13) {
      ["name"]=>
      string(17) "array_diff_uassoc"
      ["summary"]=>
      string(117) "Computes the difference of arrays with additional index check which is performed by a user supplied callback function"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(101) "array array_diff_uassoc ( array $array1 , array $array2 [, array $... ], callable $key_compare_func )"
      ["anonsig"]=>
      string(90) "array ?????? ( array $array1 , array $array2 [, array $... ], callable $key_compare_func )"
      ["description"]=>
      string(249) "Compares array1 against array2 and
   returns the difference. Unlike array_diff() the array
   keys are used in the comparison.
Unlike array_diff_assoc() a user supplied callback
   function is used for the indices comparison, not internal function."
      ["return"]=>
      string(107) "Returns an array containing all the entries from
   array1 that are not present in any of the other arrays."
      ["parameters"]=>
      array(4) {
        ["array1"]=>
        string(25) "The array to compare from"
        ["array2"]=>
        string(27) "An array to compare against"
        ["..."]=>
        string(30) "More arrays to compare against"
        ["key_compare_func"]=>
        string(336) "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.
Note that before PHP 7.0.0 this integer had to be in the range from -2147483648 to 2147483647.
      
      int callback ( mixed $a, mixed $b )"
      }
      ["flatparameters"]=>
      string(37) "array1, array2, ..., key_compare_func"
      ["notes"]=>
      string(217) "Note: 
   
    This function only checks one dimension of a n-dimensional
    array. Of course you can check deeper dimensions by using, for example,
    array_diff_uassoc($array1[0], $array2[0], "key_compare_func");."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [8]=>
    array(13) {
      ["name"]=>
      string(15) "array_diff_ukey"
      ["summary"]=>
      string(86) "Computes the difference of arrays using a callback function on the keys for comparison"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.1.0, PHP 7)"
      ["signature"]=>
      string(99) "array array_diff_ukey ( array $array1 , array $array2 [, array $... ], callable $key_compare_func )"
      ["anonsig"]=>
      string(90) "array ?????? ( array $array1 , array $array2 [, array $... ], callable $key_compare_func )"
      ["description"]=>
      string(315) "Compares the keys from array1 against the keys
   from array2 and returns the difference.
   This function is like array_diff() except the
   comparison is done on the keys instead of the values.
Unlike array_diff_key() a user supplied callback
   function is used for the indices comparison, not internal function."
      ["return"]=>
      string(107) "Returns an array containing all the entries from
   array1 that are not present in any of the other arrays."
      ["parameters"]=>
      array(4) {
        ["array1"]=>
        string(25) "The array to compare from"
        ["array2"]=>
        string(27) "An array to compare against"
        ["..."]=>
        string(30) "More arrays to compare against"
        ["key_compare_func"]=>
        string(336) "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.
Note that before PHP 7.0.0 this integer had to be in the range from -2147483648 to 2147483647.
      
      int callback ( mixed $a, mixed $b )"
      }
      ["flatparameters"]=>
      string(37) "array1, array2, ..., key_compare_func"
      ["notes"]=>
      string(198) "Note: 
   
    This function only checks one dimension of a n-dimensional
    array. Of course you can check deeper dimensions by using
    array_diff_ukey($array1[0], $array2[0], 'callback_func');."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [9]=>
    array(13) {
      ["name"]=>
      string(10) "array_diff"
      ["summary"]=>
      string(33) "Computes the difference of arrays"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.1, PHP 5, PHP 7)"
      ["signature"]=>
      string(66) "array array_diff ( array $array1 , array $array2 [, array $... ] )"
      ["anonsig"]=>
      string(62) "array ?????? ( array $array1 , array $array2 [, array $... ] )"
      ["description"]=>
      string(136) "Compares array1 against one or more other arrays and
   returns the values in array1 that are not present in
   any of the other arrays."
      ["return"]=>
      string(107) "Returns an array containing all the entries from
   array1 that are not present in any of the other arrays."
      ["parameters"]=>
      array(3) {
        ["array1"]=>
        string(25) "The array to compare from"
        ["array2"]=>
        string(27) "An array to compare against"
        ["..."]=>
        string(30) "More arrays to compare against"
      }
      ["flatparameters"]=>
      string(19) "array1, array2, ..."
      ["notes"]=>
      string(345) "Note: 
   
    Two elements are considered equal if and only if
    (string) $elem1 === (string) $elem2. In other words:
    when the string representation is the same.
Note: 
   
    This function only checks one dimension of a n-dimensional
    array. Of course you can check deeper dimensions by using
    array_diff($array1[0], $array2[0]);."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [10]=>
    array(13) {
      ["name"]=>
      string(15) "array_fill_keys"
      ["summary"]=>
      string(42) "Fill an array with values, specifying keys"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.2.0, PHP 7)"
      ["signature"]=>
      string(52) "array array_fill_keys ( array $keys , mixed $value )"
      ["anonsig"]=>
      string(43) "array ?????? ( array $keys , mixed $value )"
      ["description"]=>
      string(103) "Fills an array with the
   value of the value parameter, using the
   values of the keys array as keys."
      ["return"]=>
      string(24) "Returns the filled array"
      ["parameters"]=>
      array(2) {
        ["keys"]=>
        string(101) "Array of values that will be used as keys. Illegal values
       for key will be converted to string."
        ["value"]=>
        string(24) "Value to use for filling"
      }
      ["flatparameters"]=>
      string(11) "keys, value"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [11]=>
    array(13) {
      ["name"]=>
      string(10) "array_fill"
      ["summary"]=>
      string(25) "Fill an array with values"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.2.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(63) "array array_fill ( int $start_index , int $num , mixed $value )"
      ["anonsig"]=>
      string(59) "array ?????? ( int $start_index , int $num , mixed $value )"
      ["description"]=>
      string(121) "Fills an array with
   num entries of the value of the
   value parameter, keys starting at the
   start_index parameter."
      ["return"]=>
      string(24) "Returns the filled array"
      ["parameters"]=>
      array(3) {
        ["start_index"]=>
        string(239) "The first index of the returned array.
      
      
       If start_index is negative, 
       the first index of the returned array will be 
       start_index and the following 
       indices will start from zero 
       (see example)."
        ["num"]=>
        string(75) "Number of elements to insert.
       Must be greater than or equal to zero."
        ["value"]=>
        string(24) "Value to use for filling"
      }
      ["flatparameters"]=>
      string(23) "start_index, num, value"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.6.0"]=>
        string(82) "num may now be zero. Previously,
        num was required to be greater than zero."
      }
    }
    [12]=>
    array(13) {
      ["name"]=>
      string(12) "array_filter"
      ["summary"]=>
      string(54) "Filters elements of an array using a callback function"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(77) "array array_filter ( array $array [, callable $callback [, int $flag = 0 ]] )"
      ["anonsig"]=>
      string(71) "array ?????? ( array $array [, callable $callback [, int $flag = 0 ]] )"
      ["description"]=>
      string(217) "Iterates over each value in the array
   passing them to the callback function.
   If the callback function returns true, the
   current value from array is returned into
   the result array. Array keys are preserved."
      ["return"]=>
      string(27) "Returns the filtered array."
      ["parameters"]=>
      array(3) {
        ["array"]=>
        string(25) "The array to iterate over"
        ["callback"]=>
        string(180) "The callback function to use
      
      
       If no callback is supplied, all entries of
       array equal to FALSE (see
       converting to
        boolean) will be removed."
        ["flag"]=>
        string(295) "Flag determining what arguments are sent to callback:
       
         ARRAY_FILTER_USE_KEY - pass key as the only argument
         to callback instead of the value
        
        
         ARRAY_FILTER_USE_BOTH - pass both value and key as
         arguments to callback instead of the value"
      }
      ["flatparameters"]=>
      string(21) "array, callback, flag"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(153) "Caution
   
    If the array is changed from the callback function (e.g. element
    added, deleted or unset) the behavior of this function is undefined."
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.6.0"]=>
        string(106) "Added optional flag parameter and constants 
       ARRAY_FILTER_USE_KEY and 
       ARRAY_FILTER_USE_BOTH"
      }
    }
    [13]=>
    array(13) {
      ["name"]=>
      string(10) "array_flip"
      ["summary"]=>
      string(59) "Exchanges all keys with their associated values in an array"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(33) "array array_flip ( array $array )"
      ["anonsig"]=>
      string(29) "array ?????? ( array $array )"
      ["description"]=>
      string(470) "array_flip() returns an array in flip
   order, i.e. keys from array become values and values
   from array become keys.
Note that the values of array need to be valid
   keys, i.e. they need to be either integer or
   string. A warning will be emitted if a value has the wrong
   type, and the key/value pair in question will not be included
   in the result.
If a value has several occurrences, the latest key will be
   used as its value, and all others will be lost."
      ["return"]=>
      string(57) "Returns the flipped array on success and NULL on failure."
      ["parameters"]=>
      array(1) {
        ["array"]=>
        string(42) "An array of key/value pairs to be flipped."
      }
      ["flatparameters"]=>
      string(5) "array"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [14]=>
    array(13) {
      ["name"]=>
      string(21) "array_intersect_assoc"
      ["summary"]=>
      string(63) "Computes the intersection of arrays with additional index check"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.3.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(77) "array array_intersect_assoc ( array $array1 , array $array2 [, array $... ] )"
      ["anonsig"]=>
      string(62) "array ?????? ( array $array1 , array $array2 [, array $... ] )"
      ["description"]=>
      string(204) "array_intersect_assoc() returns an array
   containing all the values of array1
   that are present in all the arguments. Note that the keys are also used in
   the comparison unlike in array_intersect()."
      ["return"]=>
      string(110) "Returns an associative array containing all the values in 
   array1 that are present in all of the arguments."
      ["parameters"]=>
      array(3) {
        ["array1"]=>
        string(38) "The array with master values to check."
        ["array2"]=>
        string(35) "An array to compare values against."
        ["..."]=>
        string(37) "A variable list of arrays to compare."
      }
      ["flatparameters"]=>
      string(19) "array1, array2, ..."
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [15]=>
    array(13) {
      ["name"]=>
      string(19) "array_intersect_key"
      ["summary"]=>
      string(61) "Computes the intersection of arrays using keys for comparison"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.1.0, PHP 7)"
      ["signature"]=>
      string(75) "array array_intersect_key ( array $array1 , array $array2 [, array $... ] )"
      ["anonsig"]=>
      string(62) "array ?????? ( array $array1 , array $array2 [, array $... ] )"
      ["description"]=>
      string(136) "array_intersect_key() returns an array
   containing all the entries of array1
   which have keys that are present in all the arguments."
      ["return"]=>
      string(123) "Returns an associative array containing all the entries of 
   array1 which have keys that are present in all
   arguments."
      ["parameters"]=>
      array(3) {
        ["array1"]=>
        string(36) "The array with master keys to check."
        ["array2"]=>
        string(33) "An array to compare keys against."
        ["..."]=>
        string(37) "A variable list of arrays to compare."
      }
      ["flatparameters"]=>
      string(19) "array1, array2, ..."
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [16]=>
    array(13) {
      ["name"]=>
      string(22) "array_intersect_uassoc"
      ["summary"]=>
      string(104) "Computes the intersection of arrays with additional index check, compares indexes by a callback function"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(106) "array array_intersect_uassoc ( array $array1 , array $array2 [, array $... ], callable $key_compare_func )"
      ["anonsig"]=>
      string(90) "array ?????? ( array $array1 , array $array2 [, array $... ], callable $key_compare_func )"
      ["description"]=>
      string(200) "array_intersect_uassoc() returns an array
   containing all the values of array1
   that are present in all the arguments. Note that the keys are used in
   the comparison unlike in array_intersect()."
      ["return"]=>
      string(75) "Returns the values of array1 whose values exist
   in all of the arguments."
      ["parameters"]=>
      array(4) {
        ["array1"]=>
        string(43) "Initial array for comparison of the arrays."
        ["array2"]=>
        string(36) "First array to compare keys against."
        ["..."]=>
        string(59) "Variable list of array arguments to compare values against."
        ["key_compare_func"]=>
        string(336) "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.
Note that before PHP 7.0.0 this integer had to be in the range from -2147483648 to 2147483647.
      
      int callback ( mixed $a, mixed $b )"
      }
      ["flatparameters"]=>
      string(37) "array1, array2, ..., key_compare_func"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [17]=>
    array(13) {
      ["name"]=>
      string(20) "array_intersect_ukey"
      ["summary"]=>
      string(88) "Computes the intersection of arrays using a callback function on the keys for comparison"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.1.0, PHP 7)"
      ["signature"]=>
      string(104) "array array_intersect_ukey ( array $array1 , array $array2 [, array $... ], callable $key_compare_func )"
      ["anonsig"]=>
      string(90) "array ?????? ( array $array1 , array $array2 [, array $... ], callable $key_compare_func )"
      ["description"]=>
      string(145) "array_intersect_ukey() returns an array
   containing all the values of array1
   which have matching keys that are present in all the arguments."
      ["return"]=>
      string(70) "Returns the values of array1 whose keys exist
   in all the arguments."
      ["parameters"]=>
      array(4) {
        ["array1"]=>
        string(43) "Initial array for comparison of the arrays."
        ["array2"]=>
        string(36) "First array to compare keys against."
        ["..."]=>
        string(57) "Variable list of array arguments to compare keys against."
        ["key_compare_func"]=>
        string(336) "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.
Note that before PHP 7.0.0 this integer had to be in the range from -2147483648 to 2147483647.
      
      int callback ( mixed $a, mixed $b )"
      }
      ["flatparameters"]=>
      string(37) "array1, array2, ..., key_compare_func"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [18]=>
    array(13) {
      ["name"]=>
      string(15) "array_intersect"
      ["summary"]=>
      string(35) "Computes the intersection of arrays"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.1, PHP 5, PHP 7)"
      ["signature"]=>
      string(71) "array array_intersect ( array $array1 , array $array2 [, array $... ] )"
      ["anonsig"]=>
      string(62) "array ?????? ( array $array1 , array $array2 [, array $... ] )"
      ["description"]=>
      string(148) "array_intersect() returns an array
   containing all the values of array1
   that are present in all the arguments.
   Note that keys are preserved."
      ["return"]=>
      string(104) "Returns an array containing all of the values in 
   array1 whose values exist in all of the parameters."
      ["parameters"]=>
      array(3) {
        ["array1"]=>
        string(38) "The array with master values to check."
        ["array2"]=>
        string(35) "An array to compare values against."
        ["..."]=>
        string(37) "A variable list of arrays to compare."
      }
      ["flatparameters"]=>
      string(19) "array1, array2, ..."
      ["notes"]=>
      string(162) "Note: 
   
    Two elements are considered equal if and only if
    (string) $elem1 === (string) $elem2. In words:
    when the string representation is the same."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [19]=>
    array(13) {
      ["name"]=>
      string(16) "array_key_exists"
      ["summary"]=>
      string(52) "Checks if the given key or index exists in the array"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.7, PHP 5, PHP 7)"
      ["signature"]=>
      string(51) "bool array_key_exists ( mixed $key , array $array )"
      ["anonsig"]=>
      string(41) "bool ?????? ( mixed $key , array $array )"
      ["description"]=>
      string(128) "array_key_exists() returns TRUE if the
   given key is set in the array.
   key can be any value possible
   for an array index."
      ["return"]=>
      string(185) "Returns TRUE on success or FALSE on failure.
Note:
array_key_exists() will search for the keys in the first dimension only.
    Nested keys in multidimensional arrays will not be found."
      ["parameters"]=>
      array(2) {
        ["key"]=>
        string(15) "Value to check."
        ["array"]=>
        string(28) "An array with keys to check."
      }
      ["flatparameters"]=>
      string(10) "key, array"
      ["notes"]=>
      string(523) "Note: 
   
    array_key_exists() will search for the keys in the first dimension only.
    Nested keys in multidimensional arrays will not be found.
Note: 
    
     For backward compatibility reasons, array_key_exists()
     will also return TRUE if key is a property
     defined within an object given as
     array. This behaviour should not be relied upon,
     and care should be taken to ensure that array is
     an array.
    
    
     To check whether a property exists in an object, use
     property_exists()."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [20]=>
    array(13) {
      ["name"]=>
      string(10) "array_keys"
      ["summary"]=>
      string(55) "Return all the keys or a subset of the keys of an array"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(90) "array array_keys ( array $array [, mixed $search_value = null [, bool $strict = false ]] )"
      ["anonsig"]=>
      string(86) "array ?????? ( array $array [, mixed $search_value = null [, bool $strict = false ]] )"
      ["description"]=>
      string(219) "array_keys() returns the keys, numeric and
   string, from the array.
If the optional search_value is specified,
   then only the keys for that value are returned. Otherwise, all
   the keys from the array are returned."
      ["return"]=>
      string(42) "Returns an array of all the keys in array."
      ["parameters"]=>
      array(3) {
        ["array"]=>
        string(35) "An array containing keys to return."
        ["search_value"]=>
        string(66) "If specified, then only keys containing these values are returned."
        ["strict"]=>
        string(71) "Determines if strict comparison (===) should be used during the search."
      }
      ["flatparameters"]=>
      string(27) "array, search_value, strict"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [21]=>
    array(13) {
      ["name"]=>
      string(9) "array_map"
      ["summary"]=>
      string(56) "Applies the callback to the elements of the given arrays"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(70) "array array_map ( callable $callback , array $array1 [, array $... ] )"
      ["anonsig"]=>
      string(67) "array ?????? ( callable $callback , array $array1 [, array $... ] )"
      ["description"]=>
      string(254) "array_map() returns an array containing all
   the elements of array1 after applying the
   callback function to each one.
   The number of parameters that the callback
   function accepts
   should match the number of arrays
   passed to the array_map()"
      ["return"]=>
      string(107) "Returns an array containing all the elements of array1
   after applying the callback function to each one."
      ["parameters"]=>
      array(3) {
        ["callback"]=>
        string(56) "Callback function to run for each element in each array."
        ["array1"]=>
        string(46) "An array to run through the callback function."
        ["..."]=>
        string(77) "Variable list of array arguments to run through the
       callback function."
      }
      ["flatparameters"]=>
      string(21) "callback, array1, ..."
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [22]=>
    array(13) {
      ["name"]=>
      string(21) "array_merge_recursive"
      ["summary"]=>
      string(36) "Merge two or more arrays recursively"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.1, PHP 5, PHP 7)"
      ["signature"]=>
      string(61) "array array_merge_recursive ( array $array1 [, array $... ] )"
      ["anonsig"]=>
      string(46) "array ?????? ( array $array1 [, array $... ] )"
      ["description"]=>
      string(595) "array_merge_recursive() merges the elements of
   one or more arrays together so that the values of one are appended
   to the end of the previous one.  It returns the resulting array.
If the input arrays have the same string keys, then the values for
   these keys are merged together into an array, and this is done
   recursively, so that if one of the values is an array itself, the
   function will merge it with a corresponding entry in another array
   too. If, however, the arrays have the same numeric key, the later
   value will not overwrite the original value, but will be appended."
      ["return"]=>
      string(64) "An array of values resulted from merging the arguments together."
      ["parameters"]=>
      array(2) {
        ["array1"]=>
        string(23) "Initial array to merge."
        ["..."]=>
        string(45) "Variable list of arrays to recursively merge."
      }
      ["flatparameters"]=>
      string(11) "array1, ..."
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [23]=>
    array(13) {
      ["name"]=>
      string(11) "array_merge"
      ["summary"]=>
      string(24) "Merge one or more arrays"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(51) "array array_merge ( array $array1 [, array $... ] )"
      ["anonsig"]=>
      string(46) "array ?????? ( array $array1 [, array $... ] )"
      ["description"]=>
      string(535) "Merges the elements of one or more arrays together so that the values of
   one are appended to the end of the previous one. It returns the resulting
   array.
If the input arrays have the same string keys, then the later value for
   that key will overwrite the previous one.  If, however, the arrays
   contain numeric keys, the later value will not overwrite the original value, but will be
   appended.
Values in the input array with numeric keys will be renumbered with
   incrementing keys starting from zero in the result array."
      ["return"]=>
      string(28) "Returns the resulting array."
      ["parameters"]=>
      array(2) {
        ["array1"]=>
        string(23) "Initial array to merge."
        ["..."]=>
        string(33) "Variable list of arrays to merge."
      }
      ["flatparameters"]=>
      string(11) "array1, ..."
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [24]=>
    array(13) {
      ["name"]=>
      string(15) "array_multisort"
      ["summary"]=>
      string(41) "Sort multiple or multi-dimensional arrays"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(139) "bool array_multisort ( array &$array1 [, mixed $array1_sort_order = SORT_ASC [, mixed $array1_sort_flags = SORT_REGULAR [, mixed $... ]]] )"
      ["anonsig"]=>
      string(130) "bool ?????? ( array &$array1 [, mixed $array1_sort_order = SORT_ASC [, mixed $array1_sort_flags = SORT_REGULAR [, mixed $... ]]] )"
      ["description"]=>
      string(303) "array_multisort() can be used to sort several
   arrays at once, or a multi-dimensional array by one or more
   dimensions.
Associative (string) keys will be maintained, but numeric
   keys will be re-indexed.
Note:
If two members compare as equal, their relative order in the sorted array is undefined."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(4) {
        ["array1"]=>
        string(22) "An array being sorted."
        ["array1_sort_order"]=>
        string(272) "The order used to sort the previous array argument. Either
       SORT_ASC to sort ascendingly or SORT_DESC
       to sort descendingly.
      
      
       This argument can be swapped with array1_sort_flags
       or omitted entirely, in which case SORT_ASC is assumed."
        ["array1_sort_flags"]=>
        string(981) "Sort options for the previous array argument:
      
      
       Sorting type flags:
       
         SORT_REGULAR - compare items normally
         (don't change types)
        
        
         SORT_NUMERIC - compare items numerically
        
        
         SORT_STRING - compare items as strings
        
        
         
          SORT_LOCALE_STRING - compare items as
          strings, based on the current locale. It uses the locale,
          which can be changed using setlocale()
         
        
        
         
          SORT_NATURAL - compare items as strings
          using "natural ordering" like natsort()
         
        
        
         
          SORT_FLAG_CASE - can be combined
          (bitwise OR) with
          SORT_STRING or
          SORT_NATURAL to sort strings case-insensitively
         
        
       
       This argument can be swapped with array1_sort_order
       or omitted entirely, in which case SORT_REGULAR is assumed."
        ["..."]=>
        string(200) "More arrays, optionally followed by sort order and flags. Only elements
       corresponding to equivalent elements in previous arrays are compared.
       In other words, the sort is lexicographical."
      }
      ["flatparameters"]=>
      string(49) "array1, array1_sort_order, array1_sort_flags, ..."
      ["notes"]=>
      string(98) "Note: 
 
  If two members compare as equal, their relative order in the sorted array is undefined."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(2) {
        ["5.4.0"]=>
        string(99) "The SORT_NATURAL and SORT_FLAG_CASE
        were added to array1_sort_flags as possible sort flags."
        ["5.3.0"]=>
        string(85) "The SORT_LOCALE_STRING was added to
        array1_sort_flags as possible sort flags."
      }
    }
    [25]=>
    array(13) {
      ["name"]=>
      string(9) "array_pad"
      ["summary"]=>
      string(46) "Pad array to the specified length with a value"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(59) "array array_pad ( array $array , int $size , mixed $value )"
      ["anonsig"]=>
      string(56) "array ?????? ( array $array , int $size , mixed $value )"
      ["description"]=>
      string(377) "array_pad() returns a copy of the
   array padded to size specified by
   size with value
   value. If
   size is positive then the array is
   padded on the right, if it's negative then on the left. If the
   absolute value of size is less than or
   equal to the length of the array then no
   padding takes place.
   It is possible to add at most 1048576 elements at a time."
      ["return"]=>
      string(301) "Returns a copy of the array padded to size specified
   by size with value 
   value. If size is 
   positive then the array is padded on the right, if it's negative then 
   on the left. If the absolute value of size is less
   than or equal to the length of the array then no
   padding takes place."
      ["parameters"]=>
      array(3) {
        ["array"]=>
        string(31) "Initial array of values to pad."
        ["size"]=>
        string(22) "New size of the array."
        ["value"]=>
        string(47) "Value to pad if array is less than
       size."
      }
      ["flatparameters"]=>
      string(18) "array, size, value"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [26]=>
    array(13) {
      ["name"]=>
      string(9) "array_pop"
      ["summary"]=>
      string(36) "Pop the element off the end of array"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(33) "mixed array_pop ( array &$array )"
      ["anonsig"]=>
      string(30) "mixed ?????? ( array &$array )"
      ["description"]=>
      string(181) "array_pop() pops and returns the last value of
   the array, shortening the
   array by one element.
Note: This function will
reset() the array pointer of the input array after
use."
      ["return"]=>
      string(101) "Returns the last value of array.
   If array is empty (or is not an array),
   NULL will be returned."
      ["parameters"]=>
      array(1) {
        ["array"]=>
        string(32) "The array to get the value from."
      }
      ["flatparameters"]=>
      string(5) "array"
      ["notes"]=>
      string(80) "Note: This function will
reset() the array pointer of the input array after
use."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [27]=>
    array(13) {
      ["name"]=>
      string(13) "array_product"
      ["summary"]=>
      string(43) "Calculate the product of values in an array"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.1.0, PHP 7)"
      ["signature"]=>
      string(37) "number array_product ( array $array )"
      ["anonsig"]=>
      string(30) "number ?????? ( array $array )"
      ["description"]=>
      string(61) "array_product() returns the product of values
   in an array."
      ["return"]=>
      string(43) "Returns the product as an integer or float."
      ["parameters"]=>
      array(1) {
        ["array"]=>
        string(10) "The array."
      }
      ["flatparameters"]=>
      string(5) "array"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.3.6"]=>
        string(108) "The product of an empty array is now 1, when before this function would
        return 0 for an empty array."
      }
    }
    [28]=>
    array(13) {
      ["name"]=>
      string(10) "array_push"
      ["summary"]=>
      string(47) "Push one or more elements onto the end of array"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(64) "int array_push ( array &$array , mixed $value1 [, mixed $... ] )"
      ["anonsig"]=>
      string(60) "int ?????? ( array &$array , mixed $value1 [, mixed $... ] )"
      ["description"]=>
      string(529) "array_push() treats array as a
   stack, and pushes the passed variables onto the end of
   array. The length of array
   increases by the number of variables pushed. Has the same effect as:
Note: 
   
    If you use array_push() to add one element to the
    array it's better to use $array[] =  because in that
    way there is no overhead of calling a function.
Note: 
   
    array_push() will raise a warning if the first
    argument is not an array. This differs from the
    $var[] behaviour where a new array is created."
      ["return"]=>
      string(48) "Returns the new number of elements in the array."
      ["parameters"]=>
      array(2) {
        ["array"]=>
        string(16) "The input array."
        ["value1"]=>
        string(50) "The first value to push onto the end of the array."
      }
      ["flatparameters"]=>
      string(13) "array, value1"
      ["notes"]=>
      string(338) "Note: 
   
    If you use array_push() to add one element to the
    array it's better to use $array[] =  because in that
    way there is no overhead of calling a function.
Note: 
   
    array_push() will raise a warning if the first
    argument is not an array. This differs from the
    $var[] behaviour where a new array is created."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [29]=>
    array(13) {
      ["name"]=>
      string(10) "array_rand"
      ["summary"]=>
      string(47) "Pick one or more random entries out of an array"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(51) "mixed array_rand ( array $array [, int $num = 1 ] )"
      ["anonsig"]=>
      string(47) "mixed ?????? ( array $array [, int $num = 1 ] )"
      ["description"]=>
      string(201) "Picks one or more random entries out of an array, and returns the
   key (or keys) of the random entries.
   It uses a pseudo random number generator that is not suitable for
   cryptographic purposes."
      ["return"]=>
      string(369) "When picking only one entry, array_rand() returns
   the key for a random entry. Otherwise, an array of keys for the random
   entries is returned. This is done so that random keys can be picked
   from the array as well as random values. Trying to pick more elements
   than there are in the array will result in an
   E_WARNING level error, and NULL will be returned."
      ["parameters"]=>
      array(2) {
        ["array"]=>
        string(16) "The input array."
        ["num"]=>
        string(44) "Specifies how many entries should be picked."
      }
      ["flatparameters"]=>
      string(10) "array, num"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(2) {
        ["7.1.0"]=>
        string(144) "The internal randomization algorithm has been changed to use the » Mersenne Twister Random Number Generator instead of the libc rand function."
        ["5.2.10"]=>
        string(50) "The resulting array of keys is no longer shuffled."
      }
    }
    [30]=>
    array(13) {
      ["name"]=>
      string(12) "array_reduce"
      ["summary"]=>
      string(72) "Iteratively reduce the array to a single value using a callback function"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.5, PHP 5, PHP 7)"
      ["signature"]=>
      string(83) "mixed array_reduce ( array $array , callable $callback [, mixed $initial = NULL ] )"
      ["anonsig"]=>
      string(77) "mixed ?????? ( array $array , callable $callback [, mixed $initial = NULL ] )"
      ["description"]=>
      string(140) "array_reduce() applies iteratively the
   callback function to the elements of the
   array, so as to reduce the array to
   a single value."
      ["return"]=>
      string(109) "Returns the resulting value.
If the array is empty and initial is not passed,
   array_reduce() returns NULL."
      ["parameters"]=>
      array(3) {
        ["array"]=>
        string(16) "The input array."
        ["callback"]=>
        string(380) "mixed callback
        ( mixed $carry
       , mixed $item
       )

      
carry

        

         
          Holds the return value of the previous iteration; in the case of the
          first iteration it instead holds the value of 
          initial.
         
        

       
       
        
item

        

         
          Holds the value of the current iteration."
        ["initial"]=>
        string(149) "If the optional initial is available, it will
       be used at the beginning of the process, or as a final result in case
       the array is empty."
      }
      ["flatparameters"]=>
      string(24) "array, callback, initial"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.3.0"]=>
        string(51) "Changed initial to allow mixed, previously integer."
      }
    }
    [31]=>
    array(13) {
      ["name"]=>
      string(23) "array_replace_recursive"
      ["summary"]=>
      string(69) "Replaces elements from passed arrays into the first array recursively"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.3.0, PHP 7)"
      ["signature"]=>
      string(79) "array array_replace_recursive ( array $array1 , array $array2 [, array $... ] )"
      ["anonsig"]=>
      string(62) "array ?????? ( array $array1 , array $array2 [, array $... ] )"
      ["description"]=>
      string(905) "array_replace_recursive() replaces the values of
   array1 with the same values from all the following
   arrays. If a key from the first array exists in the second array, its value
   will be replaced by the value from the second array. If the key exists in the
   second array, and not the first, it will be created in the first array.
   If a key only exists in the first array, it will be left as is. 
   If several arrays are passed for replacement, they will be processed
   in order, the later array overwriting the previous values.
array_replace_recursive() is recursive : it will recurse into
   arrays and apply the same process to the inner value.
When the value in array1 is scalar, it will be replaced
   by the value in array2, may it be scalar or array.
   When the value in array1 and array2
   are both arrays, array_replace_recursive() will replace
   their respective value recursively."
      ["return"]=>
      string(45) "Returns an array, or NULL if an error occurs."
      ["parameters"]=>
      array(3) {
        ["array1"]=>
        string(41) "The array in which elements are replaced."
        ["array2"]=>
        string(48) "The array from which elements will be extracted."
        ["..."]=>
        string(60) "Optional. More arrays from which elements will be extracted."
      }
      ["flatparameters"]=>
      string(19) "array1, array2, ..."
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [32]=>
    array(13) {
      ["name"]=>
      string(13) "array_replace"
      ["summary"]=>
      string(57) "Replaces elements from passed arrays into the first array"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.3.0, PHP 7)"
      ["signature"]=>
      string(69) "array array_replace ( array $array1 , array $array2 [, array $... ] )"
      ["anonsig"]=>
      string(62) "array ?????? ( array $array1 , array $array2 [, array $... ] )"
      ["description"]=>
      string(664) "array_replace() replaces the values of
   array1 with values having the same keys in each of the following
   arrays. If a key from the first array exists in the second array, its value
   will be replaced by the value from the second array. If the key exists in the
   second array, and not the first, it will be created in the first array.
   If a key only exists in the first array, it will be left as is.
   If several arrays are passed for replacement, they will be processed
   in order, the later arrays overwriting the previous values.
array_replace() is not recursive : it will replace
   values in the first array by whatever type is in the second array."
      ["return"]=>
      string(45) "Returns an array, or NULL if an error occurs."
      ["parameters"]=>
      array(3) {
        ["array1"]=>
        string(41) "The array in which elements are replaced."
        ["array2"]=>
        string(48) "The array from which elements will be extracted."
        ["..."]=>
        string(113) "More arrays from which elements will be extracted.
       Values from later arrays overwrite the previous values."
      }
      ["flatparameters"]=>
      string(19) "array1, array2, ..."
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [33]=>
    array(13) {
      ["name"]=>
      string(13) "array_reverse"
      ["summary"]=>
      string(46) "Return an array with elements in reverse order"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(69) "array array_reverse ( array $array [, bool $preserve_keys = false ] )"
      ["anonsig"]=>
      string(62) "array ?????? ( array $array [, bool $preserve_keys = false ] )"
      ["description"]=>
      string(88) "Takes an input array and returns a new array with
   the order of the elements reversed."
      ["return"]=>
      string(27) "Returns the reversed array."
      ["parameters"]=>
      array(2) {
        ["array"]=>
        string(16) "The input array."
        ["preserve_keys"]=>
        string(130) "If set to TRUE numeric keys are preserved. 
       Non-numeric keys are not affected by this setting and will always be preserved."
      }
      ["flatparameters"]=>
      string(20) "array, preserve_keys"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [34]=>
    array(13) {
      ["name"]=>
      string(12) "array_search"
      ["summary"]=>
      string(90) "Searches the array for a given value and returns the first corresponding key if successful"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.5, PHP 5, PHP 7)"
      ["signature"]=>
      string(80) "mixed array_search ( mixed $needle , array $haystack [, bool $strict = false ] )"
      ["anonsig"]=>
      string(74) "mixed ?????? ( mixed $needle , array $haystack [, bool $strict = false ] )"
      ["description"]=>
      string(29) "Searches haystack for needle."
      ["return"]=>
      string(510) "Returns the key for needle if it is found in the
   array, FALSE otherwise.
If needle is found in haystack
   more than once, the first matching key is returned. To return the keys for
   all matching values, use array_keys() with the optional
   search_value parameter instead.
This function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function."
      ["parameters"]=>
      array(3) {
        ["needle"]=>
        string(137) "The searched value.
      
      Note: 
       
        If needle is a string, the comparison is done
        in a case-sensitive manner."
        ["haystack"]=>
        string(10) "The array."
        ["strict"]=>
        string(298) "If the third parameter strict is set to TRUE
       then the array_search() function will search for
       identical elements in the
       haystack. This means it will also perform a
       strict type comparison of the
       needle in the haystack,
       and objects must be the same instance."
      }
      ["flatparameters"]=>
      string(24) "needle, haystack, strict"
      ["notes"]=>
      string(104) "Note: 
       
        If needle is a string, the comparison is done
        in a case-sensitive manner."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(238) "WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function."
      ["changelog"]=>
      array(1) {
        ["5.3.0"]=>
        string(131) "As with all internal PHP functions as of 5.3.0,
        array_search() returns NULL if invalid parameters
        are passed to it."
      }
    }
    [35]=>
    array(13) {
      ["name"]=>
      string(11) "array_shift"
      ["summary"]=>
      string(43) "Shift an element off the beginning of array"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(35) "mixed array_shift ( array &$array )"
      ["anonsig"]=>
      string(30) "mixed ?????? ( array &$array )"
      ["description"]=>
      string(333) "array_shift() shifts the first value of the
   array off and returns it, shortening the
   array by one element and moving everything
   down. All numerical array keys will be modified to start counting from zero
   while literal keys won't be touched.
Note: This function will
reset() the array pointer of the input array after
use."
      ["return"]=>
      string(75) "Returns the shifted value, or NULL if array is
   empty or is not an array."
      ["parameters"]=>
      array(1) {
        ["array"]=>
        string(16) "The input array."
      }
      ["flatparameters"]=>
      string(5) "array"
      ["notes"]=>
      string(80) "Note: This function will
reset() the array pointer of the input array after
use."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [36]=>
    array(13) {
      ["name"]=>
      string(11) "array_slice"
      ["summary"]=>
      string(28) "Extract a slice of the array"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(104) "array array_slice ( array $array , int $offset [, int $length = NULL [, bool $preserve_keys = false ]] )"
      ["anonsig"]=>
      string(99) "array ?????? ( array $array , int $offset [, int $length = NULL [, bool $preserve_keys = false ]] )"
      ["description"]=>
      string(126) "array_slice() returns the sequence of elements
   from the array array as specified by the
   offset and length
   parameters."
      ["return"]=>
      string(98) "Returns the slice. If the offset is larger than the size of the array then returns an empty array."
      ["parameters"]=>
      array(4) {
        ["array"]=>
        string(16) "The input array."
        ["offset"]=>
        string(184) "If offset is non-negative, the sequence will
       start at that offset in the array.  If
       offset is negative, the sequence will
       start that far from the end of the array."
        ["length"]=>
        string(457) "If length is given and is positive, then
       the sequence will have up to that many elements in it. If the array
       is shorter than the length, then only the
       available array elements will be present. If
       length is given and is negative then the
       sequence will stop that many elements from the end of the
       array. If it is omitted, then the sequence will have everything
       from offset up until the end of the
       array."
        ["preserve_keys"]=>
        string(162) "Note that array_slice() will reorder and reset the
       numeric array indices by default. You can change this behaviour by setting
       preserve_keys to TRUE."
      }
      ["flatparameters"]=>
      string(36) "array, offset, length, preserve_keys"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(2) {
        ["5.2.4"]=>
        string(224) "The default value of the length parameter was changed to NULL. A NULL length now tells the function to use the length of array. Prior to this version, a NULL length was taken to mean a zero length (nothing will be returned)."
        ["5.0.2"]=>
        string(47) "The optional preserve_keys parameter was added."
      }
    }
    [37]=>
    array(13) {
      ["name"]=>
      string(12) "array_splice"
      ["summary"]=>
      string(64) "Remove a portion of the array and replace it with something else"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(116) "array array_splice ( array &$input , int $offset [, int $length = count($input) [, mixed $replacement = array() ]] )"
      ["anonsig"]=>
      string(110) "array ?????? ( array &$input , int $offset [, int $length = count($input) [, mixed $replacement = array() ]] )"
      ["description"]=>
      string(405) "Removes the elements designated by offset and
   length from the input array,
   and replaces them with the elements of the
   replacement array, if supplied.
Note that numeric keys in input are not preserved.
Note: 
   
    If replacement is not an array, it will be
    typecast
    to one (i.e. (array) $replacement). This may result in unexpected
    behavior when using an object or NULL replacement."
      ["return"]=>
      string(54) "Returns an array consisting of the extracted elements."
      ["parameters"]=>
      array(4) {
        ["input"]=>
        string(16) "The input array."
        ["offset"]=>
        string(220) "If offset is positive then the start of removed
       portion is at that offset from the beginning of the
       input array.  If offset
       is negative then it starts that far from the end of the
       input array."
        ["length"]=>
        string(564) "If length is omitted, removes everything
       from offset to the end of the array. If
       length is specified and is positive, then
       that many elements will be removed. If
       length is specified and is negative then
       the end of the removed portion will be that many elements from
       the end of the array. If length is
       specified and is zero, no elements will be removed.
       Tip: to remove everything from
       offset to the end of the array when
       replacement is also specified, use
       count($input) for
       length."
        ["replacement"]=>
        string(540) "If replacement array is specified, then the
       removed elements are replaced with elements from this array.
      
      
       If offset and length
       are such that nothing is removed, then the elements from the
       replacement array are inserted in the place
       specified by the offset. Note that keys in
       replacement array are not preserved.
      
      
       If replacement is just one element it is
       not necessary to put array()
       around it, unless the element is an array itself, an object or NULL."
      }
      ["flatparameters"]=>
      string(34) "input, offset, length, replacement"
      ["notes"]=>
      string(195) "Note: 
   
    If replacement is not an array, it will be
    typecast
    to one (i.e. (array) $replacement). This may result in unexpected
    behavior when using an object or NULL replacement."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [38]=>
    array(13) {
      ["name"]=>
      string(9) "array_sum"
      ["summary"]=>
      string(39) "Calculate the sum of values in an array"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.4, PHP 5, PHP 7)"
      ["signature"]=>
      string(33) "number array_sum ( array $array )"
      ["anonsig"]=>
      string(30) "number ?????? ( array $array )"
      ["description"]=>
      string(50) "array_sum() returns the sum of values in an array."
      ["return"]=>
      string(77) "Returns the sum of values as an integer or float; 0 if the
   array is empty."
      ["parameters"]=>
      array(1) {
        ["array"]=>
        string(16) "The input array."
      }
      ["flatparameters"]=>
      string(5) "array"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [39]=>
    array(13) {
      ["name"]=>
      string(17) "array_udiff_assoc"
      ["summary"]=>
      string(99) "Computes the difference of arrays with additional index check, compares data by a callback function"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(103) "array array_udiff_assoc ( array $array1 , array $array2 [, array $... ], callable $value_compare_func )"
      ["anonsig"]=>
      string(92) "array ?????? ( array $array1 , array $array2 [, array $... ], callable $value_compare_func )"
      ["description"]=>
      string(342) "Computes the difference of arrays with additional index check, compares
   data by a callback function.
Note: 
   
    Please note that this function only checks one dimension of a n-dimensional
    array. Of course you can check deeper dimensions by using, for example,
    array_udiff_assoc($array1[0], $array2[0], "some_comparison_func");."
      ["return"]=>
      string(440) "array_udiff_assoc() returns an array
   containing all the values from array1
   that are not present in any of the other arguments.
   Note that the keys are used in the comparison unlike
   array_diff() and array_udiff().
   The comparison of arrays' data is performed by using an user-supplied
   callback. In this aspect the behaviour is opposite to the behaviour of
   array_diff_assoc() which uses internal function for
   comparison."
      ["parameters"]=>
      array(3) {
        ["array1"]=>
        string(16) "The first array."
        ["array2"]=>
        string(17) "The second array."
        ["value_compare_func"]=>
        string(336) "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.
Note that before PHP 7.0.0 this integer had to be in the range from -2147483648 to 2147483647.
      
      int callback ( mixed $a, mixed $b )"
      }
      ["flatparameters"]=>
      string(34) "array1, array2, value_compare_func"
      ["notes"]=>
      string(238) "Note: 
   
    Please note that this function only checks one dimension of a n-dimensional
    array. Of course you can check deeper dimensions by using, for example,
    array_udiff_assoc($array1[0], $array2[0], "some_comparison_func");."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [40]=>
    array(13) {
      ["name"]=>
      string(18) "array_udiff_uassoc"
      ["summary"]=>
      string(111) "Computes the difference of arrays with additional index check, compares data and indexes by a callback function"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(133) "array array_udiff_uassoc ( array $array1 , array $array2 [, array $... ], callable $value_compare_func , callable $key_compare_func )"
      ["anonsig"]=>
      string(121) "array ?????? ( array $array1 , array $array2 [, array $... ], callable $value_compare_func , callable $key_compare_func )"
      ["description"]=>
      string(203) "Computes the difference of arrays with additional index check, compares
   data and indexes by a callback function.
Note that the keys are used in the comparison unlike
   array_diff() and array_udiff()."
      ["return"]=>
      string(112) "Returns an array containing all the values from
   array1 that are not present in any of the other
   arguments."
      ["parameters"]=>
      array(4) {
        ["array1"]=>
        string(16) "The first array."
        ["array2"]=>
        string(17) "The second array."
        ["value_compare_func"]=>
        string(336) "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.
Note that before PHP 7.0.0 this integer had to be in the range from -2147483648 to 2147483647.
      
      int callback ( mixed $a, mixed $b )"
        ["key_compare_func"]=>
        string(234) "The comparison of keys (indices) is done also by the callback function
       key_compare_func. This behaviour is unlike what
       array_udiff_assoc() does, since the latter compares
       the indices by using an internal function."
      }
      ["flatparameters"]=>
      string(52) "array1, array2, value_compare_func, key_compare_func"
      ["notes"]=>
      string(260) "Note: 
   
    Please note that this function only checks one dimension of a n-dimensional
    array. Of course you can check deeper dimensions by using, for example,
    array_udiff_uassoc($array1[0], $array2[0], "data_compare_func",
    "key_compare_func");."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [41]=>
    array(13) {
      ["name"]=>
      string(11) "array_udiff"
      ["summary"]=>
      string(82) "Computes the difference of arrays by using a callback function for data comparison"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(97) "array array_udiff ( array $array1 , array $array2 [, array $... ], callable $value_compare_func )"
      ["anonsig"]=>
      string(92) "array ?????? ( array $array1 , array $array2 [, array $... ], callable $value_compare_func )"
      ["description"]=>
      string(173) "Computes the difference of arrays by using a callback function for data
   comparison. This is unlike array_diff() which uses an
   internal function for comparing the data."
      ["return"]=>
      string(107) "Returns an array containing all the values of array1
   that are not present in any of the other arguments."
      ["parameters"]=>
      array(3) {
        ["array1"]=>
        string(16) "The first array."
        ["array2"]=>
        string(17) "The second array."
        ["value_compare_func"]=>
        string(391) "The callback comparison function.
      
      
       The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.
Note that before PHP 7.0.0 this integer had to be in the range from -2147483648 to 2147483647.
      
      int callback ( mixed $a, mixed $b )"
      }
      ["flatparameters"]=>
      string(34) "array1, array2, value_compare_func"
      ["notes"]=>
      string(215) "Note: 
   
    Please note that this function only checks one dimension of a n-dimensional
    array. Of course you can check deeper dimensions by using
    array_udiff($array1[0], $array2[0], "data_compare_func");."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [42]=>
    array(13) {
      ["name"]=>
      string(22) "array_uintersect_assoc"
      ["summary"]=>
      string(101) "Computes the intersection of arrays with additional index check, compares data by a callback function"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(108) "array array_uintersect_assoc ( array $array1 , array $array2 [, array $... ], callable $value_compare_func )"
      ["anonsig"]=>
      string(92) "array ?????? ( array $array1 , array $array2 [, array $... ], callable $value_compare_func )"
      ["description"]=>
      string(238) "Computes the intersection of arrays with additional index check, compares
   data by a callback function.
Note that the keys are used in the comparison unlike in
   array_uintersect().
   The data is compared by using a callback function."
      ["return"]=>
      string(94) "Returns an array containing all the values of
   array1 that are present in all the arguments."
      ["parameters"]=>
      array(3) {
        ["array1"]=>
        string(16) "The first array."
        ["array2"]=>
        string(17) "The second array."
        ["value_compare_func"]=>
        string(336) "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.
Note that before PHP 7.0.0 this integer had to be in the range from -2147483648 to 2147483647.
      
      int callback ( mixed $a, mixed $b )"
      }
      ["flatparameters"]=>
      string(34) "array1, array2, value_compare_func"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [43]=>
    array(13) {
      ["name"]=>
      string(23) "array_uintersect_uassoc"
      ["summary"]=>
      string(121) "Computes the intersection of arrays with additional index check, compares data and indexes by separate callback functions"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(138) "array array_uintersect_uassoc ( array $array1 , array $array2 [, array $... ], callable $value_compare_func , callable $key_compare_func )"
      ["anonsig"]=>
      string(121) "array ?????? ( array $array1 , array $array2 [, array $... ], callable $value_compare_func , callable $key_compare_func )"
      ["description"]=>
      string(125) "Computes the intersection of arrays with additional index check, compares
   data and indexes by separate callback functions."
      ["return"]=>
      string(94) "Returns an array containing all the values of
   array1 that are present in all the arguments."
      ["parameters"]=>
      array(4) {
        ["array1"]=>
        string(16) "The first array."
        ["array2"]=>
        string(17) "The second array."
        ["value_compare_func"]=>
        string(336) "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.
Note that before PHP 7.0.0 this integer had to be in the range from -2147483648 to 2147483647.
      
      int callback ( mixed $a, mixed $b )"
        ["key_compare_func"]=>
        string(33) "Key comparison callback function."
      }
      ["flatparameters"]=>
      string(52) "array1, array2, value_compare_func, key_compare_func"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [44]=>
    array(13) {
      ["name"]=>
      string(16) "array_uintersect"
      ["summary"]=>
      string(73) "Computes the intersection of arrays, compares data by a callback function"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(102) "array array_uintersect ( array $array1 , array $array2 [, array $... ], callable $value_compare_func )"
      ["anonsig"]=>
      string(92) "array ?????? ( array $array1 , array $array2 [, array $... ], callable $value_compare_func )"
      ["description"]=>
      string(74) "Computes the intersection of arrays, compares data by a callback function."
      ["return"]=>
      string(94) "Returns an array containing all the values of array1
   that are present in all the arguments."
      ["parameters"]=>
      array(3) {
        ["array1"]=>
        string(16) "The first array."
        ["array2"]=>
        string(17) "The second array."
        ["value_compare_func"]=>
        string(336) "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.
Note that before PHP 7.0.0 this integer had to be in the range from -2147483648 to 2147483647.
      
      int callback ( mixed $a, mixed $b )"
      }
      ["flatparameters"]=>
      string(34) "array1, array2, value_compare_func"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [45]=>
    array(13) {
      ["name"]=>
      string(12) "array_unique"
      ["summary"]=>
      string(38) "Removes duplicate values from an array"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.1, PHP 5, PHP 7)"
      ["signature"]=>
      string(70) "array array_unique ( array $array [, int $sort_flags = SORT_STRING ] )"
      ["anonsig"]=>
      string(64) "array ?????? ( array $array [, int $sort_flags = SORT_STRING ] )"
      ["description"]=>
      string(549) "Takes an input array and returns a new array
   without duplicate values.
Note that keys are preserved. array_unique() sorts
   the values treated as string at first, then will keep the first key
   encountered for every value, and ignore all following keys. It does not
   mean that the key of the first related value from the unsorted
   array will be kept.
Note: 
   
    Two elements are considered equal if and only if
    (string) $elem1 === (string) $elem2 i.e. 
    when the string representation is the same, the first element will be used."
      ["return"]=>
      string(27) "Returns the filtered array."
      ["parameters"]=>
      array(2) {
        ["array"]=>
        string(16) "The input array."
        ["sort_flags"]=>
        string(483) "The optional second parameter sort_flags
       may be used to modify the sorting behavior using these values:
      
      
       Sorting type flags:
       
         SORT_REGULAR - compare items normally
         (don't change types)
        
        
         SORT_NUMERIC - compare items numerically
        
        
         SORT_STRING - compare items as strings
        
        
         SORT_LOCALE_STRING - compare items as
          strings, based on the current locale."
      }
      ["flatparameters"]=>
      string(17) "array, sort_flags"
      ["notes"]=>
      string(287) "Note: 
   
    Two elements are considered equal if and only if
    (string) $elem1 === (string) $elem2 i.e. 
    when the string representation is the same, the first element will be used.
Note: 
   
    Note that array_unique() is not intended to 
    work on multi dimensional arrays."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(2) {
        ["5.2.10"]=>
        string(68) "Changed the default value of sort_flags back to
        SORT_STRING."
        ["5.2.9"]=>
        string(155) "Added the optional sort_flags defaulting
        to SORT_REGULAR. Prior to 5.2.9, this function used to sort
        the array with SORT_STRING internally."
      }
    }
    [46]=>
    array(13) {
      ["name"]=>
      string(13) "array_unshift"
      ["summary"]=>
      string(57) "Prepend one or more elements to the beginning of an array"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(67) "int array_unshift ( array &$array , mixed $value1 [, mixed $... ] )"
      ["anonsig"]=>
      string(60) "int ?????? ( array &$array , mixed $value1 [, mixed $... ] )"
      ["description"]=>
      string(298) "array_unshift() prepends passed elements to the front
   of the array. Note that the list of elements is
   prepended as a whole, so that the prepended elements stay in the same
   order.  All numerical array keys will be modified to start counting from
   zero while literal keys won't be changed."
      ["return"]=>
      string(48) "Returns the new number of elements in the array."
      ["parameters"]=>
      array(2) {
        ["array"]=>
        string(16) "The input array."
        ["value1"]=>
        string(23) "First value to prepend."
      }
      ["flatparameters"]=>
      string(13) "array, value1"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [47]=>
    array(13) {
      ["name"]=>
      string(12) "array_values"
      ["summary"]=>
      string(33) "Return all the values of an array"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(35) "array array_values ( array $array )"
      ["anonsig"]=>
      string(29) "array ?????? ( array $array )"
      ["description"]=>
      string(90) "array_values() returns all the values from the
   array and indexes the array numerically."
      ["return"]=>
      string(35) "Returns an indexed array of values."
      ["parameters"]=>
      array(1) {
        ["array"]=>
        string(10) "The array."
      }
      ["flatparameters"]=>
      string(5) "array"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [48]=>
    array(13) {
      ["name"]=>
      string(20) "array_walk_recursive"
      ["summary"]=>
      string(61) "Apply a user function recursively to every member of an array"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(92) "bool array_walk_recursive ( array &$array , callable $callback [, mixed $userdata = NULL ] )"
      ["anonsig"]=>
      string(78) "bool ?????? ( array &$array , callable $callback [, mixed $userdata = NULL ] )"
      ["description"]=>
      string(125) "Applies the user-defined callback function to each
   element of the array. This function will recurse
   into deeper arrays."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(3) {
        ["array"]=>
        string(16) "The input array."
        ["callback"]=>
        string(414) "Typically, callback takes on two parameters.
       The array parameter's value being the first, and
       the key/index second.
      
      Note: 
       
        If callback needs to be working with the
        actual values of the array, specify the first parameter of
        callback as a
        reference. Then,
        any changes made to those elements will be made in the
        original array itself."
        ["userdata"]=>
        string(119) "If the optional userdata parameter is supplied,
       it will be passed as the third parameter to the
       callback."
      }
      ["flatparameters"]=>
      string(25) "array, callback, userdata"
      ["notes"]=>
      string(271) "Note: 
       
        If callback needs to be working with the
        actual values of the array, specify the first parameter of
        callback as a
        reference. Then,
        any changes made to those elements will be made in the
        original array itself."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [49]=>
    array(13) {
      ["name"]=>
      string(10) "array_walk"
      ["summary"]=>
      string(58) "Apply a user supplied function to every member of an array"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(82) "bool array_walk ( array &$array , callable $callback [, mixed $userdata = NULL ] )"
      ["anonsig"]=>
      string(78) "bool ?????? ( array &$array , callable $callback [, mixed $userdata = NULL ] )"
      ["description"]=>
      string(237) "Applies the user-defined callback function to each
   element of the array array.
array_walk() is not affected by the internal array
   pointer of array.  array_walk()
   will walk through the entire array regardless of pointer position."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(3) {
        ["array"]=>
        string(16) "The input array."
        ["callback"]=>
        string(993) "Typically, callback takes on two parameters.
       The array parameter's value being the first, and
       the key/index second.
      
      Note: 
       
        If callback needs to be working with the
        actual values of the array, specify the first parameter of
        callback as a
        reference. Then,
        any changes made to those elements will be made in the
        original array itself.
       
      
      Note: 
        
          Many internal functions (for example strtolower())
          will throw a warning if more than the expected number of argument
          are passed in and are not usable directly as a
          callback.
        
      
      
       Only the values of the array may potentially be
       changed; its structure cannot be altered, i.e., the programmer cannot
       add, unset or reorder elements. If the callback does not respect this
       requirement, the behavior of this function is undefined, and      
       unpredictable."
        ["userdata"]=>
        string(119) "If the optional userdata parameter is supplied,
       it will be passed as the third parameter to the
       callback."
      }
      ["flatparameters"]=>
      string(25) "array, callback, userdata"
      ["notes"]=>
      string(501) "Note: 
       
        If callback needs to be working with the
        actual values of the array, specify the first parameter of
        callback as a
        reference. Then,
        any changes made to those elements will be made in the
        original array itself.
Note: 
        
          Many internal functions (for example strtolower())
          will throw a warning if more than the expected number of argument
          are passed in and are not usable directly as a
          callback."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [50]=>
    array(13) {
      ["name"]=>
      string(5) "array"
      ["summary"]=>
      string(15) "Create an array"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(29) "array array ([ mixed $... ] )"
      ["anonsig"]=>
      string(30) "array ?????? ([ mixed $... ] )"
      ["description"]=>
      string(100) "Creates an array. Read the section on the
   array type for more information
   on what an array is."
      ["return"]=>
      string(182) "Returns an array of the parameters.  The parameters can be given
   an index with the => operator.  Read the section
   on the array type for more
   information on what an array is."
      ["parameters"]=>
      array(1) {
        ["..."]=>
        string(513) "Syntax "index => values", separated by commas, define index
       and values. index may be of type string or integer. When index is
       omitted, an integer index is automatically generated, starting
       at 0. If index is an integer, next generated index will
       be the biggest integer index + 1. Note that when two identical
       index are defined, the last overwrite the first.
      
      
       Having a trailing comma after the last defined array entry, while
       unusual, is a valid syntax."
      }
      ["flatparameters"]=>
      string(3) "..."
      ["notes"]=>
      string(115) "Note: 
    
     array() is a language construct used to
     represent literal arrays, and not a regular function."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [51]=>
    array(13) {
      ["name"]=>
      string(6) "arsort"
      ["summary"]=>
      string(61) "Sort an array in reverse order and maintain index association"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(65) "bool arsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )"
      ["anonsig"]=>
      string(65) "bool ?????? ( array &$array [, int $sort_flags = SORT_REGULAR ] )"
      ["description"]=>
      string(328) "This function sorts an array such that array indices maintain their
   correlation with the array elements they are associated with.
This is used mainly when sorting associative arrays where the actual
   element order is significant.
Note:
If two members compare as equal, their relative order in the sorted array is undefined."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(2) {
        ["array"]=>
        string(16) "The input array."
        ["sort_flags"]=>
        string(118) "You may modify the behavior of the sort using the optional parameter
       sort_flags, for details see
       sort()."
      }
      ["flatparameters"]=>
      string(17) "array, sort_flags"
      ["notes"]=>
      string(98) "Note: 
 
  If two members compare as equal, their relative order in the sorted array is undefined."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [52]=>
    array(13) {
      ["name"]=>
      string(5) "asort"
      ["summary"]=>
      string(44) "Sort an array and maintain index association"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(64) "bool asort ( array &$array [, int $sort_flags = SORT_REGULAR ] )"
      ["anonsig"]=>
      string(65) "bool ?????? ( array &$array [, int $sort_flags = SORT_REGULAR ] )"
      ["description"]=>
      string(332) "This function sorts an array such that array indices maintain
   their correlation with the array elements they are associated
   with.  This is used mainly when sorting associative arrays where
   the actual element order is significant.
Note:
If two members compare as equal, their relative order in the sorted array is undefined."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(2) {
        ["array"]=>
        string(16) "The input array."
        ["sort_flags"]=>
        string(118) "You may modify the behavior of the sort using the optional
       parameter sort_flags, for details
       see sort()."
      }
      ["flatparameters"]=>
      string(17) "array, sort_flags"
      ["notes"]=>
      string(98) "Note: 
 
  If two members compare as equal, their relative order in the sorted array is undefined."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [53]=>
    array(13) {
      ["name"]=>
      string(7) "compact"
      ["summary"]=>
      string(50) "Create array containing variables and their values"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(49) "array compact ( mixed $varname1 [, mixed $... ] )"
      ["anonsig"]=>
      string(48) "array ?????? ( mixed $varname1 [, mixed $... ] )"
      ["description"]=>
      string(398) "Creates an array containing variables and their values.
For each of these, compact() looks for a
   variable with that name in the current symbol table and adds it
   to the output array such that the variable name becomes the key
   and the contents of the variable become the value for that key.
   In short, it does the opposite of extract().
Any strings that are not set will simply be skipped."
      ["return"]=>
      string(60) "Returns the output array with all the variables added to it."
      ["parameters"]=>
      array(1) {
        ["varname1"]=>
        string(281) "compact() takes a variable number of parameters.
       Each parameter can be either a string containing the name of the
       variable, or an array of variable names.  The array can contain other
       arrays of variable names inside it; compact()
       handles it recursively."
      }
      ["flatparameters"]=>
      string(8) "varname1"
      ["notes"]=>
      string(184) "Note: 
   Gotcha
    Because variable
    variables may not be used with PHP's
    Superglobal
    arrays within functions, the Superglobal arrays may not be passed
    into compact()."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [54]=>
    array(13) {
      ["name"]=>
      string(5) "count"
      ["summary"]=>
      string(57) "Count all elements in an array, or something in an object"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(69) "int count ( mixed $array_or_countable [, int $mode = COUNT_NORMAL ] )"
      ["anonsig"]=>
      string(70) "int ?????? ( mixed $array_or_countable [, int $mode = COUNT_NORMAL ] )"
      ["description"]=>
      string(415) "Counts all elements in an array, or something in an object.
For objects, if you have
   SPL installed, you can hook into
   count() by implementing interface
   Countable. The interface has exactly one method,
   Countable::count(), which returns the return value for the
   count() function.
Please see the Array
   section of the manual for a detailed explanation of how arrays
   are implemented and used in PHP."
      ["return"]=>
      string(440) "Returns the number of elements in array_or_countable.
   If the parameter is not an array or not an object with
   implemented Countable interface,
   1 will be returned.
   There is one exception, if array_or_countable is NULL,
   0 will be returned.
count() may return 0 for a variable that isn't set,
    but it may also return 0 for a variable that has been initialized with an
    empty array. Use isset() to test if a variable is set."
      ["parameters"]=>
      array(2) {
        ["array_or_countable"]=>
        string(29) "An array or Countable object."
        ["mode"]=>
        string(477) "If the optional mode parameter is set to
       COUNT_RECURSIVE (or 1), count()
       will recursively count the array.  This is particularly useful for
       counting all the elements of a multidimensional array.
      
      Caution
       
        count() can detect recursion to avoid an infinite
        loop, but will emit an E_WARNING every time it
        does (in case the array contains itself more than once) and return a
        count higher than may be expected."
      }
      ["flatparameters"]=>
      string(24) "array_or_countable, mode"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(453) "Caution
       
        count() can detect recursion to avoid an infinite
        loop, but will emit an E_WARNING every time it
        does (in case the array contains itself more than once) and return a
        count higher than may be expected.
Caution
   
    count() may return 0 for a variable that isn't set,
    but it may also return 0 for a variable that has been initialized with an
    empty array. Use isset() to test if a variable is set."
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [55]=>
    array(13) {
      ["name"]=>
      string(7) "current"
      ["summary"]=>
      string(38) "Return the current element in an array"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(31) "mixed current ( array &$array )"
      ["anonsig"]=>
      string(30) "mixed ?????? ( array &$array )"
      ["description"]=>
      string(134) "Every array has an internal pointer to its "current" element,
   which is initialized to the first element inserted into the
   array."
      ["return"]=>
      string(530) "The current() function simply returns the
   value of the array element that's currently being pointed to by the
   internal pointer.  It does not move the pointer in any way.  If the
   internal pointer points beyond the end of the elements list or the array is 
   empty, current() returns FALSE.
This function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function."
      ["parameters"]=>
      array(1) {
        ["array"]=>
        string(10) "The array."
      }
      ["flatparameters"]=>
      string(5) "array"
      ["notes"]=>
      string(198) "Note: 
   
    You won't be able to distinguish the end of an array from a
    boolean FALSE element. To properly traverse an array
    which may contain FALSE elements, see the each()
    function."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(238) "WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function."
      ["changelog"]=>
      array(0) {
      }
    }
    [56]=>
    array(13) {
      ["name"]=>
      string(4) "each"
      ["summary"]=>
      string(80) "Return the current key and value pair from an array and advance the array cursor"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(28) "array each ( array &$array )"
      ["anonsig"]=>
      string(30) "array ?????? ( array &$array )"
      ["description"]=>
      string(321) "Return the current key and value pair from an array and advance the array
   cursor.
After each() has executed, the array cursor
   will be left on the next element of the array, or past the last
   element if it hits the end of the array. You have to use
   reset() if you want to traverse the array
   again using each."
      ["return"]=>
      string(366) "Returns the current key and value pair from the array
   array. This pair is returned in a four-element
   array, with the keys 0, 1,
   key, and value. Elements
   0 and key contain the key name of
   the array element, and 1 and value
   contain the data.
If the internal pointer for the array points past the end of the
   array contents, each() returns
   FALSE."
      ["parameters"]=>
      array(1) {
        ["array"]=>
        string(16) "The input array."
      }
      ["flatparameters"]=>
      string(5) "array"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(217) "Caution
   
    Because assigning an array to another variable resets the original
    array's pointer, our example above would cause an endless loop had we
    assigned $fruit to another variable inside the
    loop."
      ["warnings"]=>
      string(279) "WarningThis function has been
DEPRECATED as of PHP 7.2.0. Relying on this function
is highly discouraged.
Warning
   
    each() will also accept objects, but may return unexpected 
    results. It's therefore not recommended to iterate though object properties 
    with each()."
      ["changelog"]=>
      array(0) {
      }
    }
    [57]=>
    array(13) {
      ["name"]=>
      string(3) "end"
      ["summary"]=>
      string(56) "Set the internal pointer of an array to its last element"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(27) "mixed end ( array &$array )"
      ["anonsig"]=>
      string(30) "mixed ?????? ( array &$array )"
      ["description"]=>
      string(86) "end() advances array's
   internal pointer to the last element, and returns its value."
      ["return"]=>
      string(63) "Returns the value of the last element or FALSE for empty array."
      ["parameters"]=>
      array(1) {
        ["array"]=>
        string(247) "The array.  This array is passed by reference because it is modified by
       the function.  This means you must pass it a real variable and not
       a function returning an array because only actual variables may be
       passed by reference."
      }
      ["flatparameters"]=>
      string(5) "array"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [58]=>
    array(13) {
      ["name"]=>
      string(7) "extract"
      ["summary"]=>
      string(60) "Import variables into the current symbol table from an array"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(88) "int extract ( array &$array [, int $flags = EXTR_OVERWRITE [, string $prefix = NULL ]] )"
      ["anonsig"]=>
      string(87) "int ?????? ( array &$array [, int $flags = EXTR_OVERWRITE [, string $prefix = NULL ]] )"
      ["description"]=>
      string(204) "Import variables from an array into the current symbol table.
Checks each key to see whether it has a valid variable name. 
   It also checks for collisions with existing variables in
   the symbol table."
      ["return"]=>
      string(79) "Returns the number of variables successfully imported into the symbol
   table."
      ["parameters"]=>
      array(3) {
        ["array"]=>
        string(415) "An associative array. This function treats keys as variable names and
       values as variable values.  For each key/value pair it will create a
       variable in the current symbol table, subject to
       flags and prefix parameters.
      
      
       You must use an associative array; a numerically indexed array
       will not produce results unless you use EXTR_PREFIX_ALL or
       EXTR_PREFIX_INVALID."
        ["flags"]=>
        string(2038) "The way invalid/numeric keys and collisions are treated is determined
       by the extraction flags. It can be one of the
       following values:
       
EXTR_OVERWRITE

         

          
           If there is a collision, overwrite the existing variable.
          
         

        
        
         
EXTR_SKIP

         

          
           If there is a collision, don't overwrite the existing
           variable.
          
         

        
        
         
EXTR_PREFIX_SAME

         

          If there is a collision, prefix the variable name with
           prefix.
          
         

        
        
         
EXTR_PREFIX_ALL

         

          
           Prefix all variable names with
           prefix.
          
         

        
        
         
EXTR_PREFIX_INVALID

         

          
           Only prefix invalid/numeric variable names with
           prefix.
          
         

        
        
         
EXTR_IF_EXISTS

         

          
           Only overwrite the variable if it already exists in the
           current symbol table, otherwise do nothing.  This is useful
           for defining a list of valid variables and then extracting
           only those variables you have defined out of
           $_REQUEST, for example.
          
         

        
        
         
EXTR_PREFIX_IF_EXISTS

         

          
           Only create prefixed variable names if the non-prefixed version
           of the same variable exists in the current symbol table.
          
         

        
        
         
EXTR_REFS

         

          
           Extracts variables as references. This effectively means that the
           values of the imported variables are still referencing the values of
           the array parameter. You can use this flag
           on its own or combine it with any other flag by OR'ing the
           flags.
          
         

        
       
       If flags is not specified, it is
       assumed to be EXTR_OVERWRITE."
        ["prefix"]=>
        string(347) "Note that prefix is only required if
       flags is EXTR_PREFIX_SAME,
       EXTR_PREFIX_ALL, EXTR_PREFIX_INVALID
       or EXTR_PREFIX_IF_EXISTS. If
       the prefixed result is not a valid variable name, it is not
       imported into the symbol table. Prefixes are automatically separated from
       the array key by an underscore character."
      }
      ["flatparameters"]=>
      string(20) "array, flags, prefix"
      ["notes"]=>
      string(1773) "Note: 
   
    If you still
    have register_globals
    and it is turned on, if you use extract()
    on $_FILES and
    specify EXTR_SKIP, you may be surprised at
    the results.
   
   Warning
    
     This is not recommended practice and is only documented here for
     completeness. The use
     of register_globals is
     deprecated and calling extract() on untrusted
     data such as $_FILES is, as noted above, a
     potential security risk. If you encounter this issue, it means
     that you are using at least two poor coding practices.
    
   
   

<?php/* Suppose that $testfile is the name of a file upload input   and that register_globals is turned on. */var_dump($testfile);extract($_FILES, EXTR_SKIP);var_dump($testfile);var_dump($testfile['tmp_name']);?>


   

   
    You might expect to see something like the following:
   
   

string(14) "/tmp/phpgCCPX8"
array(5) {
  ["name"]=>
  string(10) "somefile.txt"
  ["type"]=>
  string(24) "application/octet-stream"
  ["tmp_name"]=>
  string(14) "/tmp/phpgCCPX8"
  ["error"]=>
  int(0)
  ["size"]=>
  int(4208)
}
string(14) "/tmp/phpgCCPX8"

   
   
    However, you would instead see something like this:
   
   

string(14) "/tmp/phpgCCPX8"
string(14) "/tmp/phpgCCPX8"
string(1) "/"

   
   
    This is due to the fact that
    since register_globals is
    turned on, $testfile already exists in the
    global scope when extract() is called. And
    since EXTR_SKIP is
    specified, $testfile is not overwritten with
    the contents of the $_FILES array
    so $testfile remains a string.
    Because strings may
    be accessed using array syntax and the non-numeric string
    tmp_name is interpreted
    as 0, PHP
    sees $testfile['tmp_name']
    as $testfile[0]."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(786) "Warning
   
    Do not use extract() on untrusted data, like
    user input
    (i.e. $_GET, $_FILES, etc.).
    If you do, for example if you want to temporarily run old code that
    relied on register_globals,
    make sure you use one of the non-overwriting
    flags values such as
    EXTR_SKIP and be aware that you should extract
    in the same order that's defined in
    variables_order within the
    php.ini.
Warning
    
     This is not recommended practice and is only documented here for
     completeness. The use
     of register_globals is
     deprecated and calling extract() on untrusted
     data such as $_FILES is, as noted above, a
     potential security risk. If you encounter this issue, it means
     that you are using at least two poor coding practices."
      ["changelog"]=>
      array(0) {
      }
    }
    [59]=>
    array(13) {
      ["name"]=>
      string(8) "in_array"
      ["summary"]=>
      string(36) "Checks if a value exists in an array"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(75) "bool in_array ( mixed $needle , array $haystack [, bool $strict = FALSE ] )"
      ["anonsig"]=>
      string(73) "bool ?????? ( mixed $needle , array $haystack [, bool $strict = FALSE ] )"
      ["description"]=>
      string(77) "Searches haystack for needle using loose comparison 
   unless strict is set."
      ["return"]=>
      string(65) "Returns TRUE if needle is found in the array,
   FALSE otherwise."
      ["parameters"]=>
      array(3) {
        ["needle"]=>
        string(137) "The searched value.
      
      Note: 
       
        If needle is a string, the comparison is done
        in a case-sensitive manner."
        ["haystack"]=>
        string(10) "The array."
        ["strict"]=>
        string(151) "If the third parameter strict is set to TRUE
       then the in_array() function will also check the
       types of the
       needle in the haystack."
      }
      ["flatparameters"]=>
      string(24) "needle, haystack, strict"
      ["notes"]=>
      string(104) "Note: 
       
        If needle is a string, the comparison is done
        in a case-sensitive manner."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [60]=>
    array(12) {
      ["name"]=>
      string(10) "key_exists"
      ["summary"]=>
      string(27) "Alias of array_key_exists()"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.6, PHP 5, PHP 7)"
      ["signature"]=>
      string(49) "This function is an alias of: array_key_exists()."
      ["anonsig"]=>
      string(49) "This function is an alias of: array_key_exists()."
      ["description"]=>
      string(53) "This function is an alias of: 
   array_key_exists()."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [61]=>
    array(13) {
      ["name"]=>
      string(3) "key"
      ["summary"]=>
      string(25) "Fetch a key from an array"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(27) "mixed key ( array &$array )"
      ["anonsig"]=>
      string(30) "mixed ?????? ( array &$array )"
      ["description"]=>
      string(65) "key() returns the index element of the current array
   position."
      ["return"]=>
      string(287) "The key() function simply returns the
   key of the array element that's currently being pointed to by the
   internal pointer.  It does not move the pointer in any way.  If the
   internal pointer points beyond the end of the elements list or the array is 
   empty, key() returns NULL."
      ["parameters"]=>
      array(1) {
        ["array"]=>
        string(10) "The array."
      }
      ["flatparameters"]=>
      string(5) "array"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [62]=>
    array(13) {
      ["name"]=>
      string(6) "krsort"
      ["summary"]=>
      string(37) "Sort an array by key in reverse order"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(65) "bool krsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )"
      ["anonsig"]=>
      string(65) "bool ?????? ( array &$array [, int $sort_flags = SORT_REGULAR ] )"
      ["description"]=>
      string(126) "Sorts an array by key in reverse order, maintaining key to data
   correlations. This is useful mainly for associative arrays."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(2) {
        ["array"]=>
        string(16) "The input array."
        ["sort_flags"]=>
        string(118) "You may modify the behavior of the sort using the optional parameter
       sort_flags, for details see
       sort()."
      }
      ["flatparameters"]=>
      string(17) "array, sort_flags"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [63]=>
    array(13) {
      ["name"]=>
      string(5) "ksort"
      ["summary"]=>
      string(20) "Sort an array by key"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(64) "bool ksort ( array &$array [, int $sort_flags = SORT_REGULAR ] )"
      ["anonsig"]=>
      string(65) "bool ?????? ( array &$array [, int $sort_flags = SORT_REGULAR ] )"
      ["description"]=>
      string(109) "Sorts an array by key, maintaining key to data correlations. This is
   useful mainly for associative arrays."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(2) {
        ["array"]=>
        string(16) "The input array."
        ["sort_flags"]=>
        string(118) "You may modify the behavior of the sort using the optional
       parameter sort_flags, for details
       see sort()."
      }
      ["flatparameters"]=>
      string(17) "array, sort_flags"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [64]=>
    array(13) {
      ["name"]=>
      string(4) "list"
      ["summary"]=>
      string(41) "Assign variables as if they were an array"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(42) "array list ( mixed $var1 [, mixed $... ] )"
      ["anonsig"]=>
      string(44) "array ?????? ( mixed $var1 [, mixed $... ] )"
      ["description"]=>
      string(923) "Like array(), this is not really a function,
   but a language construct.  list() is used to
   assign a list of variables in one operation.
Note:
list() only works on numerical arrays and assumes
    the numerical indices start at 0.
In PHP 5, list() assigns the values starting with the
    right-most parameter. In PHP 7, list() starts with the
    left-most parameter.
If you are using plain variables, you don't have to worry about this. But
   if you are using arrays with indices you usually expect the order of the
   indices in the array the same you wrote in the list()
   from left to right, which is not the case in PHP 5, as it's assigned in the
   reverse order.
Generally speaking, it is advisable to avoid relying on a specific order
    of operation, as this may change again in the future.
Modification of the array during list() execution (e.g.
    using list($a, $b) = $b) results in undefined behavior."
      ["return"]=>
      string(27) "Returns the assigned array."
      ["parameters"]=>
      array(1) {
        ["var1"]=>
        string(11) "A variable."
      }
      ["flatparameters"]=>
      string(4) "var1"
      ["notes"]=>
      string(102) "Note: 
   
    list() only works on numerical arrays and assumes
    the numerical indices start at 0."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(743) "Warning
   
    In PHP 5, list() assigns the values starting with the
    right-most parameter. In PHP 7, list() starts with the
    left-most parameter.
   
   
   If you are using plain variables, you don't have to worry about this. But
   if you are using arrays with indices you usually expect the order of the
   indices in the array the same you wrote in the list()
   from left to right, which is not the case in PHP 5, as it's assigned in the
   reverse order.
   
   
    Generally speaking, it is advisable to avoid relying on a specific order
    of operation, as this may change again in the future.
Warning
   
    Modification of the array during list() execution (e.g.
    using list($a, $b) = $b) results in undefined behavior."
      ["changelog"]=>
      array(1) {
        ["7.0.0"]=>
        string(34) "Strings can no longer be unpacked."
      }
    }
    [65]=>
    array(13) {
      ["name"]=>
      string(11) "natcasesort"
      ["summary"]=>
      string(64) "Sort an array using a case insensitive "natural order" algorithm"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(34) "bool natcasesort ( array &$array )"
      ["anonsig"]=>
      string(29) "bool ?????? ( array &$array )"
      ["description"]=>
      string(352) "natcasesort() is a case insensitive version of
   natsort().
This function implements a sort algorithm that orders
   alphanumeric strings in the way a human being would while maintaining
   key/value associations.  This is described as a "natural ordering".
Note:
If two members compare as equal, their relative order in the sorted array is undefined."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(1) {
        ["array"]=>
        string(16) "The input array."
      }
      ["flatparameters"]=>
      string(5) "array"
      ["notes"]=>
      string(98) "Note: 
 
  If two members compare as equal, their relative order in the sorted array is undefined."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [66]=>
    array(13) {
      ["name"]=>
      string(7) "natsort"
      ["summary"]=>
      string(47) "Sort an array using a "natural order" algorithm"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(30) "bool natsort ( array &$array )"
      ["anonsig"]=>
      string(29) "bool ?????? ( array &$array )"
      ["description"]=>
      string(451) "This function implements a sort algorithm that orders alphanumeric strings
   in the way a human being would while maintaining key/value associations.
   This is described as a "natural ordering".  An example of the difference
   between this algorithm and the regular computer string sorting algorithms
   (used in sort()) can be seen in the example below.
Note:
If two members compare as equal, their relative order in the sorted array is undefined."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(1) {
        ["array"]=>
        string(16) "The input array."
      }
      ["flatparameters"]=>
      string(5) "array"
      ["notes"]=>
      string(98) "Note: 
 
  If two members compare as equal, their relative order in the sorted array is undefined."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.2.10"]=>
        string(81) "Zero padded numeric strings (e.g., '00005') now essentially ignore the 0 padding."
      }
    }
    [67]=>
    array(13) {
      ["name"]=>
      string(4) "next"
      ["summary"]=>
      string(40) "Advance the internal pointer of an array"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(28) "mixed next ( array &$array )"
      ["anonsig"]=>
      string(30) "mixed ?????? ( array &$array )"
      ["description"]=>
      string(249) "next() behaves like
   current(), with one difference.  It advances
   the internal array pointer one place forward before returning the
   element value.  That means it returns the next array value and
   advances the internal array pointer by one."
      ["return"]=>
      string(365) "Returns the array value in the next place that's pointed to by the
   internal array pointer, or FALSE if there are no more elements.
This function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function."
      ["parameters"]=>
      array(1) {
        ["array"]=>
        string(25) "The array being affected."
      }
      ["flatparameters"]=>
      string(5) "array"
      ["notes"]=>
      string(198) "Note: 
   
    You won't be able to distinguish the end of an array from a
    boolean FALSE element. To properly traverse an array
    which may contain FALSE elements, see the each()
    function."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(238) "WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function."
      ["changelog"]=>
      array(0) {
      }
    }
    [68]=>
    array(12) {
      ["name"]=>
      string(3) "pos"
      ["summary"]=>
      string(18) "Alias of current()"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(39) "This function is an alias of: current()"
      ["anonsig"]=>
      string(39) "This function is an alias of: current()"
      ["description"]=>
      string(43) "This function is an alias of: 
   current()"
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [69]=>
    array(13) {
      ["name"]=>
      string(4) "prev"
      ["summary"]=>
      string(33) "Rewind the internal array pointer"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(28) "mixed prev ( array &$array )"
      ["anonsig"]=>
      string(30) "mixed ?????? ( array &$array )"
      ["description"]=>
      string(150) "Rewind the internal array pointer.
prev() behaves just like next(),
   except it rewinds the internal array pointer one place instead of advancing it."
      ["return"]=>
      string(140) "Returns the array value in the previous place that's pointed to by
   the internal array pointer, or FALSE if there are no more
   elements."
      ["parameters"]=>
      array(1) {
        ["array"]=>
        string(16) "The input array."
      }
      ["flatparameters"]=>
      string(5) "array"
      ["notes"]=>
      string(204) "Note: 
   
    You won't be able to distinguish the beginning of an array from a
    boolean FALSE element. To properly traverse an array
    which may contain FALSE elements, see the each()
    function."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(238) "WarningThis function may
return Boolean FALSE, but may also return a non-Boolean value which
evaluates to FALSE. Please read the section on Booleans for more
information. Use the ===
operator for testing the return value of this
function."
      ["changelog"]=>
      array(0) {
      }
    }
    [70]=>
    array(13) {
      ["name"]=>
      string(5) "range"
      ["summary"]=>
      string(46) "Create an array containing a range of elements"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(63) "array range ( mixed $start , mixed $end [, number $step = 1 ] )"
      ["anonsig"]=>
      string(64) "array ?????? ( mixed $start , mixed $end [, number $step = 1 ] )"
      ["description"]=>
      string(47) "Create an array containing a range of elements."
      ["return"]=>
      string(61) "Returns an array of elements from start to
   end, inclusive."
      ["parameters"]=>
      array(3) {
        ["start"]=>
        string(28) "First value of the sequence."
        ["end"]=>
        string(57) "The sequence is ended upon reaching the
       end value."
        ["step"]=>
        string(200) "If a step value is given, it will be used as the
       increment between elements in the sequence.  step
       should be given as a positive number.  If not specified,
       step will default to 1."
      }
      ["flatparameters"]=>
      string(16) "start, end, step"
      ["notes"]=>
      string(152) "Note: 
   
    Character sequence values are limited to a length of one.  If a length greater
    than one is entered, only the first character is used."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [71]=>
    array(13) {
      ["name"]=>
      string(5) "reset"
      ["summary"]=>
      string(57) "Set the internal pointer of an array to its first element"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(29) "mixed reset ( array &$array )"
      ["anonsig"]=>
      string(30) "mixed ?????? ( array &$array )"
      ["description"]=>
      string(117) "reset() rewinds array's internal
   pointer to the first element and returns the value of the first array
   element."
      ["return"]=>
      string(80) "Returns the value of the first array element, or FALSE if the array is
   empty."
      ["parameters"]=>
      array(1) {
        ["array"]=>
        string(16) "The input array."
      }
      ["flatparameters"]=>
      string(5) "array"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [72]=>
    array(13) {
      ["name"]=>
      string(5) "rsort"
      ["summary"]=>
      string(30) "Sort an array in reverse order"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(64) "bool rsort ( array &$array [, int $sort_flags = SORT_REGULAR ] )"
      ["anonsig"]=>
      string(65) "bool ?????? ( array &$array [, int $sort_flags = SORT_REGULAR ] )"
      ["description"]=>
      string(160) "This function sorts an array in reverse order (highest to lowest).
Note:
If two members compare as equal, their relative order in the sorted array is undefined."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(2) {
        ["array"]=>
        string(16) "The input array."
        ["sort_flags"]=>
        string(118) "You may modify the behavior of the sort using the optional
       parameter sort_flags, for details see
       sort()."
      }
      ["flatparameters"]=>
      string(17) "array, sort_flags"
      ["notes"]=>
      string(261) "Note: 
 
  If two members compare as equal, their relative order in the sorted array is undefined.
Note: This function
assigns new keys to the elements in array.
It will remove any existing keys that may have been assigned, rather
than just reordering the keys."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [73]=>
    array(13) {
      ["name"]=>
      string(7) "shuffle"
      ["summary"]=>
      string(16) "Shuffle an array"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(30) "bool shuffle ( array &$array )"
      ["anonsig"]=>
      string(29) "bool ?????? ( array &$array )"
      ["description"]=>
      string(264) "This function shuffles (randomizes the order of the elements in) an array.
   It uses a pseudo random number generator that is not suitable for
   cryptographic purposes.
Note:
If two members compare as equal, their relative order in the sorted array is undefined."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(1) {
        ["array"]=>
        string(10) "The array."
      }
      ["flatparameters"]=>
      string(5) "array"
      ["notes"]=>
      string(261) "Note: 
 
  If two members compare as equal, their relative order in the sorted array is undefined.
Note: This function
assigns new keys to the elements in array.
It will remove any existing keys that may have been assigned, rather
than just reordering the keys."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["7.1.0"]=>
        string(144) "The internal randomization algorithm has been changed to use the » Mersenne Twister Random Number Generator instead of the libc rand function."
      }
    }
    [74]=>
    array(12) {
      ["name"]=>
      string(6) "sizeof"
      ["summary"]=>
      string(16) "Alias of count()"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(38) "This function is an alias of: count()."
      ["anonsig"]=>
      string(38) "This function is an alias of: count()."
      ["description"]=>
      string(42) "This function is an alias of: 
   count()."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [75]=>
    array(13) {
      ["name"]=>
      string(4) "sort"
      ["summary"]=>
      string(13) "Sort an array"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(63) "bool sort ( array &$array [, int $sort_flags = SORT_REGULAR ] )"
      ["anonsig"]=>
      string(65) "bool ?????? ( array &$array [, int $sort_flags = SORT_REGULAR ] )"
      ["description"]=>
      string(210) "This function sorts an array.  Elements will be arranged from
   lowest to highest when this function has completed.
Note:
If two members compare as equal, their relative order in the sorted array is undefined."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(2) {
        ["array"]=>
        string(16) "The input array."
        ["sort_flags"]=>
        string(893) "The optional second parameter sort_flags
       may be used to modify the sorting behavior using these values:
      
      
       Sorting type flags:
       
         SORT_REGULAR - compare items normally
         (don't change types)
        
        
         SORT_NUMERIC - compare items numerically
        
        
         SORT_STRING - compare items as strings
        
        
         
          SORT_LOCALE_STRING - compare items as
          strings, based on the current locale. It uses the locale,
          which can be changed using setlocale()
         
        
        
         
          SORT_NATURAL - compare items as strings
          using "natural ordering" like natsort()
         
        
        
         
          SORT_FLAG_CASE - can be combined
          (bitwise OR) with
          SORT_STRING or
          SORT_NATURAL to sort strings case-insensitively"
      }
      ["flatparameters"]=>
      string(17) "array, sort_flags"
      ["notes"]=>
      string(544) "Note: 
 
  If two members compare as equal, their relative order in the sorted array is undefined.
Note: This function
assigns new keys to the elements in array.
It will remove any existing keys that may have been assigned, rather
than just reordering the keys.
Note: 
   
    Like most PHP sorting functions, sort() uses an
    implementation of » Quicksort.
    The pivot is chosen in the middle of the partition resulting in an optimal
    time for already sorted arrays. This is however an implementation detail you
    shouldn't rely on."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(124) "Warning
   
    Be careful when sorting arrays with mixed types values because
    sort() can produce unpredictable results."
      ["changelog"]=>
      array(2) {
        ["5.4.0"]=>
        string(70) "Added support for SORT_NATURAL and
       SORT_FLAG_CASE as sort_flags"
        ["5.0.2"]=>
        string(24) "Added SORT_LOCALE_STRING"
      }
    }
    [76]=>
    array(13) {
      ["name"]=>
      string(6) "uasort"
      ["summary"]=>
      string(84) "Sort an array with a user-defined comparison function and maintain index association"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(60) "bool uasort ( array &$array , callable $value_compare_func )"
      ["anonsig"]=>
      string(60) "bool ?????? ( array &$array , callable $value_compare_func )"
      ["description"]=>
      string(373) "This function sorts an array such that array indices maintain their
   correlation with the array elements they are associated with, using a
   user-defined comparison function.
This is used mainly when sorting associative arrays where the actual
   element order is significant.
Note:
If two members compare as equal, their relative order in the sorted array is undefined."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(2) {
        ["array"]=>
        string(16) "The input array."
        ["value_compare_func"]=>
        string(82) "See usort() and uksort() for
       examples of user-defined comparison functions."
      }
      ["flatparameters"]=>
      string(25) "array, value_compare_func"
      ["notes"]=>
      string(98) "Note: 
 
  If two members compare as equal, their relative order in the sorted array is undefined."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [77]=>
    array(13) {
      ["name"]=>
      string(6) "uksort"
      ["summary"]=>
      string(62) "Sort an array by keys using a user-defined comparison function"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(58) "bool uksort ( array &$array , callable $key_compare_func )"
      ["anonsig"]=>
      string(58) "bool ?????? ( array &$array , callable $key_compare_func )"
      ["description"]=>
      string(295) "uksort() will sort the keys of an array using a
   user-supplied comparison function.  If the array you wish to sort
   needs to be sorted by some non-trivial criteria, you should use
   this function.
Note:
If two members compare as equal, their relative order in the sorted array is undefined."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(2) {
        ["array"]=>
        string(16) "The input array."
        ["key_compare_func"]=>
        string(336) "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.
Note that before PHP 7.0.0 this integer had to be in the range from -2147483648 to 2147483647.
      
      int callback ( mixed $a, mixed $b )"
      }
      ["flatparameters"]=>
      string(23) "array, key_compare_func"
      ["notes"]=>
      string(98) "Note: 
 
  If two members compare as equal, their relative order in the sorted array is undefined."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [78]=>
    array(13) {
      ["name"]=>
      string(5) "usort"
      ["summary"]=>
      string(64) "Sort an array by values using a user-defined comparison function"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(59) "bool usort ( array &$array , callable $value_compare_func )"
      ["anonsig"]=>
      string(60) "bool ?????? ( array &$array , callable $value_compare_func )"
      ["description"]=>
      string(462) "This function will sort an array by its values using a user-supplied
   comparison function.  If the array you wish to sort needs to be sorted by
   some non-trivial criteria, you should use this function.
Note:
If two members compare as equal, their relative order in the sorted array is undefined.
Note: This function
assigns new keys to the elements in array.
It will remove any existing keys that may have been assigned, rather
than just reordering the keys."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(2) {
        ["array"]=>
        string(16) "The input array."
        ["value_compare_func"]=>
        string(664) "The comparison function must return an integer less than, equal to, or greater than zero if the first argument is considered to be respectively less than, equal to, or greater than the second.
Note that before PHP 7.0.0 this integer had to be in the range from -2147483648 to 2147483647.
      
      int callback ( mixed $a, mixed $b )

      Caution
       
        Returning non-integer values from the comparison
        function, such as float, will result in an internal cast to
        integer of the callback's return value. So values such as
        0.99 and 0.1 will both be cast to an integer value of 0, which will
        compare such values as equal."
      }
      ["flatparameters"]=>
      string(25) "array, value_compare_func"
      ["notes"]=>
      string(358) "Note: 
 
  If two members compare as equal, their relative order in the sorted array is undefined.
Note: This function
assigns new keys to the elements in array.
It will remove any existing keys that may have been assigned, rather
than just reordering the keys.
Note: 
   
    Obviously in this trivial case the sort()
    function would be more appropriate."
      ["cautions"]=>
      string(320) "Caution
       
        Returning non-integer values from the comparison
        function, such as float, will result in an internal cast to
        integer of the callback's return value. So values such as
        0.99 and 0.1 will both be cast to an integer value of 0, which will
        compare such values as equal."
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
  }
  ["Input / output"]=>
  array(47) {
    [0]=>
    array(12) {
      ["name"]=>
      string(19) "set_socket_blocking"
      ["summary"]=>
      string(30) "Alias of stream_set_blocking()"
      ["versions"]=>
      string(14) "(PHP 4, PHP 5)"
      ["signature"]=>
      string(51) "This function is an alias of: stream_set_blocking()"
      ["anonsig"]=>
      string(51) "This function is an alias of: stream_set_blocking()"
      ["description"]=>
      string(55) "This function is an alias of: 
   stream_set_blocking()"
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(75) "WarningThis alias was
DEPRECATED in PHP 5.3.0, and REMOVED as of PHP 7.0.0."
      ["changelog"]=>
      array(0) {
      }
    }
    [1]=>
    array(12) {
      ["name"]=>
      string(20) "stream_bucket_append"
      ["summary"]=>
      string(24) "Append bucket to brigade"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(64) "void stream_bucket_append ( resource $brigade , object $bucket )"
      ["anonsig"]=>
      string(50) "void ?????? ( resource $brigade , object $bucket )"
      ["description"]=>
      string(79) "This function is
currently not documented; only its argument list is available."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(86) "WarningThis function is
currently not documented; only its argument list is available."
      ["changelog"]=>
      array(0) {
      }
    }
    [2]=>
    array(12) {
      ["name"]=>
      string(28) "stream_bucket_make_writeable"
      ["summary"]=>
      string(56) "Return a bucket object from the brigade for operating on"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(57) "object stream_bucket_make_writeable ( resource $brigade )"
      ["anonsig"]=>
      string(35) "object ?????? ( resource $brigade )"
      ["description"]=>
      string(79) "This function is
currently not documented; only its argument list is available."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(86) "WarningThis function is
currently not documented; only its argument list is available."
      ["changelog"]=>
      array(0) {
      }
    }
    [3]=>
    array(12) {
      ["name"]=>
      string(17) "stream_bucket_new"
      ["summary"]=>
      string(49) "Create a new bucket for use on the current stream"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(62) "object stream_bucket_new ( resource $stream , string $buffer )"
      ["anonsig"]=>
      string(51) "object ?????? ( resource $stream , string $buffer )"
      ["description"]=>
      string(79) "This function is
currently not documented; only its argument list is available."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(86) "WarningThis function is
currently not documented; only its argument list is available."
      ["changelog"]=>
      array(0) {
      }
    }
    [4]=>
    array(13) {
      ["name"]=>
      string(21) "stream_bucket_prepend"
      ["summary"]=>
      string(25) "Prepend bucket to brigade"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(65) "void stream_bucket_prepend ( resource $brigade , object $bucket )"
      ["anonsig"]=>
      string(50) "void ?????? ( resource $brigade , object $bucket )"
      ["description"]=>
      string(127) "This function can be called to prepend a bucket to a bucket brigade. It
    is typically called from php_user_filter::filter()."
      ["return"]=>
      string(21) "No value is returned."
      ["parameters"]=>
      array(2) {
        ["brigade"]=>
        string(99) "brigade is a resource pointing to a bucket brigade
      which contains one or more bucket objects."
        ["bucket"]=>
        string(16) "A bucket object."
      }
      ["flatparameters"]=>
      string(15) "brigade, bucket"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [5]=>
    array(13) {
      ["name"]=>
      string(21) "stream_context_create"
      ["summary"]=>
      string(24) "Creates a stream context"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.3.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(70) "resource stream_context_create ([ array $options [, array $params ]] )"
      ["anonsig"]=>
      string(55) "resource ?????? ([ array $options [, array $params ]] )"
      ["description"]=>
      string(84) "Creates and returns a stream context with any options supplied in
   options preset."
      ["return"]=>
      string(26) "A stream context resource."
      ["parameters"]=>
      array(2) {
        ["options"]=>
        string(226) "Must be an associative array of associative arrays in the format
       $arr['wrapper']['option'] = $value. Refer to context options for a list of available wrappers and options.
      
      
       Default to an empty array."
        ["params"]=>
        string(164) "Must be an associative array in the format
       $arr['parameter'] = $value.
       Refer to context parameters for
       a listing of standard stream parameters."
      }
      ["flatparameters"]=>
      string(15) "options, params"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.3.0"]=>
        string(35) "Added the optional params argument."
      }
    }
    [6]=>
    array(13) {
      ["name"]=>
      string(26) "stream_context_get_default"
      ["summary"]=>
      string(35) "Retrieve the default stream context"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.1.0, PHP 7)"
      ["signature"]=>
      string(57) "resource stream_context_get_default ([ array $options ] )"
      ["anonsig"]=>
      string(37) "resource ?????? ([ array $options ] )"
      ["description"]=>
      string(294) "Returns the default stream context which is used whenever file operations
   (fopen(), file_get_contents(), etc...)
   are called without a context parameter.  Options for the default context
   can optionally be specified with this function using the same syntax as
   stream_context_create()."
      ["return"]=>
      string(26) "A stream context resource."
      ["parameters"]=>
      array(1) {
        ["options"]=>
        string(265) "options must be an associative
       array of associative arrays in the format
       $arr['wrapper']['option'] = $value.
      
      Note: 
       
        As of PHP 5.3.0, the stream_context_set_default() function
        can be used to set the default context."
      }
      ["flatparameters"]=>
      string(7) "options"
      ["notes"]=>
      string(129) "Note: 
       
        As of PHP 5.3.0, the stream_context_set_default() function
        can be used to set the default context."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [7]=>
    array(13) {
      ["name"]=>
      string(26) "stream_context_get_options"
      ["summary"]=>
      string(45) "Retrieve options for a stream/wrapper/context"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.3.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(64) "array stream_context_get_options ( resource $stream_or_context )"
      ["anonsig"]=>
      string(44) "array ?????? ( resource $stream_or_context )"
      ["description"]=>
      string(63) "Returns an array of options on the specified stream or context."
      ["return"]=>
      string(46) "Returns an associative array with the options."
      ["parameters"]=>
      array(1) {
        ["stream_or_context"]=>
        string(41) "The stream or context to get options from"
      }
      ["flatparameters"]=>
      string(17) "stream_or_context"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [8]=>
    array(13) {
      ["name"]=>
      string(25) "stream_context_get_params"
      ["summary"]=>
      string(35) "Retrieves parameters from a context"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.3.0, PHP 7)"
      ["signature"]=>
      string(63) "array stream_context_get_params ( resource $stream_or_context )"
      ["anonsig"]=>
      string(44) "array ?????? ( resource $stream_or_context )"
      ["description"]=>
      string(71) "Retrieves parameter and options information from the stream or context."
      ["return"]=>
      string(73) "Returns an associate array containing all context options and parameters."
      ["parameters"]=>
      array(1) {
        ["stream_or_context"]=>
        string(46) "A stream resource or a
       context resource"
      }
      ["flatparameters"]=>
      string(17) "stream_or_context"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [9]=>
    array(13) {
      ["name"]=>
      string(26) "stream_context_set_default"
      ["summary"]=>
      string(30) "Set the default stream context"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.3.0, PHP 7)"
      ["signature"]=>
      string(54) "resource stream_context_set_default ( array $options )"
      ["anonsig"]=>
      string(34) "resource ?????? ( array $options )"
      ["description"]=>
      string(211) "Set the default stream context which will be used whenever file operations
   (fopen(), file_get_contents(), etc...)
   are called without a context parameter. Uses the same syntax as
   stream_context_create()."
      ["return"]=>
      string(35) "Returns the default stream context."
      ["parameters"]=>
      array(1) {
        ["options"]=>
        string(204) "The options to set for the default context.
      
      Note: 
       
        options must be an associative
        array of associative arrays in the format
        $arr['wrapper']['option'] = $value."
      }
      ["flatparameters"]=>
      string(7) "options"
      ["notes"]=>
      string(147) "Note: 
       
        options must be an associative
        array of associative arrays in the format
        $arr['wrapper']['option'] = $value."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [10]=>
    array(13) {
      ["name"]=>
      string(25) "stream_context_set_option"
      ["summary"]=>
      string(43) "Sets an option for a stream/wrapper/context"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.3.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(112) "bool stream_context_set_option ( resource $stream_or_context , string $wrapper , string $option , mixed $value )"
      ["anonsig"]=>
      string(93) "bool ?????? ( resource $stream_or_context , string $wrapper , string $option , mixed $value )"
      ["description"]=>
      string(80) "Sets an option on the specified context.  value
    is set to option for wrapper"
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(2) {
        ["stream_or_context"]=>
        string(55) "The stream or context resource to apply the options to."
        ["options"]=>
        string(305) "The options to set for stream_or_context.
      
      Note: 
       
        options must be an associative
        array of associative arrays in the format
        $arr['wrapper']['option'] = $value.
       
       
       Refer to context options and parameters
       for a listing of stream options."
      }
      ["flatparameters"]=>
      string(26) "stream_or_context, options"
      ["notes"]=>
      string(250) "Note: 
       
        options must be an associative
        array of associative arrays in the format
        $arr['wrapper']['option'] = $value.
       
       
       Refer to context options and parameters
       for a listing of stream options."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [11]=>
    array(13) {
      ["name"]=>
      string(25) "stream_context_set_params"
      ["summary"]=>
      string(43) "Set parameters for a stream/wrapper/context"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.3.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(78) "bool stream_context_set_params ( resource $stream_or_context , array $params )"
      ["anonsig"]=>
      string(59) "bool ?????? ( resource $stream_or_context , array $params )"
      ["description"]=>
      string(41) "Sets parameters on the specified context."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(2) {
        ["stream_or_context"]=>
        string(50) "The stream or context to apply the parameters too."
        ["params"]=>
        string(168) "An array of parameters to set.
      
      Note: 
       
        params should be an associative array of the structure:
        $params['paramname'] = "paramvalue";."
      }
      ["flatparameters"]=>
      string(25) "stream_or_context, params"
      ["notes"]=>
      string(124) "Note: 
       
        params should be an associative array of the structure:
        $params['paramname'] = "paramvalue";."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [12]=>
    array(13) {
      ["name"]=>
      string(21) "stream_copy_to_stream"
      ["summary"]=>
      string(38) "Copies data from one stream to another"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(108) "int stream_copy_to_stream ( resource $source , resource $dest [, int $maxlength = -1 [, int $offset = 0 ]] )"
      ["anonsig"]=>
      string(93) "int ?????? ( resource $source , resource $dest [, int $maxlength = -1 [, int $offset = 0 ]] )"
      ["description"]=>
      string(228) "Makes a copy of up to maxlength bytes
   of data from the current position (or from the
   offset position, if specified) in
   source to dest. If
   maxlength is not specified, all remaining content in
   source will be copied."
      ["return"]=>
      string(62) "Returns the total count of bytes copied,  or FALSE on failure."
      ["parameters"]=>
      array(4) {
        ["source"]=>
        string(17) "The source stream"
        ["dest"]=>
        string(22) "The destination stream"
        ["maxlength"]=>
        string(21) "Maximum bytes to copy"
        ["offset"]=>
        string(38) "The offset where to start to copy data"
      }
      ["flatparameters"]=>
      string(31) "source, dest, maxlength, offset"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.1.0"]=>
        string(26) "Added the offset parameter"
      }
    }
    [13]=>
    array(12) {
      ["name"]=>
      string(15) "stream_encoding"
      ["summary"]=>
      string(37) "Set character set for stream encoding"
      ["versions"]=>
      string(56) "(No version information available, might only be in Git)"
      ["signature"]=>
      string(63) "bool stream_encoding ( resource $stream [, string $encoding ] )"
      ["anonsig"]=>
      string(54) "bool ?????? ( resource $stream [, string $encoding ] )"
      ["description"]=>
      string(79) "This function is
currently not documented; only its argument list is available."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(86) "WarningThis function is
currently not documented; only its argument list is available."
      ["changelog"]=>
      array(0) {
      }
    }
    [14]=>
    array(13) {
      ["name"]=>
      string(20) "stream_filter_append"
      ["summary"]=>
      string(27) "Attach a filter to a stream"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.3.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(110) "resource stream_filter_append ( resource $stream , string $filtername [, int $read_write [, mixed $params ]] )"
      ["anonsig"]=>
      string(96) "resource ?????? ( resource $stream , string $filtername [, int $read_write [, mixed $params ]] )"
      ["description"]=>
      string(61) "Adds filtername to the list of filters
   attached to stream."
      ["return"]=>
      string(240) "Returns a resource on success or FALSE on failure. The resource can be
   used to refer to this filter instance during a call to
   stream_filter_remove().
FALSE is returned if stream is not a resource or
   if filtername cannot be located."
      ["parameters"]=>
      array(4) {
        ["stream"]=>
        string(18) "The target stream."
        ["filtername"]=>
        string(16) "The filter name."
        ["read_write"]=>
        string(487) "By default, stream_filter_append() will
       attach the filter to the read filter chain
       if the file was opened for reading (i.e. File Mode:
       r, and/or +).  The filter
       will also be attached to the write filter chain
       if the file was opened for writing (i.e. File Mode:
       w, a, and/or +).
       STREAM_FILTER_READ,
       STREAM_FILTER_WRITE, and/or
       STREAM_FILTER_ALL can also be passed to the
       read_write parameter to override this behavior."
        ["params"]=>
        string(238) "This filter will be added with the specified 
       params to the end of
       the list and will therefore be called last during stream operations.
       To add a filter to the beginning of the list, use
       stream_filter_prepend()."
      }
      ["flatparameters"]=>
      string(38) "stream, filtername, read_write, params"
      ["notes"]=>
      string(726) "Note: 
   When using custom (user) filters
    stream_filter_register() must be called first
    in order to register the desired user filter to filtername.
Note: 
   
    Stream data is read from resources (both local and remote) in chunks,
    with any unconsumed data kept in internal buffers.  When a new
    filter is appended to a stream, data in the internal buffers is processed through
    the new filter at that time.  This differs from the behavior of
    stream_filter_prepend().
Note: 
   
    When a filter is added for read and write, two instances of the filter
    are created. stream_filter_append() must be called twice 
    with STREAM_FILTER_READ and 
    STREAM_FILTER_WRITE to get both filter resources."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.1.0"]=>
        string(86) "Prior to PHP 5.1.0, this function returns TRUE on success
        or FALSE on failure."
      }
    }
    [15]=>
    array(13) {
      ["name"]=>
      string(21) "stream_filter_prepend"
      ["summary"]=>
      string(27) "Attach a filter to a stream"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.3.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(111) "resource stream_filter_prepend ( resource $stream , string $filtername [, int $read_write [, mixed $params ]] )"
      ["anonsig"]=>
      string(96) "resource ?????? ( resource $stream , string $filtername [, int $read_write [, mixed $params ]] )"
      ["description"]=>
      string(61) "Adds filtername to the list of filters
   attached to stream."
      ["return"]=>
      string(240) "Returns a resource on success or FALSE on failure. The resource can be
   used to refer to this filter instance during a call to
   stream_filter_remove().
FALSE is returned if stream is not a resource or
   if filtername cannot be located."
      ["parameters"]=>
      array(4) {
        ["stream"]=>
        string(18) "The target stream."
        ["filtername"]=>
        string(16) "The filter name."
        ["read_write"]=>
        string(569) "By default, stream_filter_prepend() will
       attach the filter to the read filter chain
       if the file was opened for reading (i.e. File Mode:
       r, and/or +).  The filter
       will also be attached to the write filter chain
       if the file was opened for writing (i.e. File Mode:
       w, a, and/or +).
       STREAM_FILTER_READ,
       STREAM_FILTER_WRITE, and/or
       STREAM_FILTER_ALL can also be passed to the
       read_write parameter to override this behavior.
       See stream_filter_append() for an example of
       using this parameter."
        ["params"]=>
        string(231) "This filter will be added with the specified params
       to the beginning of the list and will therefore be
       called first during stream operations.  To add a filter to the end of the
       list, use stream_filter_append()."
      }
      ["flatparameters"]=>
      string(38) "stream, filtername, read_write, params"
      ["notes"]=>
      string(802) "Note: 
   When using custom (user) filters
    stream_filter_register() must be called first
    in order to register the desired user filter to filtername.
Note: 
   
    Stream data is read from resources (both local and remote) in chunks,
    with any unconsumed data kept in internal buffers.  When a new
    filter is prepended to a stream, data in the internal buffers,
    which has already been processed through other filters will
    not be reprocessed through the new filter
    at that time.  This differs from the behavior of
    stream_filter_append().
Note: 
   
    When a filter is added for read and write, two instances of the filter
    are created. stream_filter_prepend() must be called twice 
    with STREAM_FILTER_READ and 
    STREAM_FILTER_WRITE to get both filter resources."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.1.0"]=>
        string(86) "Prior to PHP 5.1.0, this function returns TRUE on success
        or FALSE on failure."
      }
    }
    [16]=>
    array(13) {
      ["name"]=>
      string(22) "stream_filter_register"
      ["summary"]=>
      string(37) "Register a user defined stream filter"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(70) "bool stream_filter_register ( string $filtername , string $classname )"
      ["anonsig"]=>
      string(54) "bool ?????? ( string $filtername , string $classname )"
      ["description"]=>
      string(176) "stream_filter_register() allows you to implement
   your own filter on any registered stream used with all the other
   filesystem functions (such as fopen(),
   fread() etc.)."
      ["return"]=>
      string(128) "Returns TRUE on success or FALSE on failure.
stream_filter_register() will return FALSE if the
   filtername is already defined."
      ["parameters"]=>
      array(2) {
        ["filtername"]=>
        string(33) "The filter name to be registered."
        ["classname"]=>
        string(513) "To implement a filter, you need to define a class as an extension of
       php_user_filter with a number of member
       functions. When performing read/write operations on the stream
       to which your filter is attached, PHP will pass the data through your
       filter (and any other filters attached to that stream) so that the
       data may be modified as desired. You must implement the methods
       exactly as described in php_user_filter - doing
       otherwise will lead to undefined behaviour."
      }
      ["flatparameters"]=>
      string(21) "filtername, classname"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [17]=>
    array(13) {
      ["name"]=>
      string(20) "stream_filter_remove"
      ["summary"]=>
      string(29) "Remove a filter from a stream"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.1.0, PHP 7)"
      ["signature"]=>
      string(53) "bool stream_filter_remove ( resource $stream_filter )"
      ["anonsig"]=>
      string(39) "bool ?????? ( resource $stream_filter )"
      ["description"]=>
      string(235) "Removes a stream filter previously added to a stream with
   stream_filter_prepend() or
   stream_filter_append().  Any data remaining in the
   filter's internal buffer will be flushed through to the next filter before
   removing it."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(1) {
        ["stream_filter"]=>
        string(32) "The stream filter to be removed."
      }
      ["flatparameters"]=>
      string(13) "stream_filter"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [18]=>
    array(13) {
      ["name"]=>
      string(19) "stream_get_contents"
      ["summary"]=>
      string(41) "Reads remainder of a stream into a string"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(93) "string stream_get_contents ( resource $handle [, int $maxlength = -1 [, int $offset = -1 ]] )"
      ["anonsig"]=>
      string(80) "string ?????? ( resource $handle [, int $maxlength = -1 [, int $offset = -1 ]] )"
      ["description"]=>
      string(231) "Identical to file_get_contents(), except that
   stream_get_contents() operates on an already open
   stream resource and returns the remaining contents in a string, up to
   maxlength bytes and starting at the specified
   offset."
      ["return"]=>
      string(37) "Returns a string or FALSE on failure."
      ["parameters"]=>
      array(3) {
        ["handle (resource)"]=>
        string(46) "A stream resource (e.g. returned from fopen())"
        ["maxlength (integer)"]=>
        string(81) "The maximum bytes to read. Defaults to -1 (read all the remaining
       buffer)."
        ["offset (integer)"]=>
        string(151) "Seek to the specified offset before reading. If this number is negative,
       no seeking will occur and reading will start from the current position."
      }
      ["flatparameters"]=>
      string(56) "handle (resource), maxlength (integer), offset (integer)"
      ["notes"]=>
      string(35) "Note: This function is
binary-safe."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.1.0"]=>
        string(21) "The offset was added."
      }
    }
    [19]=>
    array(13) {
      ["name"]=>
      string(18) "stream_get_filters"
      ["summary"]=>
      string(35) "Retrieve list of registered filters"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(33) "array stream_get_filters ( void )"
      ["anonsig"]=>
      string(21) "array ?????? ( void )"
      ["description"]=>
      string(62) "Retrieve the list of registered filters on the running system."
      ["return"]=>
      string(80) "Returns an indexed array containing the name of all stream filters
   available."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [20]=>
    array(13) {
      ["name"]=>
      string(15) "stream_get_line"
      ["summary"]=>
      string(54) "Gets line from stream resource up to a given delimiter"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(77) "string stream_get_line ( resource $handle , int $length [, string $ending ] )"
      ["anonsig"]=>
      string(68) "string ?????? ( resource $handle , int $length [, string $ending ] )"
      ["description"]=>
      string(398) "Gets a line from the given handle.
Reading ends when length bytes have been read, when
   the string specified by ending is found (which is
   not included in the return value), or on EOF
   (whichever comes first).
This function is nearly identical to fgets() except in
   that it allows end of line delimiters other than the standard \n, \r, and
   \r\n, and does not return the delimiter itself."
      ["return"]=>
      string(117) "Returns a string of up to length bytes read from the file
   pointed to by handle.
If an error occurs, returns FALSE."
      ["parameters"]=>
      array(3) {
        ["handle"]=>
        string(20) "A valid file handle."
        ["length"]=>
        string(44) "The number of bytes to read from the handle."
        ["ending"]=>
        string(29) "An optional string delimiter."
      }
      ["flatparameters"]=>
      string(22) "handle, length, ending"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [21]=>
    array(13) {
      ["name"]=>
      string(20) "stream_get_meta_data"
      ["summary"]=>
      string(53) "Retrieves header/meta data from streams/file pointers"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.3.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(47) "array stream_get_meta_data ( resource $stream )"
      ["anonsig"]=>
      string(33) "array ?????? ( resource $stream )"
      ["description"]=>
      string(45) "Returns information about an existing stream."
      ["return"]=>
      string(1369) "The result array contains the following items:
timed_out (bool) - TRUE if the stream
     timed out while waiting for data on the last call to
     fread() or fgets().
blocked (bool) - TRUE if the stream is
     in blocking IO mode. See stream_set_blocking().
eof (bool) - TRUE if the stream has reached
     end-of-file.  Note that for socket streams this member can be TRUE
     even when unread_bytes is non-zero.  To
     determine if there is more data to be read, use
     feof() instead of reading this item.
unread_bytes (int) - the number of bytes
     currently contained in the PHP's own internal buffer.
Note: 
     
      You shouldn't use this value in a script.
stream_type (string) - a label describing
     the underlying implementation of the stream.
wrapper_type (string) - a label describing
     the protocol wrapper implementation layered over the stream.
     See Supported Protocols and Wrappers for more information about wrappers.
wrapper_data (mixed) - wrapper specific
     data attached to this stream.  See Supported Protocols and Wrappers for
     more information about wrappers and their wrapper data.
mode (string) - the type of access required for
     this stream (see Table 1 of the fopen() reference)
seekable (bool) - whether the current stream can
     be seeked.
uri (string) - the URI/filename associated with this
     stream."
      ["parameters"]=>
      array(1) {
        ["stream"]=>
        string(85) "The stream can be any stream created by fopen(),
       fsockopen() and pfsockopen()."
      }
      ["flatparameters"]=>
      string(6) "stream"
      ["notes"]=>
      string(142) "Note: 
     
      You shouldn't use this value in a script.
Note: 
   This function does NOT work on sockets created by the Socket extension."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [22]=>
    array(13) {
      ["name"]=>
      string(21) "stream_get_transports"
      ["summary"]=>
      string(45) "Retrieve list of registered socket transports"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(36) "array stream_get_transports ( void )"
      ["anonsig"]=>
      string(21) "array ?????? ( void )"
      ["description"]=>
      string(105) "Returns an indexed array containing the name of all socket transports
   available on the running system."
      ["return"]=>
      string(52) "Returns an indexed array of socket transports names."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [23]=>
    array(13) {
      ["name"]=>
      string(19) "stream_get_wrappers"
      ["summary"]=>
      string(35) "Retrieve list of registered streams"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(34) "array stream_get_wrappers ( void )"
      ["anonsig"]=>
      string(21) "array ?????? ( void )"
      ["description"]=>
      string(68) "Retrieve list of registered streams available on the running system."
      ["return"]=>
      string(103) "Returns an indexed array containing the name of all stream wrappers
   available on the running system."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [24]=>
    array(13) {
      ["name"]=>
      string(15) "stream_is_local"
      ["summary"]=>
      string(36) "Checks if a stream is a local stream"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.2.4, PHP 7)"
      ["signature"]=>
      string(45) "bool stream_is_local ( mixed $stream_or_url )"
      ["anonsig"]=>
      string(36) "bool ?????? ( mixed $stream_or_url )"
      ["description"]=>
      string(52) "Checks if a stream, or a URL, is a local one or not."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(1) {
        ["stream_or_url"]=>
        string(36) "The stream resource or URL to check."
      }
      ["flatparameters"]=>
      string(13) "stream_or_url"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [25]=>
    array(13) {
      ["name"]=>
      string(28) "stream_notification_callback"
      ["summary"]=>
      string(58) "A callback function for the notification context parameter"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.2.0, PHP 7)"
      ["signature"]=>
      string(156) "void stream_notification_callback ( int $notification_code , int $severity , string $message , int $message_code , int $bytes_transferred , int $bytes_max )"
      ["anonsig"]=>
      string(134) "void ?????? ( int $notification_code , int $severity , string $message , int $message_code , int $bytes_transferred , int $bytes_max )"
      ["description"]=>
      string(181) "A callable function, used by the
   notification context parameter,
   called during an event.
Note:
This is not a real function, only a prototype of how the function should
    be."
      ["return"]=>
      string(21) "No value is returned."
      ["parameters"]=>
      array(6) {
        ["notification_code"]=>
        string(50) "One of the STREAM_NOTIFY_* notification constants."
        ["severity"]=>
        string(59) "One of the STREAM_NOTIFY_SEVERITY_* notification constants."
        ["message"]=>
        string(59) "Passed if a descriptive message is available for the event."
        ["message_code"]=>
        string(156) "Passed if a descriptive message code is available for the event.
      
      
       The meaning of this value is dependent on the specific wrapper in use."
        ["bytes_transferred"]=>
        string(62) "If applicable, the bytes_transferred will be
       populated."
        ["bytes_max"]=>
        string(54) "If applicable, the bytes_max will be
       populated."
      }
      ["flatparameters"]=>
      string(80) "notification_code, severity, message, message_code, bytes_transferred, bytes_max"
      ["notes"]=>
      string(95) "Note: 
   
    This is not a real function, only a prototype of how the function should
    be."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [26]=>
    array(12) {
      ["name"]=>
      string(23) "stream_register_wrapper"
      ["summary"]=>
      string(34) "Alias of stream_wrapper_register()"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.3.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(56) "This function is an alias of: stream_wrapper_register()."
      ["anonsig"]=>
      string(56) "This function is an alias of: stream_wrapper_register()."
      ["description"]=>
      string(57) "This function is an alias of:  stream_wrapper_register()."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [27]=>
    array(13) {
      ["name"]=>
      string(27) "stream_resolve_include_path"
      ["summary"]=>
      string(41) "Resolve filename against the include path"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.3.2, PHP 7)"
      ["signature"]=>
      string(55) "string stream_resolve_include_path ( string $filename )"
      ["anonsig"]=>
      string(34) "string ?????? ( string $filename )"
      ["description"]=>
      string(89) "Resolve filename against the include path according to the same rules as fopen()/include."
      ["return"]=>
      string(81) "Returns a string containing the resolved absolute filename,  or FALSE on failure."
      ["parameters"]=>
      array(1) {
        ["filename"]=>
        string(24) "The filename to resolve."
      }
      ["flatparameters"]=>
      string(8) "filename"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [28]=>
    array(13) {
      ["name"]=>
      string(13) "stream_select"
      ["summary"]=>
      string(128) "Runs the equivalent of the select() system call on the given
   arrays of streams with a timeout specified by tv_sec and tv_usec"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.3.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(103) "int stream_select ( array &$read , array &$write , array &$except , int $tv_sec [, int $tv_usec = 0 ] )"
      ["anonsig"]=>
      string(96) "int ?????? ( array &$read , array &$write , array &$except , int $tv_sec [, int $tv_usec = 0 ] )"
      ["description"]=>
      string(200) "The stream_select() function accepts arrays of streams and
   waits for them to change status. Its operation is equivalent to that of
   the socket_select() function except in that it acts on streams."
      ["return"]=>
      string(312) "On success stream_select() returns the number of
   stream resources contained in the modified arrays, which may be zero if
   the timeout expires before anything interesting happens. On error FALSE
   is returned and a warning raised (this can happen if the system call is
   interrupted by an incoming signal)."
      ["parameters"]=>
      array(5) {
        ["read"]=>
        string(304) "The streams listed in the read array will be watched to
       see if characters become available for reading (more precisely, to see if
       a read will not block - in particular, a stream resource is also ready on
       end-of-file, in which case an fread() will return
       a zero length string)."
        ["write"]=>
        string(94) "The streams listed in the write array will be
       watched to see if a write will not block."
        ["except"]=>
        string(608) "The streams listed in the except array will be
       watched for high priority exceptional ("out-of-band") data arriving.
      
      Note: 
       
        When stream_select() returns, the arrays
        read, write and
        except are modified to indicate which stream
        resource(s) actually changed status.
       
      
      
       You do not need to pass every array to
       stream_select(). You can leave it out and use an
       empty array or NULL instead. Also do not forget that those arrays are
       passed by reference and will be modified after
       stream_select() returns."
        ["tv_sec"]=>
        string(1423) "The tv_sec and tv_usec
       together form the timeout parameter,
       tv_sec specifies the number of seconds while
       tv_usec the number of microseconds.
       The timeout is an upper bound on the amount of time
       that stream_select() will wait before it returns.
       If tv_sec and tv_usec are
       both set to 0, stream_select() will
       not wait for data - instead it will return immediately, indicating the
       current status of the streams.
      
      
       If tv_sec is NULL stream_select()
       can block indefinitely, returning only when an event on one of the
       watched streams occurs (or if a signal interrupts the system call).
      
      Warning
       
        Using a timeout value of 0 allows you to
        instantaneously poll the status of the streams, however, it is NOT a
        good idea to use a 0 timeout value in a loop as it
        will cause your script to consume too much CPU time.
       
       
        It is much better to specify a timeout value of a few seconds, although
        if you need to be checking and running other code concurrently, using a
        timeout value of at least 200000 microseconds will
        help reduce the CPU usage of your script.
       
       
        Remember that the timeout value is the maximum time that will elapse;
        stream_select() will return as soon as the
        requested streams are ready for use."
        ["tv_usec"]=>
        string(23) "See tv_sec description."
      }
      ["flatparameters"]=>
      string(36) "read, write, except, tv_sec, tv_usec"
      ["notes"]=>
      string(1447) "Note: 
       
        When stream_select() returns, the arrays
        read, write and
        except are modified to indicate which stream
        resource(s) actually changed status.
Note: 
   
    Due to a limitation in the current Zend Engine it is not possible to pass a
    constant modifier like NULL directly as a parameter to a function
    which expects this parameter to be passed by reference. Instead use a
    temporary variable or an expression with the leftmost member being a
    temporary variable:
    

<?php$e = NULL;stream_select($r, $w, $e, 0);?>
Note: 
   
   Be sure to use the === operator when checking for an
   error. Since the stream_select() may return 0 the
   comparison with == would evaluate to TRUE:
   

<?php$e = NULL;if (false === stream_select($r, $w, $e, 0)) {    echo "stream_select() failed\n";}?>
Note: 
   
    If you read/write to a stream returned in the arrays be aware that
    they do not necessarily read/write the full amount of data you have
    requested. Be prepared to even only be able to read/write a single
    byte.
Note: 
   
    Some streams (like zlib) cannot be selected by this
    function.
Note: 
   
    Windows compatibility: stream_select() used on a
    pipe returned from proc_open() may cause data loss
    under Windows 98.
   
   
    Use of stream_select() on
    file descriptors returned by proc_open() will fail
    and return FALSE under Windows."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(736) "Warning
       
        Using a timeout value of 0 allows you to
        instantaneously poll the status of the streams, however, it is NOT a
        good idea to use a 0 timeout value in a loop as it
        will cause your script to consume too much CPU time.
       
       
        It is much better to specify a timeout value of a few seconds, although
        if you need to be checking and running other code concurrently, using a
        timeout value of at least 200000 microseconds will
        help reduce the CPU usage of your script.
       
       
        Remember that the timeout value is the maximum time that will elapse;
        stream_select() will return as soon as the
        requested streams are ready for use."
      ["changelog"]=>
      array(0) {
      }
    }
    [29]=>
    array(13) {
      ["name"]=>
      string(19) "stream_set_blocking"
      ["summary"]=>
      string(42) "Set blocking/non-blocking mode on a stream"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.3.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(58) "bool stream_set_blocking ( resource $stream , bool $mode )"
      ["anonsig"]=>
      string(45) "bool ?????? ( resource $stream , bool $mode )"
      ["description"]=>
      string(164) "Sets blocking or non-blocking mode on a stream.
This function works for any stream that supports non-blocking mode
   (currently, regular files and socket streams)."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(2) {
        ["stream"]=>
        string(11) "The stream."
        ["mode"]=>
        string(393) "If mode is FALSE, the given stream
       will be switched to non-blocking mode, and if TRUE, it
       will be switched to blocking mode.  This affects calls like
       fgets() and fread()
       that read from the stream.  In non-blocking mode an
       fgets() call will always return right away
       while in blocking mode it will wait for data to become available
       on the stream."
      }
      ["flatparameters"]=>
      string(12) "stream, mode"
      ["notes"]=>
      string(145) "Note: 
   
    This function was previously called as
    set_socket_blocking() and later
    socket_set_blocking() but this usage is deprecated."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [30]=>
    array(13) {
      ["name"]=>
      string(21) "stream_set_chunk_size"
      ["summary"]=>
      string(25) "Set the stream chunk size"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.4.0, PHP 7)"
      ["signature"]=>
      string(60) "int stream_set_chunk_size ( resource $fp , int $chunk_size )"
      ["anonsig"]=>
      string(45) "int ?????? ( resource $fp , int $chunk_size )"
      ["description"]=>
      string(26) "Set the stream chunk size."
      ["return"]=>
      string(122) "Returns the previous chunk size on success.
Will return FALSE if chunk_size is less than 1 or
   greater than PHP_INT_MAX."
      ["parameters"]=>
      array(2) {
        ["fp"]=>
        string(18) "The target stream."
        ["chunk_size"]=>
        string(27) "The desired new chunk size."
      }
      ["flatparameters"]=>
      string(14) "fp, chunk_size"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [31]=>
    array(13) {
      ["name"]=>
      string(22) "stream_set_read_buffer"
      ["summary"]=>
      string(43) "Set read file buffering on the given stream"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.3.3, PHP 7)"
      ["signature"]=>
      string(61) "int stream_set_read_buffer ( resource $stream , int $buffer )"
      ["anonsig"]=>
      string(45) "int ?????? ( resource $stream , int $buffer )"
      ["description"]=>
      string(99) "Sets the read buffer. It's the equivalent of stream_set_write_buffer(),
   but for read operations."
      ["return"]=>
      string(75) "Returns 0 on success, or another value if the request
   cannot be honored."
      ["parameters"]=>
      array(2) {
        ["stream"]=>
        string(17) "The file pointer."
        ["buffer"]=>
        string(223) "The number of bytes to buffer. If buffer
      is 0 then read operations are unbuffered.  This ensures that all reads
      with fread() are completed before other processes are
      allowed to read from that input stream."
      }
      ["flatparameters"]=>
      string(14) "stream, buffer"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [32]=>
    array(13) {
      ["name"]=>
      string(18) "stream_set_timeout"
      ["summary"]=>
      string(30) "Set timeout period on a stream"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.3.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(86) "bool stream_set_timeout ( resource $stream , int $seconds [, int $microseconds = 0 ] )"
      ["anonsig"]=>
      string(74) "bool ?????? ( resource $stream , int $seconds [, int $microseconds = 0 ] )"
      ["description"]=>
      string(246) "Sets the timeout value on stream,
   expressed in the sum of seconds and
   microseconds.
When the stream times out, the 'timed_out' key of the array returned by
   stream_get_meta_data() is set to TRUE, although no
   error/warning is generated."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(3) {
        ["stream"]=>
        string(18) "The target stream."
        ["seconds"]=>
        string(42) "The seconds part of the timeout to be set."
        ["microseconds"]=>
        string(47) "The microseconds part of the timeout to be set."
      }
      ["flatparameters"]=>
      string(29) "stream, seconds, microseconds"
      ["notes"]=>
      string(157) "Note: 
   
    This function doesn't work with advanced operations like
    stream_socket_recvfrom(), use
    stream_select() with timeout parameter instead."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["4.3.0"]=>
        string(249) "As of PHP 4.3, this function can (potentially) work on any kind of
        stream.  In PHP 4.3, socket based streams are still the only kind
        supported in the PHP core, although streams from other extensions
        may support this function."
      }
    }
    [33]=>
    array(13) {
      ["name"]=>
      string(23) "stream_set_write_buffer"
      ["summary"]=>
      string(45) "Sets write file buffering on the given stream"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.3.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(62) "int stream_set_write_buffer ( resource $stream , int $buffer )"
      ["anonsig"]=>
      string(45) "int ?????? ( resource $stream , int $buffer )"
      ["description"]=>
      string(79) "Sets the buffering for write operations on the given stream
   to buffer bytes."
      ["return"]=>
      string(72) "Returns 0 on success, or another value if the request cannot be honored."
      ["parameters"]=>
      array(2) {
        ["stream"]=>
        string(17) "The file pointer."
        ["buffer"]=>
        string(229) "The number of bytes to buffer. If buffer
       is 0 then write operations are unbuffered.  This ensures that all writes
       with fwrite() are completed before other processes are
       allowed to write to that output stream."
      }
      ["flatparameters"]=>
      string(14) "stream, buffer"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [34]=>
    array(13) {
      ["name"]=>
      string(20) "stream_socket_accept"
      ["summary"]=>
      string(65) "Accept a connection on a socket created by stream_socket_server()"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(135) "resource stream_socket_accept ( resource $server_socket [, float $timeout = ini_get("default_socket_timeout") [, string &$peername ]] )"
      ["anonsig"]=>
      string(121) "resource ?????? ( resource $server_socket [, float $timeout = ini_get("default_socket_timeout") [, string &$peername ]] )"
      ["description"]=>
      string(80) "Accept a connection on a socket previously created by
   stream_socket_server()."
      ["return"]=>
      string(71) "Returns a stream to the accepted socket connection or FALSE on failure."
      ["parameters"]=>
      array(3) {
        ["server_socket"]=>
        string(46) "The server socket to accept a connection from."
        ["timeout"]=>
        string(83) "Override the default socket accept timeout. Time should be given in
       seconds."
        ["peername"]=>
        string(231) "Will be set to the name (address) of the client which connected, if
       included and available from the selected transport.
      
      Note: 
       
        Can also be determined later using
        stream_socket_get_name()."
      }
      ["flatparameters"]=>
      string(32) "server_socket, timeout, peername"
      ["notes"]=>
      string(91) "Note: 
       
        Can also be determined later using
        stream_socket_get_name()."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(147) "Warning
   
    This function should not be used with UDP server sockets. Instead, use
    stream_socket_recvfrom() and
    stream_socket_sendto()."
      ["changelog"]=>
      array(0) {
      }
    }
    [35]=>
    array(13) {
      ["name"]=>
      string(20) "stream_socket_client"
      ["summary"]=>
      string(46) "Open Internet or Unix domain socket connection"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(208) "resource stream_socket_client ( string $remote_socket [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") [, int $flags = STREAM_CLIENT_CONNECT [, resource $context ]]]]] )"
      ["anonsig"]=>
      string(194) "resource ?????? ( string $remote_socket [, int &$errno [, string &$errstr [, float $timeout = ini_get("default_socket_timeout") [, int $flags = STREAM_CLIENT_CONNECT [, resource $context ]]]]] )"
      ["description"]=>
      string(661) "Initiates a stream or datagram connection to the destination specified
   by remote_socket.  The type of socket created
   is determined by the transport specified using standard URL formatting:
   transport://target.  For Internet Domain sockets
   (AF_INET) such as TCP and UDP, the target portion
   of the remote_socket parameter should consist of
   a hostname or IP address followed by a colon and a port number.  For Unix
   domain sockets, the target portion should point
   to the socket file on the filesystem.
Note:
The stream will by default be opened in blocking mode.  You can
    switch it to non-blocking mode by using
    stream_set_blocking()."
      ["return"]=>
      string(188) "On success a stream resource is returned which may
   be used together with the other file functions (such as
   fgets(), fgetss(),
   fwrite(), fclose(), and
   feof()), FALSE on failure."
      ["parameters"]=>
      array(6) {
        ["remote_socket"]=>
        string(36) "Address to the socket to connect to."
        ["errno"]=>
        string(65) "Will be set to the system level error number if connection fails."
        ["errstr"]=>
        string(70) "Will be set to the system level error message if the connection fails."
        ["timeout"]=>
        string(420) "Number of seconds until the connect() system call
       should timeout.
       Note: 
        
         This parameter only applies when not making asynchronous
         connection attempts.
        
       
       Note: 
        
         To set a timeout for reading/writing data over the socket, use the
         stream_set_timeout(), as the
         timeout only applies while making connecting
         the socket."
        ["flags"]=>
        string(244) "Bitmask field which may be set to any combination of connection flags.
       Currently the select of connection flags is limited to
       STREAM_CLIENT_CONNECT (default),
       STREAM_CLIENT_ASYNC_CONNECT and
       STREAM_CLIENT_PERSISTENT."
        ["context"]=>
        string(62) "A valid context resource created with stream_context_create()."
      }
      ["flatparameters"]=>
      string(53) "remote_socket, errno, errstr, timeout, flags, context"
      ["notes"]=>
      string(889) "Note: 
   
    The stream will by default be opened in blocking mode.  You can
    switch it to non-blocking mode by using
    stream_set_blocking().
Note: 
        
         This parameter only applies when not making asynchronous
         connection attempts.
Note: 
        
         To set a timeout for reading/writing data over the socket, use the
         stream_set_timeout(), as the
         timeout only applies while making connecting
         the socket.
Note: When specifying a numerical IPv6 address
(e.g. fe80::1), you must enclose the IP in square
brackets—for example, tcp://[fe80::1]:80.
Note: 
   
    Depending on the environment, the Unix domain or the optional
    connect timeout may not be available.  A list of available
    transports can be retrieved using stream_get_transports().
    See List of Supported Socket Transports for a list of built in transports."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(435) "Warning
   
     UDP sockets will sometimes appear to have opened without an error,
     even if the remote host is unreachable.  The error will only
     become apparent when you read or write data to/from the socket.
     The reason for this is because UDP is a "connectionless" protocol,
     which means that the operating system does not try to establish
     a link for the socket until it actually needs to send or receive data."
      ["changelog"]=>
      array(0) {
      }
    }
    [36]=>
    array(13) {
      ["name"]=>
      string(27) "stream_socket_enable_crypto"
      ["summary"]=>
      string(54) "Turns encryption on/off on an already connected socket"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.1.0, PHP 7)"
      ["signature"]=>
      string(120) "mixed stream_socket_enable_crypto ( resource $stream , bool $enable [, int $crypto_type [, resource $session_stream ]] )"
      ["anonsig"]=>
      string(99) "mixed ?????? ( resource $stream , bool $enable [, int $crypto_type [, resource $session_stream ]] )"
      ["description"]=>
      string(191) "Enable or disable encryption on the stream.
Once the crypto settings are established, cryptography can be turned
   on and off dynamically by passing TRUE or FALSE in the
   enable parameter."
      ["return"]=>
      string(152) "Returns TRUE on success, FALSE if negotiation has failed or
   0 if there isn't enough data and you should try again
   (only for non-blocking sockets)."
      ["parameters"]=>
      array(4) {
        ["stream"]=>
        string(20) "The stream resource."
        ["enable"]=>
        string(42) "Enable/disable cryptography on the stream."
        ["crypto_type"]=>
        string(848) "Setup encryption on the stream.
       Valid methods are
       STREAM_CRYPTO_METHOD_SSLv2_CLIENT
        STREAM_CRYPTO_METHOD_SSLv3_CLIENT
        STREAM_CRYPTO_METHOD_SSLv23_CLIENT
        STREAM_CRYPTO_METHOD_ANY_CLIENT
        STREAM_CRYPTO_METHOD_TLS_CLIENT
        STREAM_CRYPTO_METHOD_TLSv1_0_CLIENT
        STREAM_CRYPTO_METHOD_TLSv1_1_CLIENT
        STREAM_CRYPTO_METHOD_TLSv1_2_CLIENT
        STREAM_CRYPTO_METHOD_SSLv2_SERVER
        STREAM_CRYPTO_METHOD_SSLv3_SERVER
        STREAM_CRYPTO_METHOD_SSLv23_SERVER
        STREAM_CRYPTO_METHOD_ANY_SERVER
        STREAM_CRYPTO_METHOD_TLS_SERVER
        STREAM_CRYPTO_METHOD_TLSv1_0_SERVER
        STREAM_CRYPTO_METHOD_TLSv1_1_SERVER
        STREAM_CRYPTO_METHOD_TLSv1_2_SERVER
       
       If omitted, the crypto_type context option on
       the stream's SSL context will be used instead."
        ["session_stream"]=>
        string(50) "Seed the stream with settings from session_stream."
      }
      ["flatparameters"]=>
      string(43) "stream, enable, crypto_type, session_stream"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.6.0"]=>
        string(32) "The crypto_type is now optional."
      }
    }
    [37]=>
    array(13) {
      ["name"]=>
      string(22) "stream_socket_get_name"
      ["summary"]=>
      string(48) "Retrieve the name of the local or remote sockets"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(68) "string stream_socket_get_name ( resource $handle , bool $want_peer )"
      ["anonsig"]=>
      string(52) "string ?????? ( resource $handle , bool $want_peer )"
      ["description"]=>
      string(62) "Returns the local or remote name of a given socket connection."
      ["return"]=>
      string(23) "The name of the socket."
      ["parameters"]=>
      array(2) {
        ["handle"]=>
        string(30) "The socket to get the name of."
        ["want_peer"]=>
        string(118) "If set to TRUE the remote socket name will be returned, if set
       to FALSE the local socket name will be returned."
      }
      ["flatparameters"]=>
      string(17) "handle, want_peer"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [38]=>
    array(13) {
      ["name"]=>
      string(18) "stream_socket_pair"
      ["summary"]=>
      string(61) "Creates a pair of connected, indistinguishable socket streams"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.1.0, PHP 7)"
      ["signature"]=>
      string(68) "array stream_socket_pair ( int $domain , int $type , int $protocol )"
      ["anonsig"]=>
      string(56) "array ?????? ( int $domain , int $type , int $protocol )"
      ["description"]=>
      string(158) "stream_socket_pair() creates a pair of connected,
   indistinguishable socket streams. This function is commonly used in IPC
   (Inter-Process Communication)."
      ["return"]=>
      string(82) "Returns an array with the two socket resources on success, or
   FALSE on failure."
      ["parameters"]=>
      array(3) {
        ["domain"]=>
        string(95) "The protocol family to be used: STREAM_PF_INET,
       STREAM_PF_INET6 or
       STREAM_PF_UNIX"
        ["type"]=>
        string(169) "The type of communication to be used:
       STREAM_SOCK_DGRAM,
       STREAM_SOCK_RAW,
       STREAM_SOCK_RDM,
       STREAM_SOCK_SEQPACKET or
       STREAM_SOCK_STREAM"
        ["protocol"]=>
        string(153) "The protocol to be used: STREAM_IPPROTO_ICMP,
       STREAM_IPPROTO_IP,
       STREAM_IPPROTO_RAW,
       STREAM_IPPROTO_TCP or
       STREAM_IPPROTO_UDP"
      }
      ["flatparameters"]=>
      string(22) "domain, type, protocol"
      ["notes"]=>
      string(98) "Note: 
   
    Please consult the Streams constant
     list for further details on each constant."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.3.0"]=>
        string(52) "This function is now available on Windows platforms."
      }
    }
    [39]=>
    array(13) {
      ["name"]=>
      string(22) "stream_socket_recvfrom"
      ["summary"]=>
      string(45) "Receives data from a socket, connected or not"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(105) "string stream_socket_recvfrom ( resource $socket , int $length [, int $flags = 0 [, string &$address ]] )"
      ["anonsig"]=>
      string(89) "string ?????? ( resource $socket , int $length [, int $flags = 0 [, string &$address ]] )"
      ["description"]=>
      string(81) "stream_socket_recvfrom() accepts
   data from a remote socket up to length bytes."
      ["return"]=>
      string(34) "Returns the read data, as a string"
      ["parameters"]=>
      array(4) {
        ["socket"]=>
        string(18) "The remote socket."
        ["length"]=>
        string(47) "The number of bytes to receive from the socket."
        ["flags"]=>
        string(420) "The value of flags can be any combination
       of the following:
       Possible values for flags
        
         STREAM_OOB
           
            Process OOB (out-of-band) data.
           
          STREAM_PEEK
           
            Retrieve data from the socket, but do not consume the buffer.
            Subsequent calls to fread() or
            stream_socket_recvfrom() will see
            the same data."
        ["address"]=>
        string(89) "If address is provided it will be populated with
       the address of the remote socket."
      }
      ["flatparameters"]=>
      string(30) "socket, length, flags, address"
      ["notes"]=>
      string(419) "Note: 
   
    If a message received is longer than the length
    parameter, excess bytes may be discarded depending on the type of socket
    the message is received from (such as UDP).
Note: 
   
    Calls to stream_socket_recvfrom() on socket-based
    streams, after calls to buffer-based stream functions (like
    fread() or stream_get_line()) read
    data directly from the socket and bypass the stream buffer."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [40]=>
    array(13) {
      ["name"]=>
      string(20) "stream_socket_sendto"
      ["summary"]=>
      string(59) "Sends a message to a socket, whether it is connected or not"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(100) "int stream_socket_sendto ( resource $socket , string $data [, int $flags = 0 [, string $address ]] )"
      ["anonsig"]=>
      string(86) "int ?????? ( resource $socket , string $data [, int $flags = 0 [, string $address ]] )"
      ["description"]=>
      string(47) "Sends the specified data through the
   socket."
      ["return"]=>
      string(37) "Returns a result code, as an integer."
      ["parameters"]=>
      array(4) {
        ["socket"]=>
        string(27) "The socket to send data to."
        ["data"]=>
        string(20) "The data to be sent."
        ["flags"]=>
        string(184) "The value of flags can be any combination
       of the following:
       possible values for flags
        
         STREAM_OOB
           
            Process OOB (out-of-band) data."
        ["address"]=>
        string(210) "The address specified when the socket stream was created will be used
       unless an alternate address is specified in address.
      
      
       If specified, it must be in dotted quad (or [ipv6]) format."
      }
      ["flatparameters"]=>
      string(28) "socket, data, flags, address"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [41]=>
    array(13) {
      ["name"]=>
      string(20) "stream_socket_server"
      ["summary"]=>
      string(47) "Create an Internet or Unix domain server socket"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(172) "resource stream_socket_server ( string $local_socket [, int &$errno [, string &$errstr [, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN [, resource $context ]]]] )"
      ["anonsig"]=>
      string(158) "resource ?????? ( string $local_socket [, int &$errno [, string &$errstr [, int $flags = STREAM_SERVER_BIND | STREAM_SERVER_LISTEN [, resource $context ]]]] )"
      ["description"]=>
      string(168) "Creates a stream or datagram socket on the specified
   local_socket.
This function only creates a socket, to begin accepting connections
   use stream_socket_accept()."
      ["return"]=>
      string(46) "Returns the created stream, or FALSE on error."
      ["parameters"]=>
      array(5) {
        ["local_socket"]=>
        string(736) "The type of socket created is determined by the transport specified
       using standard URL formatting: transport://target.
      
      
       For Internet Domain sockets (AF_INET) such as TCP and UDP, the
       target portion of the 
       remote_socket parameter should consist of a
       hostname or IP address followed by a colon and a port number.  For
       Unix domain sockets, the target portion should
       point to the socket file on the filesystem.
      
      
       Depending on the environment, Unix domain sockets may not be available.
       A list of available transports can be retrieved using
       stream_get_transports(). See
       List of Supported Socket Transports for a list of bulitin transports."
        ["errno"]=>
        string(526) "If the optional errno and errstr
       arguments are present they will be set to indicate the actual system
       level error that occurred in the system-level socket(),
       bind(), and listen() calls. If
       the value returned in errno is 
       0 and the function returned FALSE, it is an
       indication that the error occurred before the bind()
       call. This is most likely due to a problem initializing the socket. 
       Note that the errno and
       errstr arguments will always be passed by reference."
        ["errstr"]=>
        string(22) "See errno description."
        ["flags"]=>
        string(201) "A bitmask field which may be set to any combination of socket creation
       flags.
      
      Note: 
       
        For UDP sockets, you must use STREAM_SERVER_BIND as
        the flags parameter."
        ["context"]=>
        string(0) ""
      }
      ["flatparameters"]=>
      string(43) "local_socket, errno, errstr, flags, context"
      ["notes"]=>
      string(347) "Note: 
       
        For UDP sockets, you must use STREAM_SERVER_BIND as
        the flags parameter.
Note: 
    
     Most systems require root access to create a server socket on a port
     below 1024.
Note: When specifying a numerical IPv6 address
(e.g. fe80::1), you must enclose the IP in square
brackets—for example, tcp://[fe80::1]:80."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [42]=>
    array(13) {
      ["name"]=>
      string(22) "stream_socket_shutdown"
      ["summary"]=>
      string(33) "Shutdown a full-duplex connection"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.2.1, PHP 7)"
      ["signature"]=>
      string(59) "bool stream_socket_shutdown ( resource $stream , int $how )"
      ["anonsig"]=>
      string(43) "bool ?????? ( resource $stream , int $how )"
      ["description"]=>
      string(122) "Shutdowns (partially or not) a full-duplex connection.
Note:
The associated buffer, or buffers, may or may not be emptied."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(2) {
        ["stream"]=>
        string(71) "An open stream (opened with stream_socket_client(),
       for example)"
        ["how"]=>
        string(219) "One of the following constants: STREAM_SHUT_RD
       (disable further receptions), STREAM_SHUT_WR
       (disable further transmissions) or
       STREAM_SHUT_RDWR (disable further receptions and
       transmissions)."
      }
      ["flatparameters"]=>
      string(11) "stream, how"
      ["notes"]=>
      string(76) "Note: 
   
    The associated buffer, or buffers, may or may not be emptied."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [43]=>
    array(13) {
      ["name"]=>
      string(20) "stream_supports_lock"
      ["summary"]=>
      string(42) "Tells whether the stream supports locking."
      ["versions"]=>
      string(23) "(PHP 5 >= 5.3.0, PHP 7)"
      ["signature"]=>
      string(46) "bool stream_supports_lock ( resource $stream )"
      ["anonsig"]=>
      string(32) "bool ?????? ( resource $stream )"
      ["description"]=>
      string(62) "Tells whether the stream supports locking through 
   flock()."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(1) {
        ["stream"]=>
        string(20) "The stream to check."
      }
      ["flatparameters"]=>
      string(6) "stream"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [44]=>
    array(13) {
      ["name"]=>
      string(23) "stream_wrapper_register"
      ["summary"]=>
      string(49) "Register a URL wrapper implemented as a PHP class"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.3.2, PHP 5, PHP 7)"
      ["signature"]=>
      string(89) "bool stream_wrapper_register ( string $protocol , string $classname [, int $flags = 0 ] )"
      ["anonsig"]=>
      string(72) "bool ?????? ( string $protocol , string $classname [, int $flags = 0 ] )"
      ["description"]=>
      string(149) "Allows you to implement your own protocol handlers and streams for use
   with all the other filesystem functions (such as fopen(),
   fread() etc.)."
      ["return"]=>
      string(130) "Returns TRUE on success or FALSE on failure.
stream_wrapper_register() will return FALSE if the
   protocol already has a handler."
      ["parameters"]=>
      array(3) {
        ["protocol"]=>
        string(34) "The wrapper name to be registered."
        ["classname"]=>
        string(44) "The classname which implements the protocol."
        ["flags"]=>
        string(103) "Should be set to STREAM_IS_URL if
       protocol is a URL protocol. Default is 0, local
       stream."
      }
      ["flatparameters"]=>
      string(26) "protocol, classname, flags"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.2.4"]=>
        string(26) "Added the flags parameter."
      }
    }
    [45]=>
    array(13) {
      ["name"]=>
      string(22) "stream_wrapper_restore"
      ["summary"]=>
      string(51) "Restores a previously unregistered built-in wrapper"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.1.0, PHP 7)"
      ["signature"]=>
      string(48) "bool stream_wrapper_restore ( string $protocol )"
      ["anonsig"]=>
      string(32) "bool ?????? ( string $protocol )"
      ["description"]=>
      string(88) "Restores a built-in wrapper previously unregistered with
   stream_wrapper_unregister()."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(1) {
        ["protocol"]=>
        string(0) ""
      }
      ["flatparameters"]=>
      string(8) "protocol"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [46]=>
    array(13) {
      ["name"]=>
      string(25) "stream_wrapper_unregister"
      ["summary"]=>
      string(24) "Unregister a URL wrapper"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.1.0, PHP 7)"
      ["signature"]=>
      string(51) "bool stream_wrapper_unregister ( string $protocol )"
      ["anonsig"]=>
      string(32) "bool ?????? ( string $protocol )"
      ["description"]=>
      string(235) "Allows you to disable an already defined stream wrapper. Once the wrapper
   has been disabled you may override it with a user-defined wrapper using
   stream_wrapper_register() or reenable it later on with
   stream_wrapper_restore()."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(1) {
        ["protocol"]=>
        string(0) ""
      }
      ["flatparameters"]=>
      string(8) "protocol"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
  }
  ["Functions"]=>
  array(13) {
    [0]=>
    array(13) {
      ["name"]=>
      string(20) "call_user_func_array"
      ["summary"]=>
      string(43) "Call a callback with an array of parameters"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.4, PHP 5, PHP 7)"
      ["signature"]=>
      string(68) "mixed call_user_func_array ( callable $callback , array $param_arr )"
      ["anonsig"]=>
      string(54) "mixed ?????? ( callable $callback , array $param_arr )"
      ["description"]=>
      string(84) "Calls the callback given by the first parameter with
   the parameters in param_arr."
      ["return"]=>
      string(60) "Returns the return value of the callback, or FALSE on error."
      ["parameters"]=>
      array(2) {
        ["callback"]=>
        string(26) "The callable to be called."
        ["param_arr"]=>
        string(65) "The parameters to be passed to the callback, as an indexed array."
      }
      ["flatparameters"]=>
      string(19) "callback, param_arr"
      ["notes"]=>
      string(1169) "Note: 
   
    Before PHP 5.4, referenced variables in param_arr
    are passed to the function by reference, regardless of whether the function
    expects the respective parameter to be passed by reference. This form of
    call-time pass by reference does not emit a deprecation notice, but it is
    nonetheless deprecated, and has been removed in PHP 5.4.
    Furthermore, this does not apply to internal functions, for which
    the function signature is honored. Passing by value when the function
    expects a parameter by reference results in a warning and having
    call_user_func() return FALSE (there is, however, an
    exception for passed values with reference count = 1, such as in literals,
    as these can be turned into references without ill effects — but also
    without writes to that value having any effect —; do not rely
    in this behavior, though, as the reference count is an implementation
    detail and the soundness of this behavior is questionable).
Note: Callbacks registered
with functions such as call_user_func() and call_user_func_array() will not be
called if there is an uncaught exception thrown in a previous callback."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.3.0"]=>
        string(234) "The interpretation of object oriented keywords like parent 
        and self has changed. Previously, calling them using the 
        double colon syntax would emit an E_STRICT warning because 
        they were interpreted as static."
      }
    }
    [1]=>
    array(13) {
      ["name"]=>
      string(14) "call_user_func"
      ["summary"]=>
      string(46) "Call the callback given by the first parameter"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(80) "mixed call_user_func ( callable $callback [, mixed $parameter [, mixed $... ]] )"
      ["anonsig"]=>
      string(72) "mixed ?????? ( callable $callback [, mixed $parameter [, mixed $... ]] )"
      ["description"]=>
      string(100) "Calls the callback given by the first parameter and passes
   the remaining parameters as arguments."
      ["return"]=>
      string(41) "Returns the return value of the callback."
      ["parameters"]=>
      array(2) {
        ["callback"]=>
        string(26) "The callable to be called."
        ["parameter"]=>
        string(543) "Zero or more parameters to be passed to the callback.
      
      Note: 
       
        Note that the parameters for call_user_func() are
        not passed by reference.
        
         Example #1 call_user_func() example and references
         

<?phperror_reporting(E_ALL);function increment(&$var){    $var++;}$a = 0;call_user_func('increment', $a);echo $a."\n";// You can use this insteadcall_user_func_array('increment', array(&$a));echo $a."\n";?>


         

         The above example will output:
         

0
1"
      }
      ["flatparameters"]=>
      string(19) "callback, parameter"
      ["notes"]=>
      string(654) "Note: 
       
        Note that the parameters for call_user_func() are
        not passed by reference.
        
         Example #1 call_user_func() example and references
         

<?phperror_reporting(E_ALL);function increment(&$var){    $var++;}$a = 0;call_user_func('increment', $a);echo $a."\n";// You can use this insteadcall_user_func_array('increment', array(&$a));echo $a."\n";?>


         

         The above example will output:
         

0
1
Note: Callbacks registered
with functions such as call_user_func() and call_user_func_array() will not be
called if there is an uncaught exception thrown in a previous callback."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.3.0"]=>
        string(234) "The interpretation of object oriented keywords like parent 
        and self has changed. Previously, calling them using the 
        double colon syntax would emit an E_STRICT warning because 
        they were interpreted as static."
      }
    }
    [2]=>
    array(13) {
      ["name"]=>
      string(15) "create_function"
      ["summary"]=>
      string(43) "Create an anonymous (lambda-style) function"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.1, PHP 5, PHP 7)"
      ["signature"]=>
      string(54) "string create_function ( string $args , string $code )"
      ["anonsig"]=>
      string(45) "string ?????? ( string $args , string $code )"
      ["description"]=>
      string(360) "Creates an anonymous function from the parameters passed, and
   returns a unique name for it.
This function internally performs an eval() and as such has the
    same security issues as eval(). Additionally it has bad performance
    and memory usage characteristics.
If you are using PHP 5.3.0 or newer a native
    anonymous function should be used instead."
      ["return"]=>
      string(62) "Returns a unique function name as a string, or FALSE on error."
      ["parameters"]=>
      array(2) {
        ["args"]=>
        string(23) "The function arguments."
        ["code"]=>
        string(18) "The function code."
      }
      ["flatparameters"]=>
      string(10) "args, code"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(293) "Caution
   
    This function internally performs an eval() and as such has the
    same security issues as eval(). Additionally it has bad performance
    and memory usage characteristics.
   
   
    If you are using PHP 5.3.0 or newer a native
    anonymous function should be used instead."
      ["warnings"]=>
      string(105) "WarningThis function has been
DEPRECATED as of PHP 7.2.0. Relying on this function
is highly discouraged."
      ["changelog"]=>
      array(0) {
      }
    }
    [3]=>
    array(13) {
      ["name"]=>
      string(25) "forward_static_call_array"
      ["summary"]=>
      string(52) "Call a static method and pass the arguments as array"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.3.0, PHP 7)"
      ["signature"]=>
      string(74) "mixed forward_static_call_array ( callable $function , array $parameters )"
      ["anonsig"]=>
      string(55) "mixed ?????? ( callable $function , array $parameters )"
      ["description"]=>
      string(326) "Calls a user defined function or method given by the function
   parameter. This function must be called within a method context, it can't be 
   used outside a class.
   It uses the late static
   binding.
   All arguments of the forwarded method are passed as values,
   and as an array, similarly to call_user_func_array()."
      ["return"]=>
      string(47) "Returns the function result, or FALSE on error."
      ["parameters"]=>
      array(2) {
        ["function"]=>
        string(161) "The function or method to be called. This parameter may be an array,
       with the name of the class, and the method, or a string, with a function
       name."
        ["parameter"]=>
        string(193) "One parameter, gathering all the method parameter in one array.
      
      Note: 
       
        Note that the parameters for forward_static_call_array() are
        not passed by reference."
      }
      ["flatparameters"]=>
      string(19) "function, parameter"
      ["notes"]=>
      string(116) "Note: 
       
        Note that the parameters for forward_static_call_array() are
        not passed by reference."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [4]=>
    array(13) {
      ["name"]=>
      string(19) "forward_static_call"
      ["summary"]=>
      string(20) "Call a static method"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.3.0, PHP 7)"
      ["signature"]=>
      string(85) "mixed forward_static_call ( callable $function [, mixed $parameter [, mixed $... ]] )"
      ["anonsig"]=>
      string(72) "mixed ?????? ( callable $function [, mixed $parameter [, mixed $... ]] )"
      ["description"]=>
      string(235) "Calls a user defined function or method given by the function
   parameter, with the following arguments. This function must be called within a method
   context, it can't be used outside a class.
   It uses the late static
   binding."
      ["return"]=>
      string(47) "Returns the function result, or FALSE on error."
      ["parameters"]=>
      array(2) {
        ["function"]=>
        string(161) "The function or method to be called. This parameter may be an array,
       with the name of the class, and the method, or a string, with a function
       name."
        ["parameter"]=>
        string(53) "Zero or more parameters to be passed to the function."
      }
      ["flatparameters"]=>
      string(19) "function, parameter"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [5]=>
    array(13) {
      ["name"]=>
      string(12) "func_get_arg"
      ["summary"]=>
      string(37) "Return an item from the argument list"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(35) "mixed func_get_arg ( int $arg_num )"
      ["anonsig"]=>
      string(29) "mixed ?????? ( int $arg_num )"
      ["description"]=>
      string(236) "Gets the specified argument from a user-defined function's argument list.
This function may be used in conjunction with 
   func_get_args() and func_num_args()
   to allow user-defined functions to accept variable-length argument lists."
      ["return"]=>
      string(50) "Returns the specified argument, or FALSE on error."
      ["parameters"]=>
      array(1) {
        ["arg_num"]=>
        string(78) "The argument offset. Function arguments are counted starting from
       zero."
      }
      ["flatparameters"]=>
      string(7) "arg_num"
      ["notes"]=>
      string(632) "Note: Because this function depends on the
current scope to determine parameter details, it cannot be used as a
function parameter in versions prior to 5.3.0. If this value must be passed, the results should be assigned
to a variable, and that variable should be passed.
Note: If the arguments are passed by reference,
any changes to the arguments will be reflected in the values returned by this function. As of PHP 7
the current values will also be returned if the arguments are passed by value.
Note: 
   
    This function returns a copy of the passed arguments only, and does not
    account for default (non-passed) arguments."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.3.0"]=>
        string(229) "If this function is called from the outermost scope of a file
        which has been included by calling include
        or require from within a function in the
        calling file, it now generates a warning and returns FALSE."
      }
    }
    [6]=>
    array(13) {
      ["name"]=>
      string(13) "func_get_args"
      ["summary"]=>
      string(54) "Returns an array comprising a function's argument list"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(28) "array func_get_args ( void )"
      ["anonsig"]=>
      string(21) "array ?????? ( void )"
      ["description"]=>
      string(208) "Gets an array of the function's argument list.
This function may be used in conjunction with 
   func_get_arg() and func_num_args()
   to allow user-defined functions to accept variable-length argument lists."
      ["return"]=>
      string(133) "Returns an array in which each element is a copy of the corresponding
   member of the current user-defined function's argument list."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(632) "Note: Because this function depends on the
current scope to determine parameter details, it cannot be used as a
function parameter in versions prior to 5.3.0. If this value must be passed, the results should be assigned
to a variable, and that variable should be passed.
Note: If the arguments are passed by reference,
any changes to the arguments will be reflected in the values returned by this function. As of PHP 7
the current values will also be returned if the arguments are passed by value.
Note: 
   
    This function returns a copy of the passed arguments only, and does not
    account for default (non-passed) arguments."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.3.0"]=>
        string(229) "If this function is called from the outermost scope of a file
        which has been included by calling include
        or require from within a function in the
        calling file, it now generates a warning and returns FALSE."
      }
    }
    [7]=>
    array(13) {
      ["name"]=>
      string(13) "func_num_args"
      ["summary"]=>
      string(54) "Returns the number of arguments passed to the function"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(26) "int func_num_args ( void )"
      ["anonsig"]=>
      string(19) "int ?????? ( void )"
      ["description"]=>
      string(214) "Gets the number of arguments passed to the function.
This function may be used in conjunction with 
   func_get_arg() and func_get_args()
   to allow user-defined functions to accept variable-length argument lists."
      ["return"]=>
      string(81) "Returns the number of arguments passed into the current user-defined
   function."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(270) "Note: Because this function depends on the
current scope to determine parameter details, it cannot be used as a
function parameter in versions prior to 5.3.0. If this value must be passed, the results should be assigned
to a variable, and that variable should be passed."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.3.0"]=>
        string(226) "If this function is called from the outermost scope of a file
        which has been included by calling include
        or require from within a function in the
        calling file, it now generates a warning and returns -1."
      }
    }
    [8]=>
    array(13) {
      ["name"]=>
      string(15) "function_exists"
      ["summary"]=>
      string(50) "Return TRUE if the given function has been defined"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(46) "bool function_exists ( string $function_name )"
      ["anonsig"]=>
      string(37) "bool ?????? ( string $function_name )"
      ["description"]=>
      string(102) "Checks the list of defined functions, both built-in (internal) and
   user-defined, for function_name."
      ["return"]=>
      string(165) "Returns TRUE if function_name exists and is a
   function, FALSE otherwise.
Note:
This function will return FALSE for constructs, such as 
    include_once and echo."
      ["parameters"]=>
      array(1) {
        ["function_name"]=>
        string(31) "The function name, as a string."
      }
      ["flatparameters"]=>
      string(13) "function_name"
      ["notes"]=>
      string(270) "Note: 
   
    This function will return FALSE for constructs, such as 
    include_once and echo.
Note: 
   
    A function name may exist even if the function itself is unusable due to
    configuration or compiling options (with the image functions being an example)."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [9]=>
    array(13) {
      ["name"]=>
      string(21) "get_defined_functions"
      ["summary"]=>
      string(41) "Returns an array of all defined functions"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.4, PHP 5, PHP 7)"
      ["signature"]=>
      string(65) "array get_defined_functions ([ bool $exclude_disabled = FALSE ] )"
      ["anonsig"]=>
      string(50) "array ?????? ([ bool $exclude_disabled = FALSE ] )"
      ["description"]=>
      string(39) "Gets an array of all defined functions."
      ["return"]=>
      string(261) "Returns a multidimensional array containing a list of all defined
   functions, both built-in (internal) and user-defined. The internal
   functions will be accessible via $arr["internal"], and
   the user defined ones using $arr["user"] (see example
   below)."
      ["parameters"]=>
      array(1) {
        ["exclude_disabled"]=>
        string(68) "Whether disabled functions should be excluded from the return value."
      }
      ["flatparameters"]=>
      string(16) "exclude_disabled"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["PHP 7.0.15, PHP 7.1.1"]=>
        string(46) "The exclude_disabled parameter has been added."
      }
    }
    [10]=>
    array(13) {
      ["name"]=>
      string(26) "register_shutdown_function"
      ["summary"]=>
      string(45) "Register a function for execution on shutdown"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(91) "void register_shutdown_function ( callable $callback [, mixed $parameter [, mixed $... ]] )"
      ["anonsig"]=>
      string(71) "void ?????? ( callable $callback [, mixed $parameter [, mixed $... ]] )"
      ["description"]=>
      string(381) "Registers a callback to be executed after script
   execution finishes or exit() is called.
Multiple calls to register_shutdown_function() can be
   made, and each will be called in the same order as they were registered.
   If you call exit() within one registered shutdown
   function, processing will stop completely and no other registered
   shutdown functions will be called."
      ["return"]=>
      string(21) "No value is returned."
      ["parameters"]=>
      array(3) {
        ["callback"]=>
        string(195) "The shutdown callback to register.
      
      
       The shutdown callbacks are executed as the part of the request, so
       it's possible to send output from them and access output buffers."
        ["parameter"]=>
        string(99) "It is possible to pass parameters to the shutdown function by passing
       additional parameters."
        ["..."]=>
        string(0) ""
      }
      ["flatparameters"]=>
      string(24) "callback, parameter, ..."
      ["notes"]=>
      string(387) "Note: 
   
    Working directory of the script can change inside the shutdown function
    under some web servers, e.g. Apache.
Note: 
   
    Shutdown functions will not be executed if the process is killed with a SIGTERM
    or SIGKILL signal. While you cannot intercept a SIGKILL, you can use pcntl_signal()
    to install a handler for a SIGTERM which uses exit() to
    end cleanly."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [11]=>
    array(13) {
      ["name"]=>
      string(22) "register_tick_function"
      ["summary"]=>
      string(46) "Register a function for execution on each tick"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.3, PHP 5, PHP 7)"
      ["signature"]=>
      string(81) "bool register_tick_function ( callable $function [, mixed $arg [, mixed $... ]] )"
      ["anonsig"]=>
      string(65) "bool ?????? ( callable $function [, mixed $arg [, mixed $... ]] )"
      ["description"]=>
      string(69) "Registers the given function to be executed when a
   tick is called."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(3) {
        ["function"]=>
        string(87) "The function name as a string, or an array consisting of an object and
       a method."
        ["arg"]=>
        string(0) ""
        ["..."]=>
        string(0) ""
      }
      ["flatparameters"]=>
      string(18) "function, arg, ..."
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(119) "Warning
   
    register_tick_function() should not be used with
    threaded web server modules with PHP 5.2 or lower."
      ["changelog"]=>
      array(1) {
        ["5.3.0"]=>
        string(55) "Ticks are now supported on threaded web server modules."
      }
    }
    [12]=>
    array(13) {
      ["name"]=>
      string(24) "unregister_tick_function"
      ["summary"]=>
      string(49) "De-register a function for execution on each tick"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.3, PHP 5, PHP 7)"
      ["signature"]=>
      string(55) "void unregister_tick_function ( string $function_name )"
      ["anonsig"]=>
      string(37) "void ?????? ( string $function_name )"
      ["description"]=>
      string(105) "De-registers the function named by function_name so it is
   no longer executed when a tick is
   called."
      ["return"]=>
      string(21) "No value is returned."
      ["parameters"]=>
      array(1) {
        ["function_name"]=>
        string(31) "The function name, as a string."
      }
      ["flatparameters"]=>
      string(13) "function_name"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
  }
  ["OOP"]=>
  array(20) {
    [0]=>
    array(13) {
      ["name"]=>
      string(10) "__autoload"
      ["summary"]=>
      string(31) "Attempt to load undefined class"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(33) "void __autoload ( string $class )"
      ["anonsig"]=>
      string(29) "void ?????? ( string $class )"
      ["description"]=>
      string(59) "You can define this function to enable classes autoloading."
      ["return"]=>
      string(21) "No value is returned."
      ["parameters"]=>
      array(1) {
        ["class"]=>
        string(25) "Name of the class to load"
      }
      ["flatparameters"]=>
      string(5) "class"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(103) "WarningThis feature has been
DEPRECATED as of PHP 7.2.0. Relying on this feature
is highly discouraged."
      ["changelog"]=>
      array(0) {
      }
    }
    [1]=>
    array(12) {
      ["name"]=>
      string(22) "call_user_method_array"
      ["summary"]=>
      string(52) "Call a user method given with an array of parameters"
      ["versions"]=>
      string(23) "(PHP 4 >= 4.0.5, PHP 5)"
      ["signature"]=>
      string(83) "mixed call_user_method_array ( string $method_name , object &$obj , array $params )"
      ["anonsig"]=>
      string(67) "mixed ?????? ( string $method_name , object &$obj , array $params )"
      ["description"]=>
      string(0) ""
      ["parameters"]=>
      array(3) {
        ["method_name"]=>
        string(29) "The method name being called."
        ["obj"]=>
        string(54) "The object that method_name
       is being called on."
        ["params"]=>
        string(23) "An array of parameters."
      }
      ["flatparameters"]=>
      string(24) "method_name, obj, params"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(153) "Warning
   

 This function was DEPRECATED in PHP 4.1.0, and
 REMOVED in PHP 7.0.0.


 Alternatives to this function include:


   call_user_func_array()"
      ["changelog"]=>
      array(0) {
      }
    }
    [2]=>
    array(12) {
      ["name"]=>
      string(16) "call_user_method"
      ["summary"]=>
      string(40) "Call a user method on an specific object"
      ["versions"]=>
      string(14) "(PHP 4, PHP 5)"
      ["signature"]=>
      string(98) "mixed call_user_method ( string $method_name , object &$obj [, mixed $parameter [, mixed $... ]] )"
      ["anonsig"]=>
      string(88) "mixed ?????? ( string $method_name , object &$obj [, mixed $parameter [, mixed $... ]] )"
      ["description"]=>
      string(0) ""
      ["parameters"]=>
      array(3) {
        ["method_name"]=>
        string(29) "The method name being called."
        ["obj"]=>
        string(54) "The object that method_name
       is being called on."
        ["parameter ..."]=>
        string(24) "The optional parameters."
      }
      ["flatparameters"]=>
      string(31) "method_name, obj, parameter ..."
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(147) "Warning
   

 This function was DEPRECATED in PHP 4.1.0, and
 REMOVED in PHP 7.0.0.


 Alternatives to this function include:


   call_user_func()"
      ["changelog"]=>
      array(0) {
      }
    }
    [3]=>
    array(13) {
      ["name"]=>
      string(11) "class_alias"
      ["summary"]=>
      string(28) "Creates an alias for a class"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.3.0, PHP 7)"
      ["signature"]=>
      string(80) "bool class_alias ( string $original , string $alias [, bool $autoload = TRUE ] )"
      ["anonsig"]=>
      string(75) "bool ?????? ( string $original , string $alias [, bool $autoload = TRUE ] )"
      ["description"]=>
      string(137) "Creates an alias named alias
   based on the user defined class original.
   The aliased class is exactly the same as the original class."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(3) {
        ["original"]=>
        string(19) "The original class."
        ["alias"]=>
        string(29) "The alias name for the class."
        ["autoload"]=>
        string(55) "Whether to autoload if the original class is not found."
      }
      ["flatparameters"]=>
      string(25) "original, alias, autoload"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [4]=>
    array(13) {
      ["name"]=>
      string(12) "class_exists"
      ["summary"]=>
      string(36) "Checks if the class has been defined"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(67) "bool class_exists ( string $class_name [, bool $autoload = true ] )"
      ["anonsig"]=>
      string(61) "bool ?????? ( string $class_name [, bool $autoload = true ] )"
      ["description"]=>
      string(69) "This function checks whether or not the given class has been defined."
      ["return"]=>
      string(66) "Returns TRUE if class_name is a defined class,
   FALSE otherwise."
      ["parameters"]=>
      array(2) {
        ["class_name"]=>
        string(65) "The class name. The name is matched in a case-insensitive manner."
        ["autoload"]=>
        string(45) "Whether or not to call __autoload by default."
      }
      ["flatparameters"]=>
      string(20) "class_name, autoload"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.0.2"]=>
        string(78) "No longer returns TRUE for defined interfaces. Use
        interface_exists()."
      }
    }
    [5]=>
    array(13) {
      ["name"]=>
      string(16) "get_called_class"
      ["summary"]=>
      string(36) "the "Late Static Binding" class name"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.3.0, PHP 7)"
      ["signature"]=>
      string(32) "string get_called_class ( void )"
      ["anonsig"]=>
      string(22) "string ?????? ( void )"
      ["description"]=>
      string(58) "Gets the name of the class the static method is called in."
      ["return"]=>
      string(70) "Returns the class name.  Returns FALSE if called from outside a class."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [6]=>
    array(13) {
      ["name"]=>
      string(17) "get_class_methods"
      ["summary"]=>
      string(29) "Gets the class methods' names"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(45) "array get_class_methods ( mixed $class_name )"
      ["anonsig"]=>
      string(34) "array ?????? ( mixed $class_name )"
      ["description"]=>
      string(29) "Gets the class methods names."
      ["return"]=>
      string(120) "Returns an array of method names defined for the class specified by
   class_name. In case of an error, it returns NULL."
      ["parameters"]=>
      array(1) {
        ["class_name"]=>
        string(36) "The class name or an object instance"
      }
      ["flatparameters"]=>
      string(10) "class_name"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [7]=>
    array(13) {
      ["name"]=>
      string(14) "get_class_vars"
      ["summary"]=>
      string(39) "Get the default properties of the class"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(43) "array get_class_vars ( string $class_name )"
      ["anonsig"]=>
      string(35) "array ?????? ( string $class_name )"
      ["description"]=>
      string(46) "Get the default properties of the given class."
      ["return"]=>
      string(227) "Returns an associative array of declared properties visible from the
   current scope, with their default value.
   The resulting array elements are in the form of 
   varname => value.
   In case of an error, it returns FALSE."
      ["parameters"]=>
      array(1) {
        ["class_name"]=>
        string(14) "The class name"
      }
      ["flatparameters"]=>
      string(10) "class_name"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(3) {
        ["5.0.3"]=>
        string(111) "get_class_vars() will 
        only return the properties that can be accessed from the current 
        scope."
        ["5.0.2"]=>
        string(185) "Calling get_class_vars() will now expose 
        all the properties as an array, unlike previous behaviour where 
        protected and private properties were prefixed with nul bytes."
        ["5.0.1"]=>
        string(102) "Calling get_class_vars() will expose all 
        properties, as when converting an object to a class."
      }
    }
    [8]=>
    array(13) {
      ["name"]=>
      string(9) "get_class"
      ["summary"]=>
      string(42) "Returns the name of the class of an object"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(38) "string get_class ([ object $object ] )"
      ["anonsig"]=>
      string(35) "string ?????? ([ object $object ] )"
      ["description"]=>
      string(47) "Gets the name of the class of the given object."
      ["return"]=>
      string(321) "Returns the name of the class of which object is an
   instance. Returns FALSE if object is not an 
   object.
If object is omitted when inside a class, the
   name of that class is returned.
If the object is an instance of a class which exists 
   in a namespace, the qualified namespaced name of that class is returned."
      ["parameters"]=>
      array(1) {
        ["object"]=>
        string(384) "The tested object. This parameter may be omitted when inside a class.
      
      Note: 
       
        Explicitly passing NULL as the object is no
        longer allowed as of PHP 7.2.0.
       
       
        The parameter is still optional and calling get_class()
        without a parameter from inside a class will work, but passing NULL now
        emits an E_WARNING notice."
      }
      ["flatparameters"]=>
      string(6) "object"
      ["notes"]=>
      string(301) "Note: 
       
        Explicitly passing NULL as the object is no
        longer allowed as of PHP 7.2.0.
       
       
        The parameter is still optional and calling get_class()
        without a parameter from inside a class will work, but passing NULL now
        emits an E_WARNING notice."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(2) {
        ["7.2.0"]=>
        string(89) "NULL was removed as the default value for object,
        and is no longer a valid input."
        ["5.3.0"]=>
        string(133) "NULL became the default value for object,
        so passing NULL to object now has the same
        result as not passing any value."
      }
    }
    [9]=>
    array(13) {
      ["name"]=>
      string(20) "get_declared_classes"
      ["summary"]=>
      string(53) "Returns an array with the name of the defined classes"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(35) "array get_declared_classes ( void )"
      ["anonsig"]=>
      string(21) "array ?????? ( void )"
      ["description"]=>
      string(26) "Gets the declared classes."
      ["return"]=>
      string(389) "Returns an array of the names of the declared classes in the current
   script.
Note:
Note that depending on what extensions you have compiled or
    loaded into PHP, additional classes could be present. This means that
    you will not be able to define your own classes using these
    names. There is a list of predefined classes in the Predefined Classes section of
    the appendices."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(318) "Note: 
   
    Note that depending on what extensions you have compiled or
    loaded into PHP, additional classes could be present. This means that
    you will not be able to define your own classes using these
    names. There is a list of predefined classes in the Predefined Classes section of
    the appendices."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [10]=>
    array(13) {
      ["name"]=>
      string(23) "get_declared_interfaces"
      ["summary"]=>
      string(43) "Returns an array of all declared interfaces"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(38) "array get_declared_interfaces ( void )"
      ["anonsig"]=>
      string(21) "array ?????? ( void )"
      ["description"]=>
      string(29) "Gets the declared interfaces."
      ["return"]=>
      string(82) "Returns an array of the names of the declared interfaces in the current
   script."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [11]=>
    array(13) {
      ["name"]=>
      string(19) "get_declared_traits"
      ["summary"]=>
      string(39) "Returns an array of all declared traits"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.4.0, PHP 7)"
      ["signature"]=>
      string(34) "array get_declared_traits ( void )"
      ["anonsig"]=>
      string(21) "array ?????? ( void )"
      ["description"]=>
      string(0) ""
      ["return"]=>
      string(99) "Returns an array with names of all declared traits in values.
   Returns NULL in case of a failure."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [12]=>
    array(13) {
      ["name"]=>
      string(15) "get_object_vars"
      ["summary"]=>
      string(39) "Gets the properties of the given object"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(40) "array get_object_vars ( object $object )"
      ["anonsig"]=>
      string(31) "array ?????? ( object $object )"
      ["description"]=>
      string(85) "Gets the accessible non-static properties of the given 
   object according to scope."
      ["return"]=>
      string(205) "Returns an associative array of defined object accessible non-static properties 
   for the specified object in scope. If a property has
   not been assigned a value, it will be returned with a NULL value."
      ["parameters"]=>
      array(1) {
        ["object"]=>
        string(19) "An object instance."
      }
      ["flatparameters"]=>
      string(6) "object"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.3.0"]=>
        string(101) "This function now returns NULL if the 
        object isn't an object. Previously FALSE was returned."
      }
    }
    [13]=>
    array(13) {
      ["name"]=>
      string(16) "get_parent_class"
      ["summary"]=>
      string(51) "Retrieves the parent class name for object or class"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(44) "string get_parent_class ([ mixed $object ] )"
      ["anonsig"]=>
      string(34) "string ?????? ([ mixed $object ] )"
      ["description"]=>
      string(52) "Retrieves the parent class name for object or class."
      ["return"]=>
      string(270) "Returns the name of the parent class of the class of which
   object is an instance or the name.
Note:
If the object does not have a parent or the class given does not exist FALSE will be returned.
If called without parameter outside object, this function returns FALSE."
      ["parameters"]=>
      array(1) {
        ["object"]=>
        string(102) "The tested object or class name. This parameter is optional if called
       from the object's method."
      }
      ["flatparameters"]=>
      string(6) "object"
      ["notes"]=>
      string(109) "Note: 
   
    If the object does not have a parent or the class given does not exist FALSE will be returned."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.1.0"]=>
        string(129) "If called without parameter outside object, this function would have
        returned NULL with a warning, but now returns FALSE."
      }
    }
    [14]=>
    array(13) {
      ["name"]=>
      string(16) "interface_exists"
      ["summary"]=>
      string(40) "Checks if the interface has been defined"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.0.2, PHP 7)"
      ["signature"]=>
      string(75) "bool interface_exists ( string $interface_name [, bool $autoload = true ] )"
      ["anonsig"]=>
      string(65) "bool ?????? ( string $interface_name [, bool $autoload = true ] )"
      ["description"]=>
      string(47) "Checks if the given interface has been defined."
      ["return"]=>
      string(92) "Returns TRUE if the interface given by 
   interface_name has been defined, FALSE otherwise."
      ["parameters"]=>
      array(2) {
        ["interface_name"]=>
        string(18) "The interface name"
        ["autoload"]=>
        string(45) "Whether to call __autoload or not by default."
      }
      ["flatparameters"]=>
      string(24) "interface_name, autoload"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [15]=>
    array(13) {
      ["name"]=>
      string(4) "is_a"
      ["summary"]=>
      string(77) "Checks if the object is of this class or has this class as one of its parents"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.2.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(81) "bool is_a ( object $object , string $class_name [, bool $allow_string = FALSE ] )"
      ["anonsig"]=>
      string(83) "bool ?????? ( object $object , string $class_name [, bool $allow_string = FALSE ] )"
      ["description"]=>
      string(87) "Checks if the given object is of this class or has
   this class as one of its parents."
      ["return"]=>
      string(104) "Returns TRUE if the object is of this class or has this class as one of
   its parents, FALSE otherwise."
      ["parameters"]=>
      array(3) {
        ["object"]=>
        string(17) "The tested object"
        ["class_name"]=>
        string(14) "The class name"
        ["allow_string"]=>
        string(153) "If this parameter set to FALSE, string class name as object
       is not allowed. This also prevents from calling autoloader if the class doesn't exist."
      }
      ["flatparameters"]=>
      string(32) "object, class_name, allow_string"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(3) {
        ["5.3.9"]=>
        string(28) "Added allow_string parameter"
        ["5.3.0"]=>
        string(101) "This function is no longer deprecated, and will therefore 
        no longer throw E_STRICT warnings."
        ["5.0.0"]=>
        string(154) "This function became deprecated in favour of the 
        instanceof 
        operator. Calling this function will result in an 
        E_STRICT warning."
      }
    }
    [16]=>
    array(13) {
      ["name"]=>
      string(14) "is_subclass_of"
      ["summary"]=>
      string(75) "Checks if the object has this class as one of its parents or implements it."
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(89) "bool is_subclass_of ( mixed $object , string $class_name [, bool $allow_string = TRUE ] )"
      ["anonsig"]=>
      string(81) "bool ?????? ( mixed $object , string $class_name [, bool $allow_string = TRUE ] )"
      ["description"]=>
      string(94) "Checks if the given object has the class
   class_name as one of its parents or implements it."
      ["return"]=>
      string(125) "This function returns TRUE if the object object,
   belongs to a class which is a subclass of
   class_name, FALSE otherwise."
      ["parameters"]=>
      array(3) {
        ["object"]=>
        string(86) "A class name or an object instance. No error is generated if the class does not exist."
        ["class_name"]=>
        string(14) "The class name"
        ["allow_string"]=>
        string(153) "If this parameter set to false, string class name as object
       is not allowed. This also prevents from calling autoloader if the class doesn't exist."
      }
      ["flatparameters"]=>
      string(32) "object, class_name, allow_string"
      ["notes"]=>
      string(97) "Note: 
Using this function will use any registered
autoloaders if the class is not already known."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(3) {
        ["5.3.9"]=>
        string(28) "Added allow_string parameter"
        ["5.3.7"]=>
        string(60) "Added support for class_name to work with
        interfaces"
        ["5.0.3"]=>
        string(85) "You may also specify the object parameter as a
        string (the name of the class)"
      }
    }
    [17]=>
    array(13) {
      ["name"]=>
      string(13) "method_exists"
      ["summary"]=>
      string(33) "Checks if the class method exists"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(58) "bool method_exists ( mixed $object , string $method_name )"
      ["anonsig"]=>
      string(51) "bool ?????? ( mixed $object , string $method_name )"
      ["description"]=>
      string(57) "Checks if the class method exists in the given
   object."
      ["return"]=>
      string(110) "Returns TRUE if the method given by method_name
   has been defined for the given object, FALSE 
   otherwise."
      ["parameters"]=>
      array(2) {
        ["object"]=>
        string(34) "An object instance or a class name"
        ["method_name"]=>
        string(15) "The method name"
      }
      ["flatparameters"]=>
      string(19) "object, method_name"
      ["notes"]=>
      string(97) "Note: 
Using this function will use any registered
autoloaders if the class is not already known."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [18]=>
    array(13) {
      ["name"]=>
      string(15) "property_exists"
      ["summary"]=>
      string(44) "Checks if the object or class has a property"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.1.0, PHP 7)"
      ["signature"]=>
      string(56) "bool property_exists ( mixed $class , string $property )"
      ["anonsig"]=>
      string(47) "bool ?????? ( mixed $class , string $property )"
      ["description"]=>
      string(187) "This function checks if the given property exists in
   the specified class.
Note:
As opposed with isset(),
    property_exists() returns TRUE even if the property
    has the value NULL."
      ["return"]=>
      string(94) "Returns TRUE if the property exists, FALSE if it doesn't exist or
   NULL in case of an error."
      ["parameters"]=>
      array(2) {
        ["class"]=>
        string(52) "The class name or an object of the class to test for"
        ["property"]=>
        string(24) "The name of the property"
      }
      ["flatparameters"]=>
      string(15) "class, property"
      ["notes"]=>
      string(356) "Note: 
   
    As opposed with isset(),
    property_exists() returns TRUE even if the property
    has the value NULL.
Note: 
Using this function will use any registered
autoloaders if the class is not already known.
Note: 
   
    The property_exists() function cannot detect properties
    that are magically accessible using the __get
    magic method."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.3.0"]=>
        string(87) "This function checks the existence of a property independent of 
        accessibility."
      }
    }
    [19]=>
    array(13) {
      ["name"]=>
      string(12) "trait_exists"
      ["summary"]=>
      string(26) "Checks if the trait exists"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.4.0, PHP 7)"
      ["signature"]=>
      string(59) "bool trait_exists ( string $traitname [, bool $autoload ] )"
      ["anonsig"]=>
      string(53) "bool ?????? ( string $traitname [, bool $autoload ] )"
      ["description"]=>
      string(0) ""
      ["return"]=>
      string(69) "Returns TRUE if trait exists, FALSE if not, NULL in case of an error."
      ["parameters"]=>
      array(2) {
        ["traitname"]=>
        string(26) "Name of the trait to check"
        ["autoload"]=>
        string(42) "Whether to autoload if not already loaded."
      }
      ["flatparameters"]=>
      string(19) "traitname, autoload"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
  }
  ["Security"]=>
  array(4) {
    [0]=>
    array(13) {
      ["name"]=>
      string(17) "password_get_info"
      ["summary"]=>
      string(40) "Returns information about the given hash"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.5.0, PHP 7)"
      ["signature"]=>
      string(40) "array password_get_info ( string $hash )"
      ["anonsig"]=>
      string(29) "array ?????? ( string $hash )"
      ["description"]=>
      string(154) "When passed in a valid hash created by an algorithm supported by
   password_hash(), this function will return an array of
   information about that hash."
      ["return"]=>
      string(49) "Returns an associative array with three elements:"
      ["parameters"]=>
      array(1) {
        ["hash"]=>
        string(34) "A hash created by password_hash()."
      }
      ["flatparameters"]=>
      string(4) "hash"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [1]=>
    array(13) {
      ["name"]=>
      string(13) "password_hash"
      ["summary"]=>
      string(23) "Creates a password hash"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.5.0, PHP 7)"
      ["signature"]=>
      string(77) "string password_hash ( string $password , integer $algo [, array $options ] )"
      ["anonsig"]=>
      string(70) "string ?????? ( string $password , integer $algo [, array $options ] )"
      ["description"]=>
      string(999) "password_hash() creates a new password hash using a strong one-way hashing
   algorithm. password_hash() is compatible with crypt().
   Therefore, password hashes created by crypt() can be used with
   password_hash().
The following algorithms are currently supported:

Supported Options:

salt - to manually provide a salt to use when hashing the password.
      Note that this will override and prevent a salt from being automatically generated.
If omitted, a random salt will be generated by password_hash() for
      each password hashed. This is the intended mode of operation.
The salt option has been deprecated as of PHP 7.0.0. It is now
       preferred to simply use the salt that is generated by default.
cost - which denotes the algorithmic cost that should be used. 
      Examples of these values can be found on the crypt() page.
If omitted, a default value of 10 will be used. This is a good
      baseline cost, but you may want to consider increasing it depending on your hardware."
      ["return"]=>
      string(340) "Returns the hashed password,  or FALSE on failure.
The used algorithm, cost and salt are returned as part of the hash. Therefore,
   all information that's needed to verify the hash is included in it. This allows
   the password_verify() function to verify the hash without
   needing separate storage for the salt or algorithm information."
      ["parameters"]=>
      array(3) {
        ["password"]=>
        string(216) "The user's password.
     
      Caution
       
        Using the PASSWORD_BCRYPT as the
        algorithm, will result
        in the password parameter being truncated to a
        maximum length of 72 characters."
        ["algo"]=>
        string(86) "A password algorithm constant denoting the algorithm to use when hashing the password."
        ["options"]=>
        string(241) "An associative array containing options. See the password algorithm constants for documentation on the supported options for each algorithm.
     
     
      If omitted, a random salt will be created and the default cost will be
      used."
      }
      ["flatparameters"]=>
      string(23) "password, algo, options"
      ["notes"]=>
      string(1086) "Note: 
   
    It is recommended that you test this function on your servers, and adjust the cost parameter 
    so that execution of the function takes less than 100 milliseconds on interactive systems. 
    The script in the above example will help you choose a good cost value for your hardware.
Note: 
   
    Updates to supported algorithms by this function (or changes to the default one) must follow 
    the following rules:
   
   
    
      
      Any new algorithm must be in core for at least 1 full release of PHP
      prior to becoming default. So if, for example, a new algorithm is added
      in 7.5.5, it would not be eligible for default until 7.7 (since 7.6
      would be the first full release). But if a different algorithm was added
      in 7.6.0, it would also be eligible for default at 7.7.0.
      
     
     
      
       The default should only change in a full release (7.3.0, 8.0.0, etc)
       and not in a revision release.  The only exception to this is in an
       emergency when a critical security flaw is found in the current
       default."
      ["cautions"]=>
      string(559) "Caution
       
        Using the PASSWORD_BCRYPT as the
        algorithm, will result
        in the password parameter being truncated to a
        maximum length of 72 characters.
Caution
   
    It is strongly recommended that you do not generate your own salt for this
    function.  It will create a secure salt automatically for you if you do
    not specify one.
   
   
    As noted above, providing the salt option in PHP 7.0
    will generate a deprecation warning. Support for providing a salt manually
    may be removed in a future PHP release."
      ["warnings"]=>
      string(154) "Warning
      
       The salt option has been deprecated as of PHP 7.0.0. It is now
       preferred to simply use the salt that is generated by default."
      ["changelog"]=>
      array(0) {
      }
    }
    [2]=>
    array(13) {
      ["name"]=>
      string(21) "password_needs_rehash"
      ["summary"]=>
      string(50) "Checks if the given hash matches the given options"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.5.0, PHP 7)"
      ["signature"]=>
      string(82) "boolean password_needs_rehash ( string $hash , integer $algo [, array $options ] )"
      ["anonsig"]=>
      string(67) "boolean ?????? ( string $hash , integer $algo [, array $options ] )"
      ["description"]=>
      string(159) "This function checks to see if the supplied hash implements the algorithm
   and options provided. If not, it is assumed that the hash needs to be
   rehashed."
      ["return"]=>
      string(106) "Returns TRUE if the hash should be rehashed to match the given
   algo and options, or FALSE
   otherwise."
      ["parameters"]=>
      array(3) {
        ["hash"]=>
        string(34) "A hash created by password_hash()."
        ["algo"]=>
        string(86) "A password algorithm constant denoting the algorithm to use when hashing the password."
        ["options"]=>
        string(140) "An associative array containing options. See the password algorithm constants for documentation on the supported options for each algorithm."
      }
      ["flatparameters"]=>
      string(19) "hash, algo, options"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [3]=>
    array(13) {
      ["name"]=>
      string(15) "password_verify"
      ["summary"]=>
      string(39) "Verifies that a password matches a hash"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.5.0, PHP 7)"
      ["signature"]=>
      string(59) "boolean password_verify ( string $password , string $hash )"
      ["anonsig"]=>
      string(50) "boolean ?????? ( string $password , string $hash )"
      ["description"]=>
      string(407) "Verifies that the given hash matches the given password.
Note that password_hash() returns the algorithm, cost and salt 
   as part of the returned hash. Therefore, all information that's needed to verify
   the hash is included in it. This allows the verify function to verify the hash
   without needing separate storage for the salt or algorithm information.
This function is safe against timing attacks."
      ["return"]=>
      string(64) "Returns TRUE if the password and hash match, or FALSE otherwise."
      ["parameters"]=>
      array(2) {
        ["password"]=>
        string(20) "The user's password."
        ["hash"]=>
        string(34) "A hash created by password_hash()."
      }
      ["flatparameters"]=>
      string(14) "password, hash"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
  }
  ["Web features"]=>
  array(26) {
    [0]=>
    array(13) {
      ["name"]=>
      string(13) "session_abort"
      ["summary"]=>
      string(48) "Discard session array changes and finish session"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.6.0, PHP 7)"
      ["signature"]=>
      string(27) "void session_abort ( void )"
      ["anonsig"]=>
      string(20) "void ?????? ( void )"
      ["description"]=>
      string(107) "session_abort() finishes session without saving
   data. Thus the original values in session data are kept."
      ["return"]=>
      string(21) "No value is returned."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [1]=>
    array(13) {
      ["name"]=>
      string(20) "session_cache_expire"
      ["summary"]=>
      string(27) "Return current cache expire"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.2.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(56) "int session_cache_expire ([ string $new_cache_expire ] )"
      ["anonsig"]=>
      string(42) "int ?????? ([ string $new_cache_expire ] )"
      ["description"]=>
      string(304) "session_cache_expire() returns the current setting of
   session.cache_expire.
The cache expire is reset to the default value of 180 stored in
   session.cache_expire
   at request startup time. Thus,
   you need to call session_cache_expire() for every
   request (and before session_start() is called)."
      ["return"]=>
      string(118) "Returns the current setting of session.cache_expire.
   The value returned should be read in minutes, defaults to 180."
      ["parameters"]=>
      array(1) {
        ["new_cache_expire"]=>
        string(270) "If new_cache_expire is given, the current cache
       expire is replaced with new_cache_expire.
      
      
       Note: 
        
         Setting new_cache_expire is of value only, if
         session.cache_limiter is set to a value
         different from nocache."
      }
      ["flatparameters"]=>
      string(16) "new_cache_expire"
      ["notes"]=>
      string(152) "Note: 
        
         Setting new_cache_expire is of value only, if
         session.cache_limiter is set to a value
         different from nocache."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [2]=>
    array(13) {
      ["name"]=>
      string(21) "session_cache_limiter"
      ["summary"]=>
      string(40) "Get and/or set the current cache limiter"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.3, PHP 5, PHP 7)"
      ["signature"]=>
      string(57) "string session_cache_limiter ([ string $cache_limiter ] )"
      ["anonsig"]=>
      string(42) "string ?????? ([ string $cache_limiter ] )"
      ["description"]=>
      string(1072) "session_cache_limiter() returns the name of the
   current cache limiter.
The cache limiter defines which cache control HTTP headers are sent to
   the client.  These headers determine the rules by which the page content
   may be cached by the client and intermediate proxies.  Setting the cache
   limiter to nocache disallows any client/proxy caching.
   A value of public permits caching by proxies and the
   client, whereas private disallows caching by proxies
   and permits the client to cache the contents.
In private mode, the Expire header sent to the client
   may cause confusion for some browsers, including Mozilla.
   You can avoid this problem by using private_no_expire mode. The
   Expire header is never sent to the client in this mode.
Setting the cache limiter to '' will turn off automatic sending
   of cache headers entirely.
The cache limiter is reset to the default value stored in
   session.cache_limiter
   at request startup time. Thus, you need to call
   session_cache_limiter() for every
   request (and before session_start() is called)."
      ["return"]=>
      string(46) "Returns the name of the current cache limiter."
      ["parameters"]=>
      array(1) {
        ["cache_limiter"]=>
        string(1184) "If cache_limiter is specified, the name of the
       current cache limiter is changed to the new value.
      
      Possible values
       
        Value
          Headers sent
         public
          
           
Expires: (sometime in the future, according session.cache_expire)
Cache-Control: public, max-age=(sometime in the future, according to session.cache_expire)
Last-Modified: (the timestamp of when the session was last saved)

           

          
         private_no_expire
          
           
Cache-Control: private, max-age=(session.cache_expire in the future), pre-check=(session.cache_expire in the future)
Last-Modified: (the timestamp of when the session was last saved)

           

          
         private
          
           
Expires: Thu, 19 Nov 1981 08:52:00 GMT
Cache-Control: private, max-age=(session.cache_expire in the future), pre-check=(session.cache_expire in the future)
Last-Modified: (the timestamp of when the session was last saved)

           

          
         nocache
          
           
Expires: Thu, 19 Nov 1981 08:52:00 GMT
Cache-Control: no-store, no-cache, must-revalidate, post-check=0, pre-check=0
Pragma: no-cache"
      }
      ["flatparameters"]=>
      string(13) "cache_limiter"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [3]=>
    array(12) {
      ["name"]=>
      string(14) "session_commit"
      ["summary"]=>
      string(30) "Alias of session_write_close()"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.4.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(52) "This function is an alias of: session_write_close()."
      ["anonsig"]=>
      string(52) "This function is an alias of: session_write_close()."
      ["description"]=>
      string(56) "This function is an alias of: 
   session_write_close()."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [4]=>
    array(13) {
      ["name"]=>
      string(17) "session_create_id"
      ["summary"]=>
      string(21) "Create new session id"
      ["versions"]=>
      string(16) "(PHP 7 >= 7.1.0)"
      ["signature"]=>
      string(46) "string session_create_id ([ string $prefix ] )"
      ["anonsig"]=>
      string(35) "string ?????? ([ string $prefix ] )"
      ["description"]=>
      string(393) "session_create_id() is used to create new
   session id for the current session. It returns collision free
   session id.
If session is not active, collision check is omitted.
Session ID is created according to php.ini settings.
It is important to use the same user ID of your web server for GC
   task script. Otherwise, you may have permission problems especially
   with files save handler."
      ["return"]=>
      string(152) "session_create_id() returns new collision free
   session id for the current session. If it is used without active
   session, it omits collision check."
      ["parameters"]=>
      array(1) {
        ["prefix"]=>
        string(221) "If prefix is specified, new session id
        is prefixed by prefix. Not all
        characters are allowed within the session id.  Characters in
        the range a-z A-Z 0-9 , (comma) and -
        (minus) are allowed."
      }
      ["flatparameters"]=>
      string(6) "prefix"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [5]=>
    array(13) {
      ["name"]=>
      string(14) "session_decode"
      ["summary"]=>
      string(50) "Decodes session data from a session encoded string"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(36) "bool session_decode ( string $data )"
      ["anonsig"]=>
      string(28) "bool ?????? ( string $data )"
      ["description"]=>
      string(308) "session_decode() decodes the serialized session data provided in
   $data, and populates the $_SESSION superglobal
   with the result.
By default, the unserialization method used is internal to PHP, and is not the same as unserialize().
   The serialization method can be set using session.serialize_handler."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(1) {
        ["data"]=>
        string(30) "The encoded data to be stored."
      }
      ["flatparameters"]=>
      string(4) "data"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [6]=>
    array(13) {
      ["name"]=>
      string(15) "session_destroy"
      ["summary"]=>
      string(41) "Destroys all data registered to a session"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(29) "bool session_destroy ( void )"
      ["anonsig"]=>
      string(20) "bool ?????? ( void )"
      ["description"]=>
      string(1636) "session_destroy() destroys all of the data associated
   with the current session. It does not unset any of the global variables
   associated with the session, or unset the session cookie.
   To use the session variables again, session_start() has
   to be called.
Note: 
   
     You do not have to call session_destroy() from usual
     code. Cleanup $_SESSION array rather than destroying session data.
In order to kill the session altogether, the
   session ID must also be unset. If a cookie is used to propagate the
   session ID (default behavior), then the session cookie must be deleted.
   setcookie() may be used for that.
When session.use_strict_mode
   is enabled. You do not have to remove obsolete session ID cookie because
   session module will not accept session ID cookie when there is no
   data associated to the session ID and set new session ID cookie.
   Enabling session.use_strict_mode
   is recommended for all sites.
Immediate session deletion may cause unwanted results. When there is
    concurrent requests, other connections may see sudden session data
    loss. e.g. Requests from JavaScript and/or requests from URL links.
Although current session module does not accept empty session ID
    cookie, but immediate session deletion may result in empty session ID
    cookie due to client(browser) side race condition. This will result
    that the client creates many session ID needlessly.
To avoid these, you must set deletion time-stamp to $_SESSION and
    reject access while later. Or make sure your application does not
    have concurrent requests. This applies to session_regenerate_id() also."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(239) "Note: 
   
     You do not have to call session_destroy() from usual
     code. Cleanup $_SESSION array rather than destroying session data.
Note: 
   
    Only use session_unset() for older deprecated code
    that does not use $_SESSION."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(730) "Warning
   
    Immediate session deletion may cause unwanted results. When there is
    concurrent requests, other connections may see sudden session data
    loss. e.g. Requests from JavaScript and/or requests from URL links.
   
   
    Although current session module does not accept empty session ID
    cookie, but immediate session deletion may result in empty session ID
    cookie due to client(browser) side race condition. This will result
    that the client creates many session ID needlessly.
   
   
    To avoid these, you must set deletion time-stamp to $_SESSION and
    reject access while later. Or make sure your application does not
    have concurrent requests. This applies to session_regenerate_id() also."
      ["changelog"]=>
      array(0) {
      }
    }
    [7]=>
    array(13) {
      ["name"]=>
      string(14) "session_encode"
      ["summary"]=>
      string(60) "Encodes the current session data as a session encoded string"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(30) "string session_encode ( void )"
      ["anonsig"]=>
      string(22) "string ?????? ( void )"
      ["description"]=>
      string(298) "session_encode() returns a serialized string of the
   contents of the current session data stored in the $_SESSION superglobal.
By default, the serialization method used is internal to PHP, and is not the same as serialize().
   The serialization method can be set using session.serialize_handler."
      ["return"]=>
      string(52) "Returns the contents of the current session encoded."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(72) "Warning
   
    Must call session_start() before using session_encode()."
      ["changelog"]=>
      array(0) {
      }
    }
    [8]=>
    array(13) {
      ["name"]=>
      string(10) "session_gc"
      ["summary"]=>
      string(39) "Perform session data garbage collection"
      ["versions"]=>
      string(16) "(PHP 7 >= 7.1.0)"
      ["signature"]=>
      string(23) "int session_gc ( void )"
      ["anonsig"]=>
      string(19) "int ?????? ( void )"
      ["description"]=>
      string(622) "session_gc() is used to perform session data
   GC(garbage collection). PHP does probability based session GC by
   default.
Probability based GC works somewhat but it has few problems. 1) Low
   traffic site's session data may not be deleted within preferred
   duration. 2) High traffic site's may have too frequent GC. 3) GC is
   performed on the user's request and the user will experience GC
   delay.
Therefore, it is recommended to execute GC periodically for
   production systems. e.g. Use "cron" for UNIX like systems.
   Make sure to disable probability based GC by setting 
   session.gc_probability 
   to 0."
      ["return"]=>
      string(286) "session_gc() returns number of deleted session
   data for success, FALSE for failure.
Old save handlers do not return number of deleted session data, but 
   only success/failure flag. If this is the case, number of deleted
   session data became 1 regardless of actually deleted data."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [9]=>
    array(13) {
      ["name"]=>
      string(25) "session_get_cookie_params"
      ["summary"]=>
      string(33) "Get the session cookie parameters"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(40) "array session_get_cookie_params ( void )"
      ["anonsig"]=>
      string(21) "array ?????? ( void )"
      ["description"]=>
      string(35) "Gets the session cookie parameters."
      ["return"]=>
      string(104) "Returns an array with the current session cookie information, the array
   contains the following items:"
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.2.0"]=>
        string(53) "The "httponly" entry was added in the returned array."
      }
    }
    [10]=>
    array(13) {
      ["name"]=>
      string(10) "session_id"
      ["summary"]=>
      string(37) "Get and/or set the current session id"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(35) "string session_id ([ string $id ] )"
      ["anonsig"]=>
      string(31) "string ?????? ([ string $id ] )"
      ["description"]=>
      string(232) "session_id() is used to get or set the session id for
   the current session.
The constant SID can also be used to
   retrieve the current name and session id as a string suitable for
   adding to URLs. See also Session
   handling."
      ["return"]=>
      string(153) "session_id() returns the session id for the current
   session or the empty string ("") if there is no current
   session (no current session id exists)."
      ["parameters"]=>
      array(1) {
        ["id"]=>
        string(634) "If id is specified, it will replace the current
        session id. session_id() needs to be called before
        session_start() for that purpose. Depending on the
        session handler, not all characters are allowed within the session id.
        For example, the file session handler only allows characters in the
        range a-z A-Z 0-9 , (comma) and - (minus)!
       
       Note: 
        
         When using session cookies, specifying an id
         for session_id() will always send a new cookie
         when session_start() is called, regardless if the
         current session id is identical to the one being set."
      }
      ["flatparameters"]=>
      string(2) "id"
      ["notes"]=>
      string(247) "Note: 
        
         When using session cookies, specifying an id
         for session_id() will always send a new cookie
         when session_start() is called, regardless if the
         current session id is identical to the one being set."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [11]=>
    array(13) {
      ["name"]=>
      string(21) "session_is_registered"
      ["summary"]=>
      string(61) "Find out whether a global variable is registered in a session"
      ["versions"]=>
      string(22) "(PHP 4, PHP 5 < 5.4.0)"
      ["signature"]=>
      string(43) "bool session_is_registered ( string $name )"
      ["anonsig"]=>
      string(28) "bool ?????? ( string $name )"
      ["description"]=>
      string(142) "Finds out whether a global variable is registered in a session.
This function has been
DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0."
      ["return"]=>
      string(143) "session_is_registered() returns TRUE if there is a
   global variable with the name name registered in
   the current session, FALSE otherwise."
      ["parameters"]=>
      array(1) {
        ["name"]=>
        string(18) "The variable name."
      }
      ["flatparameters"]=>
      string(4) "name"
      ["notes"]=>
      string(100) "Note: 
   
    If $_SESSION is used, use isset() to check a
    variable is registered in $_SESSION."
      ["cautions"]=>
      string(164) "Caution
   
    If you are using $_SESSION
    (or $HTTP_SESSION_VARS), do not use
    session_register(),
    session_is_registered() and
    session_unregister()."
      ["warnings"]=>
      string(85) "WarningThis function has been
DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0."
      ["changelog"]=>
      array(0) {
      }
    }
    [12]=>
    array(13) {
      ["name"]=>
      string(19) "session_module_name"
      ["summary"]=>
      string(41) "Get and/or set the current session module"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(48) "string session_module_name ([ string $module ] )"
      ["anonsig"]=>
      string(35) "string ?????? ([ string $module ] )"
      ["description"]=>
      string(69) "session_module_name() gets the name of the current
   session module."
      ["return"]=>
      string(47) "Returns the name of the current session module."
      ["parameters"]=>
      array(1) {
        ["module"]=>
        string(64) "If module is specified, that module will be
       used instead."
      }
      ["flatparameters"]=>
      string(6) "module"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [13]=>
    array(13) {
      ["name"]=>
      string(12) "session_name"
      ["summary"]=>
      string(39) "Get and/or set the current session name"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(39) "string session_name ([ string $name ] )"
      ["anonsig"]=>
      string(33) "string ?????? ([ string $name ] )"
      ["description"]=>
      string(385) "session_name() returns the name of the current
   session. If name is given,
   session_name() will update the session name and return
   the old session name.
The session name is reset to the default value stored in
   session.name at request startup time. Thus, you need to
   call session_name() for every request (and before
   session_start() or session_register()
   are called)."
      ["return"]=>
      string(139) "Returns the name of the current session. If name is given
   and function updates the session name, name of the old session
   is returned."
      ["parameters"]=>
      array(1) {
        ["name"]=>
        string(541) "The session name references the name of the session, which is 
       used in cookies and URLs (e.g. PHPSESSID). It
       should contain only alphanumeric characters; it should be short and
       descriptive (i.e. for users with enabled cookie warnings).
       If name is specified, the name of the current
       session is changed to its value.
      
      
       Warning
        
         The session name can't consist of digits only, at least one letter
         must be present. Otherwise a new session id is generated every time."
      }
      ["flatparameters"]=>
      string(4) "name"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(170) "Warning
        
         The session name can't consist of digits only, at least one letter
         must be present. Otherwise a new session id is generated every time."
      ["changelog"]=>
      array(0) {
      }
    }
    [14]=>
    array(13) {
      ["name"]=>
      string(21) "session_regenerate_id"
      ["summary"]=>
      string(56) "Update the current session id with a newly generated one"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.3.2, PHP 5, PHP 7)"
      ["signature"]=>
      string(66) "bool session_regenerate_id ([ bool $delete_old_session = false ] )"
      ["anonsig"]=>
      string(51) "bool ?????? ([ bool $delete_old_session = false ] )"
      ["description"]=>
      string(882) "session_regenerate_id() will replace the current
   session id with a new one, and keep the current session information.
When session.use_trans_sid
   is enabled, output must be started after session_regenerate_id()
   call. Otherwise, old session ID is used.
Current session_regenerate_id does not handle unstable network well.
    e.g. Mobile and WiFi network. Therefore, you may experience lost
    session by calling session_regenerate_id.
You should not destroy old session data immediately, but should use
    destroy time-stamp and control access to old session ID. Otherwise,
    concurrent access to page may result in inconsistent state, or you
    may have lost session, or it may cause client(browser) side race
    condition and may create many session ID needlessly. Immediate
    session data deletion disables session hijack attack detection
    and prevention also."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(1) {
        ["delete_old_session"]=>
        string(201) "Whether to delete the old associated session file or not.
        You should not delete old session if you need to avoid
        races caused by deletion or detect/avoid session hijack
        attacks."
      }
      ["flatparameters"]=>
      string(18) "delete_old_session"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(650) "Warning
   
    Current session_regenerate_id does not handle unstable network well.
    e.g. Mobile and WiFi network. Therefore, you may experience lost
    session by calling session_regenerate_id.
   
   
    You should not destroy old session data immediately, but should use
    destroy time-stamp and control access to old session ID. Otherwise,
    concurrent access to page may result in inconsistent state, or you
    may have lost session, or it may cause client(browser) side race
    condition and may create many session ID needlessly. Immediate
    session data deletion disables session hijack attack detection
    and prevention also."
      ["changelog"]=>
      array(3) {
        ["7.0.0"]=>
        string(70) "session_regenerate_id() saves old session data
        before closing."
        ["5.1.0"]=>
        string(39) "Added the delete_old_session parameter."
        ["4.3.3"]=>
        string(153) "Since then, if session cookies are enabled, use of
        session_regenerate_id() will also submit a new
        session cookie with the new session id."
      }
    }
    [15]=>
    array(13) {
      ["name"]=>
      string(25) "session_register_shutdown"
      ["summary"]=>
      string(25) "Session shutdown function"
      ["versions"]=>
      string(14) "(PHP >= 5.4.0)"
      ["signature"]=>
      string(39) "void session_register_shutdown ( void )"
      ["anonsig"]=>
      string(20) "void ?????? ( void )"
      ["description"]=>
      string(55) "Registers session_write_close() as a shutdown function."
      ["return"]=>
      string(21) "No value is returned."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [16]=>
    array(13) {
      ["name"]=>
      string(16) "session_register"
      ["summary"]=>
      string(62) "Register one or more global variables with the current session"
      ["versions"]=>
      string(22) "(PHP 4, PHP 5 < 5.4.0)"
      ["signature"]=>
      string(53) "bool session_register ( mixed $name [, mixed $... ] )"
      ["anonsig"]=>
      string(43) "bool ?????? ( mixed $name [, mixed $... ] )"
      ["description"]=>
      string(709) "session_register() accepts a variable number of
   arguments, any of which can be either a string holding the name of a
   variable or an array consisting of variable names or other arrays. For
   each name, session_register() registers the global
   variable with that name in the current session.
You can also create a session variable by simply setting the
   appropriate member of the $_SESSION array.
If session_start() was not called before this function
   is called, an implicit call to session_start() with no
   parameters will be made.  $_SESSION does not mimic
   this behavior and requires session_start() before use.
This function has been
DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(2) {
        ["name"]=>
        string(104) "A string holding the name of a variable or an array consisting of
       variable names or other arrays."
        ["..."]=>
        string(0) ""
      }
      ["flatparameters"]=>
      string(9) "name, ..."
      ["notes"]=>
      string(873) "Note: register_globals: important
noteAs of PHP 4.2.0, the default value for the PHP directive
register_globals is 
off. The PHP community discourages developers from relying on this directive, and encourages the use
of other means, such as the superglobals.
Note: 
   
    It is currently impossible to register resource variables in a session.
    For example, you cannot create a connection to a database and store the
    connection id as a session variable and expect the connection to still be
    valid the next time the session is restored.  PHP functions that return a
    resource are identified by having a return type of
    resource in their function definition.  A list of
    functions that return resources are available in the resource types appendix.
   
   
    If $_SESSION is used, assign values to
    $_SESSION. For example: $_SESSION['var'] = 'ABC';"
      ["cautions"]=>
      string(728) "Caution
   
    If you want your script to work regardless of register_globals, you need to
    instead use the $_SESSION array as
    $_SESSION entries are automatically registered. If
    your script uses session_register(), it will not work
    in environments where the PHP directive register_globals is disabled.
Caution
   
    This registers a global variable. If you want to
    register a session variable from within a function, you need to make sure
    to make it global using the global
    keyword or the $GLOBALS[] array, or use the special
    session arrays as noted below.
Caution
   
    If you are using $_SESSION, do not use
    session_register(),
    session_is_registered(), and
    session_unregister()."
      ["warnings"]=>
      string(85) "WarningThis function has been
DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0."
      ["changelog"]=>
      array(0) {
      }
    }
    [17]=>
    array(13) {
      ["name"]=>
      string(13) "session_reset"
      ["summary"]=>
      string(48) "Re-initialize session array with original values"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.6.0, PHP 7)"
      ["signature"]=>
      string(27) "void session_reset ( void )"
      ["anonsig"]=>
      string(20) "void ?????? ( void )"
      ["description"]=>
      string(169) "session_reset() reinitializes a session with
   original values stored in session storage. This function requires an active session and
   discards changes in $_SESSION."
      ["return"]=>
      string(21) "No value is returned."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [18]=>
    array(13) {
      ["name"]=>
      string(17) "session_save_path"
      ["summary"]=>
      string(44) "Get and/or set the current session save path"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(44) "string session_save_path ([ string $path ] )"
      ["anonsig"]=>
      string(33) "string ?????? ([ string $path ] )"
      ["description"]=>
      string(91) "session_save_path() returns the path of the current
   directory used to save session data."
      ["return"]=>
      string(64) "Returns the path of the current directory used for data storage."
      ["parameters"]=>
      array(1) {
        ["path"]=>
        string(435) "Session data path. If specified, the path to which data is saved will
       be changed. session_save_path() needs to be called
       before session_start() for that purpose.
      
      
       Note: 
        
         On some operating systems, you may want to specify a path on a
         filesystem that handles lots of small files efficiently. For example,
         on Linux, reiserfs may provide better performance than ext2fs."
      }
      ["flatparameters"]=>
      string(4) "path"
      ["notes"]=>
      string(238) "Note: 
        
         On some operating systems, you may want to specify a path on a
         filesystem that handles lots of small files efficiently. For example,
         on Linux, reiserfs may provide better performance than ext2fs."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [19]=>
    array(13) {
      ["name"]=>
      string(25) "session_set_cookie_params"
      ["summary"]=>
      string(33) "Set the session cookie parameters"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(137) "void session_set_cookie_params ( int $lifetime [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]] )"
      ["anonsig"]=>
      string(118) "void ?????? ( int $lifetime [, string $path [, string $domain [, bool $secure = false [, bool $httponly = false ]]]] )"
      ["description"]=>
      string(376) "Set cookie parameters defined in the php.ini file. The effect of this
   function only lasts for the duration of the script. Thus, you need to
   call session_set_cookie_params() for every request and
   before session_start() is called.
This function updates the runtime ini values of the corresponding PHP ini configuration
   keys which can be retrieved with the ini_get()."
      ["return"]=>
      string(21) "No value is returned."
      ["parameters"]=>
      array(5) {
        ["lifetime"]=>
        string(58) "Lifetime of the
       session cookie, defined in seconds."
        ["path"]=>
        string(114) "Path on the domain where
       the cookie will work. Use a single slash ('/') for all paths on the
       domain."
        ["domain"]=>
        string(158) "Cookie domain, for
       example 'www.php.net'. To make cookies visible on all subdomains then
       the domain must be prefixed with a dot like '.php.net'."
        ["secure"]=>
        string(64) "If TRUE cookie will only be sent over
       secure connections."
        ["httponly"]=>
        string(109) "If set to TRUE then PHP will attempt to send the
       httponly
       flag when setting the session cookie."
      }
      ["flatparameters"]=>
      string(40) "lifetime, path, domain, secure, httponly"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(1) {
        ["5.2.0"]=>
        string(33) "The httponly parameter was added."
      }
    }
    [20]=>
    array(13) {
      ["name"]=>
      string(24) "session_set_save_handler"
      ["summary"]=>
      string(41) "Sets user-level session storage functions"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(220) "bool session_set_save_handler ( callable $open , callable $close , callable $read , callable $write , callable $destroy , callable $gc [, callable $create_sid [, callable $validate_sid [, callable $update_timestamp ]]] )"
      ["anonsig"]=>
      string(202) "bool ?????? ( callable $open , callable $close , callable $read , callable $write , callable $destroy , callable $gc [, callable $create_sid [, callable $validate_sid [, callable $update_timestamp ]]] )"
      ["description"]=>
      string(374) "Since PHP 5.4 it is possible to register the following prototype:
session_set_save_handler() sets the user-level
   session storage functions which are used for storing and
   retrieving data associated with a session.  This is most useful
   when a storage method other than those supplied by PHP sessions
   is preferred, e.g. storing the session data in a local database."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(9) {
        ["sessionhandler"]=>
        string(161) "An instance of a class implementing
       SessionHandlerInterface, such as
       SessionHandler, to register as the session
       handler. Since PHP 5.4 only."
        ["register_shutdown"]=>
        string(81) "Register session_write_close() as a
       register_shutdown_function() function."
        ["open(string $savePath, string $sessionName)"]=>
        string(304) "The open callback works like a constructor in classes and is
       executed when the session is being opened.  It is the first callback
       function executed when the session is started automatically or
       manually with session_start().
       Return value is TRUE for success, FALSE for failure."
        ["close()"]=>
        string(257) "The close callback works like a destructor in classes and is
       executed after the session write callback has been called. It is also invoked when
       session_write_close() is called.
       Return value should be TRUE for success, FALSE for failure."
        ["read(string $sessionId)"]=>
        string(779) "The read callback must always return a session encoded (serialized)
       string, or an empty string if there is no data to read.
      
      
       This callback is called internally by PHP when the session starts or
       when session_start() is called.  Before this callback is invoked
       PHP will invoke the open callback.
      
      
       The value this callback returns must be in exactly the same serialized format that was originally
       passed for storage to the write callback.  The value returned will be
       unserialized automatically by PHP and used to populate the $_SESSION superglobal.
       While the data looks similar to serialize() please note it is a different format
       which is speficied in the session.serialize_handler ini setting."
        ["write(string $sessionId, string $data)"]=>
        string(1109) "The write callback is called when the session needs to be saved and closed. This
       callback receives the current session ID a serialized version the $_SESSION superglobal.  The serialization
       method used internally by PHP is specified in the session.serialize_handler ini setting.
      
      
       The serialized session data passed to this callback should be stored against the passed session ID. When retrieving
       this data, the read callback must return the exact value that was originally passed to
       the write callback.
      
      
       This callback is invoked when PHP shuts down or explicitly when session_write_close()
       is called.  Note that after executing this function PHP will internally execute the close callback.
       Note: 
        
         The "write" handler is not executed until after the output stream is
         closed.  Thus, output from debugging statements in the "write"
         handler will never be seen in the browser.  If debugging output is
         necessary, it is suggested that the debug output be written to a
         file instead."
        ["destroy($sessionId)"]=>
        string(222) "This callback is executed when a session is destroyed with session_destroy() or with
       session_regenerate_id() with the destroy parameter set to TRUE.
       Return value should be TRUE for success, FALSE for failure."
        ["gc($lifetime)"]=>
        string(368) "The garbage collector callback is invoked internally by PHP periodically in order to
       purge old session data.  The frequency is controlled by
       session.gc_probability and session.gc_divisor.
       The value of lifetime which is passed to this callback can be set in session.gc_maxlifetime.
       Return value should be TRUE for success, FALSE for failure."
        ["create_sid()"]=>
        string(187) "This callback is executed when a new session ID is required. No
       parameters are provided, and the return value should be a string that
       is a valid session ID for your handler."
      }
      ["flatparameters"]=>
      string(202) "sessionhandler, register_shutdown, open(string $savePath, string $sessionName), close(), read(string $sessionId), write(string $sessionId, string $data), destroy($sessionId), gc($lifetime), create_sid()"
      ["notes"]=>
      string(338) "Note: 
        
         The "write" handler is not executed until after the output stream is
         closed.  Thus, output from debugging statements in the "write"
         handler will never be seen in the browser.  If debugging output is
         necessary, it is suggested that the debug output be written to a
         file instead."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(1410) "Warning
   
    When using objects as session save handlers, it is important to register the
    shutdown function with PHP to avoid unexpected side-effects from the way
    PHP internally destroys objects on shutdown and may prevent the
    write and close from being called.
    Typically you should register 'session_write_close' using the
    register_shutdown_function() function.
   
   
    As of PHP 5.4.0 you can use session_register_shutdown() or
    simply use the 'register shutdown' flag when invoking
    session_set_save_handler() using the OOP method and passing an
    instance that implements SessionHandlerInterface.
Warning
   
    As of PHP 5.0.5 the write and
    close handlers are called after object
    destruction and therefore cannot use objects or throw exceptions.
    Exceptions are not able to be caught since will not be caught nor will
    any exception trace be displayed and the execution will just cease unexpectedly.
    The object destructors can however use sessions.
   
   
    It is possible to call session_write_close() from the
    destructor to solve this chicken and egg problem but the most reliable way is
    to register the shutdown function as described above.
Warning
   
    Current working directory is changed with some SAPIs if session is
    closed in the script termination. It is possible to close the session
    earlier with session_write_close()."
      ["changelog"]=>
      array(2) {
        ["5.5.1"]=>
        string(40) "Added the optional create_sid parameter."
        ["5.4.0"]=>
        string(130) "Added SessionHandlerInterface for implementing session handlers and
       SessionHandler to expose internal PHP session handlers."
      }
    }
    [21]=>
    array(13) {
      ["name"]=>
      string(13) "session_start"
      ["summary"]=>
      string(36) "Start new or resume existing session"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(45) "bool session_start ([ array $options = [] ] )"
      ["anonsig"]=>
      string(38) "bool ?????? ([ array $options = [] ] )"
      ["description"]=>
      string(1149) "session_start() creates a session or resumes the
   current one based on a session identifier passed via a GET or POST
   request, or passed via a cookie.
When session_start() is called or when a session auto starts,
   PHP will call the open and read session save handlers.  These will either be a built-in
   save handler provided by default or by PHP extensions (such as SQLite or Memcached); or can be
   custom handler as defined by session_set_save_handler().
   The read callback will retrieve any existing session data (stored in a special serialized format)
   and will be unserialized and used to automatically populate the $_SESSION superglobal when the
   read callback returns the saved session data back to PHP session handling.
To use a named session, call
   session_name() before calling
   session_start().
When session.use_trans_sid
   is enabled, the session_start() function will
   register an internal output handler for URL rewriting.
If a user uses ob_gzhandler or similar with
   ob_start(), the function order is important for
   proper output.  For example,
   ob_gzhandler must be registered before starting the session."
      ["return"]=>
      string(85) "This function returns TRUE if a session was successfully started,
   otherwise FALSE."
      ["parameters"]=>
      array(1) {
        ["options"]=>
        string(503) "If provided, this is an associative array of options that will override
      the currently set
      session configuration directives.
      The keys should not include the session. prefix.
     
     
      In addition to the normal set of configuration directives, a
      read_and_close option may also be provided. If set to
      TRUE, this will result in the session being closed immediately after
      being read, thereby avoiding unnecessary locking if the session data
      won't be changed."
      }
      ["flatparameters"]=>
      string(7) "options"
      ["notes"]=>
      string(368) "Note: 
   
    To use cookie-based sessions, session_start()
    must be called before outputing anything to the browser.
Note: 
   
    Use of zlib.output_compression
    is recommended instead of ob_gzhandler()
Note: 
   
    This function sends out several HTTP headers depending on the
    configuration. See session_cache_limiter() to
    customize these headers."
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(3) {
        ["7.0.0"]=>
        string(32) "The options parameter was added."
        ["5.3.0"]=>
        string(90) "If a session fails to start, then FALSE is returned.
        Previously TRUE was returned."
        ["4.3.3"]=>
        string(204) "As of PHP 4.3.3, calling session_start()
        after the session was previously started will result in an
        error of level E_NOTICE.  Also, the
        second session start will simply be ignored."
      }
    }
    [22]=>
    array(13) {
      ["name"]=>
      string(14) "session_status"
      ["summary"]=>
      string(34) "Returns the current session status"
      ["versions"]=>
      string(14) "(PHP >= 5.4.0)"
      ["signature"]=>
      string(27) "int session_status ( void )"
      ["anonsig"]=>
      string(19) "int ?????? ( void )"
      ["description"]=>
      string(62) "session_status() is used to return the current session status."
      ["return"]=>
      string(0) ""
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [23]=>
    array(13) {
      ["name"]=>
      string(18) "session_unregister"
      ["summary"]=>
      string(53) "Unregister a global variable from the current session"
      ["versions"]=>
      string(22) "(PHP 4, PHP 5 < 5.4.0)"
      ["signature"]=>
      string(40) "bool session_unregister ( string $name )"
      ["anonsig"]=>
      string(28) "bool ?????? ( string $name )"
      ["description"]=>
      string(171) "session_unregister() unregisters the global variable
   named name from the current session.
This function has been
DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(1) {
        ["name"]=>
        string(18) "The variable name."
      }
      ["flatparameters"]=>
      string(4) "name"
      ["notes"]=>
      string(198) "Note: 
   
    If $_SESSION is used, use unset() to
    unregister a session variable. Do not unset()
    $_SESSION itself as this will disable the special
    function of the $_SESSION superglobal."
      ["cautions"]=>
      string(403) "Caution
   
    This function does not unset the corresponding global variable for
    name, it only prevents the variable from being
    saved as part of the session. You must call unset()
    to remove the corresponding global variable.
Caution
   
    If you are using $_SESSION (or
    $HTTP_SESSION_VARS), do not use
    session_register(),
    session_is_registered() and
    session_unregister()."
      ["warnings"]=>
      string(85) "WarningThis function has been
DEPRECATED as of PHP 5.3.0 and REMOVED as of PHP 5.4.0."
      ["changelog"]=>
      array(0) {
      }
    }
    [24]=>
    array(13) {
      ["name"]=>
      string(13) "session_unset"
      ["summary"]=>
      string(26) "Free all session variables"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(27) "void session_unset ( void )"
      ["anonsig"]=>
      string(20) "void ?????? ( void )"
      ["description"]=>
      string(81) "The session_unset() function frees all session variables
   currently registered."
      ["return"]=>
      string(21) "No value is returned."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(126) "Note: 
   
    If $_SESSION is used, use unset() to
    unregister a session variable, i.e.
    unset ($_SESSION['varname']);."
      ["cautions"]=>
      string(171) "Caution
   
    Do NOT unset the whole $_SESSION with
    unset($_SESSION) as this will disable the registering
    of session variables through the $_SESSION superglobal."
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [25]=>
    array(13) {
      ["name"]=>
      string(19) "session_write_close"
      ["summary"]=>
      string(34) "Write session data and end session"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.4, PHP 5, PHP 7)"
      ["signature"]=>
      string(33) "void session_write_close ( void )"
      ["anonsig"]=>
      string(20) "void ?????? ( void )"
      ["description"]=>
      string(531) "End the current session and store session data.
Session data is usually stored after your script terminated without the
   need to call session_write_close(), but as session data
   is locked to prevent concurrent writes only one script may operate on a
   session at any time. When using framesets together with sessions you will
   experience the frames loading one by one due to this locking. You can
   reduce the time needed to load all the frames by ending the session as
   soon as all changes to session variables are done."
      ["return"]=>
      string(21) "No value is returned."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
  }
  ["Error handling"]=>
  array(12) {
    [0]=>
    array(13) {
      ["name"]=>
      string(15) "debug_backtrace"
      ["summary"]=>
      string(21) "Generates a backtrace"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.3.0, PHP 5, PHP 7)"
      ["signature"]=>
      string(93) "array debug_backtrace ([ int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT [, int $limit = 0 ]] )"
      ["anonsig"]=>
      string(84) "array ?????? ([ int $options = DEBUG_BACKTRACE_PROVIDE_OBJECT [, int $limit = 0 ]] )"
      ["description"]=>
      string(44) "debug_backtrace() generates a PHP backtrace."
      ["return"]=>
      string(89) "Returns an array of associative arrays. The possible returned elements
   are as follows:"
      ["parameters"]=>
      array(2) {
        ["options"]=>
        string(607) "As of 5.3.6, this parameter is a bitmask for the following options:
       debug_backtrace() options
        
         DEBUG_BACKTRACE_PROVIDE_OBJECT
           
            Whether or not to populate the "object" index.
           
          DEBUG_BACKTRACE_IGNORE_ARGS
           
            Whether or not to omit the "args" index, and thus all the function/method arguments,
            to save memory.
           
          

       Before 5.3.6, the only values recognized are TRUE or FALSE, which are the same as 
       setting or not setting the DEBUG_BACKTRACE_PROVIDE_OBJECT option respectively."
        ["limit"]=>
        string(142) "As of 5.4.0, this parameter can be used to limit the number of stack frames returned.
       By default (limit=0) it returns all stack frames."
      }
      ["flatparameters"]=>
      string(14) "options, limit"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(4) {
        ["5.4.0"]=>
        string(35) "Added the optional parameter limit."
        ["5.3.6"]=>
        string(115) "The parameter provide_object changed to options and additional option
        DEBUG_BACKTRACE_IGNORE_ARGS is added."
        ["5.2.5"]=>
        string(44) "Added the optional parameter provide_object."
        ["5.1.1"]=>
        string(54) "Added the current object as a possible return element."
      }
    }
    [1]=>
    array(13) {
      ["name"]=>
      string(21) "debug_print_backtrace"
      ["summary"]=>
      string(18) "Prints a backtrace"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(69) "void debug_print_backtrace ([ int $options = 0 [, int $limit = 0 ]] )"
      ["anonsig"]=>
      string(54) "void ?????? ([ int $options = 0 [, int $limit = 0 ]] )"
      ["description"]=>
      string(131) "debug_print_backtrace() prints a PHP backtrace. It
     prints the function calls, included/required files and
     eval()ed stuff."
      ["return"]=>
      string(21) "No value is returned."
      ["parameters"]=>
      array(2) {
        ["options"]=>
        string(289) "As of 5.3.6, this parameter is a bitmask for the following options:
       debug_print_backtrace() options
        
         DEBUG_BACKTRACE_IGNORE_ARGS
           
            Whether or not to omit the "args" index, and thus all the function/method arguments,
            to save memory."
        ["limit"]=>
        string(140) "As of 5.4.0, this parameter can be used to limit the number of stack frames printed.
       By default (limit=0) it prints all stack frames."
      }
      ["flatparameters"]=>
      string(14) "options, limit"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(2) {
        ["5.4.0"]=>
        string(35) "Added the optional parameter limit."
        ["5.3.6"]=>
        string(37) "Added the optional parameter options."
      }
    }
    [2]=>
    array(13) {
      ["name"]=>
      string(16) "error_clear_last"
      ["summary"]=>
      string(27) "Clear the most recent error"
      ["versions"]=>
      string(7) "(PHP 7)"
      ["signature"]=>
      string(30) "void error_clear_last ( void )"
      ["anonsig"]=>
      string(20) "void ?????? ( void )"
      ["description"]=>
      string(0) ""
      ["return"]=>
      string(89) "Clears the most recent errors, making it unable to be retrieved with
   error_get_last()."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [3]=>
    array(13) {
      ["name"]=>
      string(14) "error_get_last"
      ["summary"]=>
      string(27) "Get the last occurred error"
      ["versions"]=>
      string(23) "(PHP 5 >= 5.2.0, PHP 7)"
      ["signature"]=>
      string(29) "array error_get_last ( void )"
      ["anonsig"]=>
      string(21) "array ?????? ( void )"
      ["description"]=>
      string(52) "Gets information about the last error that occurred."
      ["return"]=>
      string(256) "Returns an associative array describing the last error with keys "type",
   "message", "file" and "line". If the error has been caused by a PHP
   internal function then the "message" begins with its name.
   Returns NULL if there hasn't been an error yet."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [4]=>
    array(13) {
      ["name"]=>
      string(9) "error_log"
      ["summary"]=>
      string(60) "Send an error message to the defined error handling routines"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(111) "bool error_log ( string $message [, int $message_type = 0 [, string $destination [, string $extra_headers ]]] )"
      ["anonsig"]=>
      string(108) "bool ?????? ( string $message [, int $message_type = 0 [, string $destination [, string $extra_headers ]]] )"
      ["description"]=>
      string(66) "Sends an error message to the web server's error log or to a file."
      ["return"]=>
      string(44) "Returns TRUE on success or FALSE on failure."
      ["parameters"]=>
      array(4) {
        ["message"]=>
        string(40) "The error message that should be logged."
        ["message_type"]=>
        string(1012) "Says where the error should go. The possible message types are as 
       follows:
      
      
       error_log() log types
        
         0
           
            message is sent to PHP's system logger, using
            the Operating System's system logging mechanism or a file, depending
            on what the error_log
            configuration directive is set to.  This is the default option.
           
          1
           
            message is sent by email to the address in
            the destination parameter.  This is the only
            message type where the fourth parameter,
            extra_headers is used.
           
          2
           
            No longer an option.
           
          3
           
            message is appended to the file
            destination. A newline is not automatically 
            added to the end of the message string.
           
          4
           
           message is sent directly to the SAPI logging
           handler."
        ["destination"]=>
        string(94) "The destination. Its meaning depends on the 
       message_type parameter as described above."
        ["extra_headers"]=>
        string(161) "The extra headers. It's used when the message_type
       parameter is set to 1.
       This message type uses the same internal function as 
       mail() does."
      }
      ["flatparameters"]=>
      string(49) "message, message_type, destination, extra_headers"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(92) "Warning
   
    error_log() is not binary safe. message will be truncated by null character."
      ["changelog"]=>
      array(1) {
        ["5.2.7"]=>
        string(50) "The possible value of 4 was added to message_type."
      }
    }
    [5]=>
    array(13) {
      ["name"]=>
      string(15) "error_reporting"
      ["summary"]=>
      string(34) "Sets which PHP errors are reported"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(37) "int error_reporting ([ int $level ] )"
      ["anonsig"]=>
      string(28) "int ?????? ([ int $level ] )"
      ["description"]=>
      string(310) "The error_reporting() function sets the
   error_reporting
   directive at runtime.  PHP has many levels of errors, using
   this function sets that level for the duration (runtime) of
   your script. If the optional level is
   not set, error_reporting() will just return
   the current error reporting level."
      ["return"]=>
      string(96) "Returns the old error_reporting
   level or the current level if no level parameter is
   given."
      ["parameters"]=>
      array(1) {
        ["level"]=>
        string(493) "The new error_reporting
       level. It takes on either a bitmask, or named constants. Using named 
       constants is strongly encouraged to ensure compatibility for future 
       versions. As error levels are added, the range of integers increases, 
       so older integer-based error levels will not always behave as expected.
      
      
       The available error level constants and the actual
       meanings of these error levels are described in the
       predefined constants."
      }
      ["flatparameters"]=>
      string(5) "level"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(210) "Warning
   
    Most of E_STRICT errors are evaluated at the
    compile time thus such errors are not reported in the file where
    error_reporting is enhanced
    to include E_STRICT errors (and vice versa)."
      ["changelog"]=>
      array(4) {
        ["5.4.0"]=>
        string(30) "E_STRICT became part of E_ALL."
        ["5.3.0"]=>
        string(46) "E_DEPRECATED and E_USER_DEPRECATED introduced."
        ["5.2.0"]=>
        string(31) "E_RECOVERABLE_ERROR introduced."
        ["5.0.0"]=>
        string(40) "E_STRICT introduced (not part of E_ALL)."
      }
    }
    [6]=>
    array(13) {
      ["name"]=>
      string(21) "restore_error_handler"
      ["summary"]=>
      string(44) "Restores the previous error handler function"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.1, PHP 5, PHP 7)"
      ["signature"]=>
      string(35) "bool restore_error_handler ( void )"
      ["anonsig"]=>
      string(20) "bool ?????? ( void )"
      ["description"]=>
      string(177) "Used after changing the error handler function using
   set_error_handler(), to revert to the previous error
   handler (which could be the built-in or a user defined function)."
      ["return"]=>
      string(34) "This function always returns TRUE."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [7]=>
    array(13) {
      ["name"]=>
      string(25) "restore_exception_handler"
      ["summary"]=>
      string(58) "Restores the previously defined exception handler function"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(39) "bool restore_exception_handler ( void )"
      ["anonsig"]=>
      string(20) "bool ?????? ( void )"
      ["description"]=>
      string(192) "Used after changing the exception handler function using
   set_exception_handler(), to revert to the previous
   exception handler (which could be the built-in or a user defined
   function)."
      ["return"]=>
      string(34) "This function always returns TRUE."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
    [8]=>
    array(13) {
      ["name"]=>
      string(17) "set_error_handler"
      ["summary"]=>
      string(42) "Sets a user-defined error handler function"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.1, PHP 5, PHP 7)"
      ["signature"]=>
      string(92) "mixed set_error_handler ( callable $error_handler [, int $error_types = E_ALL | E_STRICT ] )"
      ["anonsig"]=>
      string(81) "mixed ?????? ( callable $error_handler [, int $error_types = E_ALL | E_STRICT ] )"
      ["description"]=>
      string(1509) "Sets a user function (error_handler) to handle
   errors in a script.
This function can be used for defining your own way of handling errors
   during runtime, for example in applications in which you need to do
   cleanup of data/files when a critical error happens, or when you need
   to trigger an error under certain conditions (using
   trigger_error()).
It is important to remember that the standard PHP error handler is completely
   bypassed for the error types specified by error_types 
   unless the callback function returns FALSE.
   error_reporting() settings will have no effect and your
   error handler will be called regardless - however you are still able to read 
   the current value of 
   error_reporting and act
   appropriately. Of particular note is that this value will be 0 if the
   statement that caused the error was prepended by the
   @ error-control
   operator.
Also note that it is your responsibility to die() if
   necessary. If the error-handler function returns, script execution
   will continue with the next statement after the one that caused an error.
The following error types cannot be handled with a user defined
   function: E_ERROR, E_PARSE,
   E_CORE_ERROR, E_CORE_WARNING,
   E_COMPILE_ERROR,
   E_COMPILE_WARNING, and
   most of E_STRICT raised in the file where
   set_error_handler() is called.
If errors occur before the script is executed (e.g. on file uploads) the 
   custom error handler cannot be called since it is not registered at that 
   time."
      ["return"]=>
      string(342) "Returns a string containing the previously defined error handler (if any). If
   the built-in error handler is used NULL is returned. NULL is also returned
   in case of an error such as an invalid callback. If the previous error handler
   was a class method, this function will return an indexed array with the class
   and the method name."
      ["parameters"]=>
      array(2) {
        ["error_handler"]=>
        string(1914) "A callback with the following signature.
       NULL may be passed instead, to reset this handler to its default state.
       Instead of a function name, an array containing an object reference 
       and a method name can also be supplied.
      
      
       
        bool handler
         ( int $errno
        , string $errstr
        [, string $errfile
        [, int $errline
        [, array $errcontext
       ]]] )

       
errno

         

          
           The first parameter, errno, contains the
           level of the error raised, as an integer.
          
         

        
        
         
errstr

         

          
           The second parameter, errstr, contains the
           error message, as a string.
          
         

        
        
         
errfile

         

          
           The third parameter is optional, errfile,
           which contains the filename that the error was raised in, as a string.
          
         

        
        
         
errline

         

          
           The fourth parameter is optional, errline,
           which contains the line number the error was raised at, as an integer.
          
         

        
        
         
errcontext

         

          
           The fifth parameter is optional, errcontext,
           which is an array that points to the active symbol table at the point
           the error occurred.  In other words, errcontext
           will contain an array of every variable that existed in the scope the
           error was triggered in.
           User error handler must not modify error context.
          
          Warning
           
            This parameter has been DEPRECATED as of PHP 7.2.0.
            Relying on it is highly discouraged.
           
          
         

        
       
       If the function returns FALSE then the normal error handler continues."
        ["error_types"]=>
        string(297) "Can be used to mask the triggering of the
       error_handler function just like the error_reporting ini setting 
       controls which errors are shown. Without this mask set the
       error_handler will be called for every error
       regardless to the setting of the error_reporting setting."
      }
      ["flatparameters"]=>
      string(26) "error_handler, error_types"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(132) "Warning
           
            This parameter has been DEPRECATED as of PHP 7.2.0.
            Relying on it is highly discouraged."
      ["changelog"]=>
      array(3) {
        ["7.2.0"]=>
        string(87) "errcontext became deprecated. Usage of this parameter now emits an E_DEPRECATED notice."
        ["5.5.0"]=>
        string(31) "error_handler now accepts NULL."
        ["5.2.0"]=>
        string(70) "The error handler must return FALSE to populate
        $php_errormsg."
      }
    }
    [9]=>
    array(13) {
      ["name"]=>
      string(21) "set_exception_handler"
      ["summary"]=>
      string(46) "Sets a user-defined exception handler function"
      ["versions"]=>
      string(14) "(PHP 5, PHP 7)"
      ["signature"]=>
      string(62) "callable set_exception_handler ( callable $exception_handler )"
      ["anonsig"]=>
      string(47) "callable ?????? ( callable $exception_handler )"
      ["description"]=>
      string(155) "Sets the default exception handler if an exception is not caught within a
   try/catch block. Execution will stop after the
   exception_handler is called."
      ["return"]=>
      string(141) "Returns the name of the previously defined exception handler, or NULL on error. If
   no previous handler was defined, NULL is also returned."
      ["parameters"]=>
      array(1) {
        ["exception_handler"]=>
        string(956) "Name of the function to be called when an uncaught exception occurs.
       This handler function
       needs to accept one parameter, which will be the exception object that
       was thrown. This is the handler signature before PHP 7:
      
      
       
        void handler
         ( Exception $ex
        )

      
      
       Since PHP 7, most errors are reported by throwing Error
       exceptions, which will be caught by the handler as well. Both Error
       and Exception implements the Throwable interface.
       This is the handler signature since PHP 7:
      
      
       
        void handler
         ( Throwable $ex
        )

      
      
       NULL may be passed instead, to reset this handler to its default state.
      
      Caution
       
        Note that providing an explicit Exception type
        hint for the ex parameter in your callback will
        cause issues with the changed exception hierarchy in PHP 7."
      }
      ["flatparameters"]=>
      string(17) "exception_handler"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(194) "Caution
       
        Note that providing an explicit Exception type
        hint for the ex parameter in your callback will
        cause issues with the changed exception hierarchy in PHP 7."
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(2) {
        ["7.0.0"]=>
        string(95) "The type of parameter passed into exception_handler changed
        from Exception to Throwable"
        ["5.5.0"]=>
        string(121) "Previously, if NULL was passed then this function returned TRUE.
        It returns the previous handler since PHP 5.5.0."
      }
    }
    [10]=>
    array(13) {
      ["name"]=>
      string(13) "trigger_error"
      ["summary"]=>
      string(51) "Generates a user-level error/warning/notice message"
      ["versions"]=>
      string(30) "(PHP 4 >= 4.0.1, PHP 5, PHP 7)"
      ["signature"]=>
      string(77) "bool trigger_error ( string $error_msg [, int $error_type = E_USER_NOTICE ] )"
      ["anonsig"]=>
      string(70) "bool ?????? ( string $error_msg [, int $error_type = E_USER_NOTICE ] )"
      ["description"]=>
      string(312) "Used to trigger a user error condition, it can be used in conjunction
   with the built-in error handler, or with a user defined function that has
   been set as the new error handler
   (set_error_handler()).
This function is useful when you need to generate a particular response to
   an exception at runtime."
      ["return"]=>
      string(80) "This function returns FALSE if wrong error_type is
   specified, TRUE otherwise."
      ["parameters"]=>
      array(2) {
        ["error_msg"]=>
        string(161) "The designated error message for this error. It's limited to 1024 
       bytes in length. Any additional characters beyond 1024 bytes will be 
       truncated."
        ["error_type"]=>
        string(134) "The designated error type for this error. It only works with the E_USER
       family of constants, and will default to E_USER_NOTICE."
      }
      ["flatparameters"]=>
      string(21) "error_msg, error_type"
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(150) "Warning
   
     HTML entities in error_msg are not
     escaped. Use htmlentities() on the message if
     the error is to be displayed in a browser."
      ["changelog"]=>
      array(0) {
      }
    }
    [11]=>
    array(12) {
      ["name"]=>
      string(10) "user_error"
      ["summary"]=>
      string(24) "Alias of trigger_error()"
      ["versions"]=>
      string(21) "(PHP 4, PHP 5, PHP 7)"
      ["signature"]=>
      string(46) "This function is an alias of: trigger_error()."
      ["anonsig"]=>
      string(46) "This function is an alias of: trigger_error()."
      ["description"]=>
      string(47) "This function is an alias of:  trigger_error()."
      ["parameters"]=>
      array(0) {
      }
      ["flatparameters"]=>
      string(0) ""
      ["notes"]=>
      string(0) ""
      ["cautions"]=>
      string(0) ""
      ["warnings"]=>
      string(0) ""
      ["changelog"]=>
      array(0) {
      }
    }
  }
}
